{"ast":null,"code":"var _jsxFileName = \"/Users/manmohan/Documents/drone_assembler/frontend/src/contexts/ProjectContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/contexts/ProjectContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport Logger from '../utils/logger';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectContext = /*#__PURE__*/createContext();\n\n// Create a custom hook to use the project context\nexport const useProject = () => {\n  _s();\n  return useContext(ProjectContext);\n};\n\n// Provider component\n_s(useProject, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ProjectProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentProject, setCurrentProject] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [components, setComponents] = useState([]);\n  const [completedSteps, setCompletedSteps] = useState([]);\n\n  // Load project on component mount\n  useEffect(() => {\n    loadActiveProject();\n  }, []);\n\n  // Load the active project\n  const loadActiveProject = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const userId = getUserId();\n      const projectId = getProjectId();\n      if (!projectId) {\n        // No active project, so we're done loading\n        setIsLoading(false);\n        return;\n      }\n      Logger.info('Loading active project', {\n        userId,\n        projectId\n      });\n      const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n      if (!response.ok) {\n        throw new Error(`Failed to load project: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        // Set current project\n        const {\n          context\n        } = data;\n\n        // Get or fetch the complete project details\n        const projectDetail = await getFullProjectDetails(userId, projectId, context);\n        setCurrentProject(projectDetail);\n        setComponents(context.components || []);\n        setCompletedSteps(context.completedSteps || []);\n        Logger.info('Project loaded successfully', {\n          projectId,\n          name: context.projectName,\n          componentCount: (context.components || []).length\n        });\n      } else {\n        throw new Error(data.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('Error loading project', error);\n      setError('Failed to load your project. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get full project details\n  const getFullProjectDetails = async (userId, projectId, context = null) => {\n    if (context && context.projectId === projectId) {\n      // We already have the context, construct project object\n      return {\n        id: context.projectId,\n        name: context.projectName,\n        drone_type: context.droneType,\n        current_step: context.currentStep,\n        components: context.components,\n        completed_steps: context.completedSteps,\n        last_interaction: context.lastInteraction\n      };\n    }\n\n    // Need to fetch the full project details\n    try {\n      const response = await fetch(`http://localhost:5003/api/assembly/project`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to load project details: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        return data.project;\n      } else {\n        throw new Error(data.error || 'Failed to load project details');\n      }\n    } catch (error) {\n      Logger.error('Error loading project details', error);\n      throw error;\n    }\n  };\n\n  // Set the active project\n  const setActiveProject = async projectId => {\n    try {\n      setIsLoading(true);\n\n      // Clear current project data first\n      setCurrentProject(null);\n      setComponents([]);\n      setCompletedSteps([]);\n      const userId = getUserId();\n      Logger.info('Setting active project', {\n        userId,\n        projectId\n      });\n\n      // Load fresh project data\n      const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n      if (!response.ok) {\n        throw new Error(`Failed to load project: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        // Set current project with fresh data\n        const {\n          context\n        } = data;\n        setCurrentProject({\n          project_id: context.projectId,\n          project_name: context.projectName,\n          drone_type: context.droneType,\n          current_step: context.currentStep,\n          components: context.components || [],\n          completed_steps: context.completedSteps || [],\n          last_interaction: context.lastInteraction\n        });\n        setComponents(context.components || []);\n        setCompletedSteps(context.completedSteps || []);\n        Logger.info('Project switched successfully', {\n          projectId,\n          name: context.projectName,\n          componentCount: (context.components || []).length\n        });\n      } else {\n        throw new Error(data.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('Error setting active project', error);\n      setError('Failed to set active project. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fix for the addComponents function in ProjectContext.js\n\n  const addComponents = async newComponents => {\n    console.log(\"[DEBUG] addComponents called with:\", newComponents);\n    console.log(\"[DEBUG] Current components state:\", components);\n    console.log(\"[DEBUG] Current project:\", currentProject);\n    try {\n      if (!currentProject || !newComponents || !newComponents.length) {\n        console.log(\"[DEBUG] Early return from addComponents - invalid inputs\");\n        return;\n      }\n      const userId = getUserId();\n      const projectId = currentProject.project_id;\n\n      // Merge with existing components (avoiding duplicates)\n      const existingComponents = [...components];\n      console.log(\"[DEBUG] Existing components:\", existingComponents);\n      const allComponents = [...existingComponents];\n      let addedNewComponents = false;\n      newComponents.forEach(newComp => {\n        const exists = existingComponents.some(existing => typeof existing === 'string' && typeof newComp === 'string' && existing.toLowerCase() === newComp.toLowerCase() || existing.name && newComp.name && existing.name.toLowerCase() === newComp.name.toLowerCase());\n        console.log(\"[DEBUG] Component:\", newComp, \"Exists?\", exists);\n        if (!exists) {\n          allComponents.push(newComp);\n          addedNewComponents = true;\n        }\n      });\n      console.log(\"[DEBUG] All components after merge:\", allComponents);\n      console.log(\"[DEBUG] Added new components?\", addedNewComponents);\n      if (!addedNewComponents) {\n        console.log(\"[DEBUG] No new components added, skipping update\");\n        return allComponents;\n      }\n\n      // Update local state FIRST for immediate UI refresh\n      console.log(\"[DEBUG] Updating components state\", allComponents);\n      setComponents(allComponents);\n\n      // Update currentProject immediately for UI refresh\n      console.log(\"[DEBUG] Updating currentProject\");\n      setCurrentProject(prevProject => {\n        const updated = {\n          ...prevProject,\n          components: allComponents\n        };\n        console.log(\"[DEBUG] Updated project:\", updated);\n        return updated;\n      });\n\n      // AFTER updating local state, send to server\n      console.log(\"[DEBUG] Sending to API:\", {\n        userId,\n        projectId,\n        components: allComponents\n      });\n      try {\n        const response = await fetch(`http://localhost:5003/api/assembly/project/components`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId,\n            projectId,\n            components: allComponents\n          })\n        });\n\n        // IMPORTANT: Don't use response.text() and response.json() on the same response\n        if (!response.ok) {\n          throw new Error(`Failed to update components: ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log(\"[DEBUG] API response data:\", data);\n        if (!data.success) {\n          throw new Error(data.error || 'Failed to update components');\n        }\n      } catch (apiError) {\n        console.error(\"[DEBUG] API call error:\", apiError);\n        // Continue with local state update even if API call fails\n        // We've already updated the UI, so just log the error\n        Logger.error('API error in updating components (UI still updated):', apiError);\n      }\n      Logger.info('Components updated successfully', {\n        projectId,\n        componentCount: allComponents.length\n      });\n      return allComponents;\n    } catch (error) {\n      Logger.error('Error updating components', error);\n      setError('Failed to update components. Please try again.');\n      // Revert to the original state\n      setComponents(components);\n      // Also revert the currentProject\n      setCurrentProject(prevProject => ({\n        ...prevProject,\n        components: components\n      }));\n      return null;\n    }\n  };\n  // Add a completed step\n  const addCompletedStep = async step => {\n    try {\n      if (!currentProject || !step) {\n        return;\n      }\n      const userId = getUserId();\n      const projectId = currentProject.project_id;\n\n      // Update local state first for UI responsiveness\n      const updatedSteps = [...completedSteps, step];\n      setCompletedSteps(updatedSteps);\n\n      // Also update the currentProject immediately for UI refresh\n      setCurrentProject(prevProject => ({\n        ...prevProject,\n        current_step: step.stepNumber + 1,\n        completed_steps: updatedSteps\n      }));\n\n      // Send to server\n      Logger.info('Adding completed step', {\n        projectId,\n        stepNumber: step.stepNumber\n      });\n      const response = await fetch(`http://localhost:5003/api/assembly/project/step`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId,\n          step\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to add completed step: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to add completed step');\n      }\n      Logger.info('Completed step added successfully', {\n        projectId,\n        stepNumber: step.stepNumber\n      });\n      console.log(\"[DEBUG] Sending to API:\", {\n        userId,\n        projectId,\n        components: components\n      });\n      return updatedSteps;\n    } catch (error) {\n      Logger.error('Error adding completed step', error);\n      setError('Failed to add completed step. Please try again.');\n      // Revert to the original state\n      setCompletedSteps(completedSteps);\n      // Also revert the currentProject\n      setCurrentProject(prevProject => ({\n        ...prevProject,\n        current_step: prevProject.current_step,\n        // Keep original step\n        completed_steps: completedSteps\n      }));\n      return null;\n    }\n  };\n\n  // Value to be provided by the context\n  const value = {\n    currentProject,\n    isLoading,\n    error,\n    components,\n    completedSteps,\n    loadActiveProject,\n    setActiveProject,\n    addComponents,\n    addCompletedStep\n  };\n  return /*#__PURE__*/_jsxDEV(ProjectContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 5\n  }, this);\n};\n_s2(ProjectProvider, \"Jrfl5IRKFknNymEHeXjLz7L6xN8=\");\n_c = ProjectProvider;\nvar _c;\n$RefreshReg$(_c, \"ProjectProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","getUserId","getProjectId","Logger","jsxDEV","_jsxDEV","ProjectContext","useProject","_s","ProjectProvider","children","_s2","currentProject","setCurrentProject","isLoading","setIsLoading","error","setError","components","setComponents","completedSteps","setCompletedSteps","loadActiveProject","userId","projectId","info","response","fetch","ok","Error","statusText","data","json","success","context","projectDetail","getFullProjectDetails","name","projectName","componentCount","length","id","drone_type","droneType","current_step","currentStep","completed_steps","last_interaction","lastInteraction","method","headers","body","JSON","stringify","project","setActiveProject","project_id","project_name","addComponents","newComponents","console","log","existingComponents","allComponents","addedNewComponents","forEach","newComp","exists","some","existing","toLowerCase","push","prevProject","updated","apiError","addCompletedStep","step","updatedSteps","stepNumber","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/manmohan/Documents/drone_assembler/frontend/src/contexts/ProjectContext.js"],"sourcesContent":["// frontend/src/contexts/ProjectContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport Logger from '../utils/logger';\n\n// Create the context\nconst ProjectContext = createContext();\n\n// Create a custom hook to use the project context\nexport const useProject = () => useContext(ProjectContext);\n\n// Provider component\nexport const ProjectProvider = ({ children }) => {\n  const [currentProject, setCurrentProject] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [components, setComponents] = useState([]);\n  const [completedSteps, setCompletedSteps] = useState([]);\n\n  // Load project on component mount\n  useEffect(() => {\n    loadActiveProject();\n  }, []);\n\n  \n  // Load the active project\n  const loadActiveProject = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const userId = getUserId();\n      const projectId = getProjectId();\n      \n      if (!projectId) {\n        // No active project, so we're done loading\n        setIsLoading(false);\n        return;\n      }\n      \n      Logger.info('Loading active project', { userId, projectId });\n      \n      const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load project: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        // Set current project\n        const { context } = data;\n        \n        // Get or fetch the complete project details\n        const projectDetail = await getFullProjectDetails(userId, projectId, context);\n        \n        setCurrentProject(projectDetail);\n        setComponents(context.components || []);\n        setCompletedSteps(context.completedSteps || []);\n        \n        Logger.info('Project loaded successfully', { \n          projectId, \n          name: context.projectName,\n          componentCount: (context.components || []).length\n        });\n      } else {\n        throw new Error(data.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('Error loading project', error);\n      setError('Failed to load your project. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get full project details\n  const getFullProjectDetails = async (userId, projectId, context = null) => {\n    if (context && context.projectId === projectId) {\n      // We already have the context, construct project object\n      return {\n        id: context.projectId,\n        name: context.projectName,\n        drone_type: context.droneType,\n        current_step: context.currentStep,\n        components: context.components,\n        completed_steps: context.completedSteps,\n        last_interaction: context.lastInteraction\n      };\n    }\n    \n    // Need to fetch the full project details\n    try {\n      const response = await fetch(`http://localhost:5003/api/assembly/project`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load project details: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.project;\n      } else {\n        throw new Error(data.error || 'Failed to load project details');\n      }\n    } catch (error) {\n      Logger.error('Error loading project details', error);\n      throw error;\n    }\n  };\n\n  // Set the active project\n  const setActiveProject = async (projectId) => {\n    try {\n      setIsLoading(true);\n      \n      // Clear current project data first\n      setCurrentProject(null);\n      setComponents([]);\n      setCompletedSteps([]);\n      \n      const userId = getUserId();\n      \n      Logger.info('Setting active project', { userId, projectId });\n      \n      // Load fresh project data\n      const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load project: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        // Set current project with fresh data\n        const { context } = data;\n        \n        setCurrentProject({\n          project_id: context.projectId,\n          project_name: context.projectName,\n          drone_type: context.droneType,\n          current_step: context.currentStep,\n          components: context.components || [],\n          completed_steps: context.completedSteps || [],\n          last_interaction: context.lastInteraction\n        });\n        \n        setComponents(context.components || []);\n        setCompletedSteps(context.completedSteps || []);\n        \n        Logger.info('Project switched successfully', { \n          projectId, \n          name: context.projectName,\n          componentCount: (context.components || []).length\n        });\n      } else {\n        throw new Error(data.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('Error setting active project', error);\n      setError('Failed to set active project. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n// Fix for the addComponents function in ProjectContext.js\n\nconst addComponents = async (newComponents) => {\n  console.log(\"[DEBUG] addComponents called with:\", newComponents);\n  console.log(\"[DEBUG] Current components state:\", components);\n  console.log(\"[DEBUG] Current project:\", currentProject);\n  \n  try {\n    if (!currentProject || !newComponents || !newComponents.length) {\n      console.log(\"[DEBUG] Early return from addComponents - invalid inputs\");\n      return;\n    }\n    \n    const userId = getUserId();\n    const projectId = currentProject.project_id;\n    \n    // Merge with existing components (avoiding duplicates)\n    const existingComponents = [...components];\n    console.log(\"[DEBUG] Existing components:\", existingComponents);\n    \n    const allComponents = [...existingComponents];\n    let addedNewComponents = false;\n    \n    newComponents.forEach(newComp => {\n      const exists = existingComponents.some(existing => \n        (typeof existing === 'string' && typeof newComp === 'string' && \n         existing.toLowerCase() === newComp.toLowerCase()) ||\n        (existing.name && newComp.name && \n         existing.name.toLowerCase() === newComp.name.toLowerCase())\n      );\n      \n      console.log(\"[DEBUG] Component:\", newComp, \"Exists?\", exists);\n      \n      if (!exists) {\n        allComponents.push(newComp);\n        addedNewComponents = true;\n      }\n    });\n    \n    console.log(\"[DEBUG] All components after merge:\", allComponents);\n    console.log(\"[DEBUG] Added new components?\", addedNewComponents);\n    \n    if (!addedNewComponents) {\n      console.log(\"[DEBUG] No new components added, skipping update\");\n      return allComponents;\n    }\n    \n    // Update local state FIRST for immediate UI refresh\n    console.log(\"[DEBUG] Updating components state\", allComponents);\n    setComponents(allComponents);\n    \n    // Update currentProject immediately for UI refresh\n    console.log(\"[DEBUG] Updating currentProject\");\n    setCurrentProject(prevProject => {\n      const updated = {\n        ...prevProject,\n        components: allComponents\n      };\n      console.log(\"[DEBUG] Updated project:\", updated);\n      return updated;\n    });\n    \n    // AFTER updating local state, send to server\n    console.log(\"[DEBUG] Sending to API:\", {\n      userId,\n      projectId,\n      components: allComponents\n    });\n    \n    try {\n      const response = await fetch(`http://localhost:5003/api/assembly/project/components`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId,\n          components: allComponents\n        })\n      });\n      \n      // IMPORTANT: Don't use response.text() and response.json() on the same response\n      if (!response.ok) {\n        throw new Error(`Failed to update components: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log(\"[DEBUG] API response data:\", data);\n      \n      if (!data.success) {\n        throw new Error(data.error || 'Failed to update components');\n      }\n    } catch (apiError) {\n      console.error(\"[DEBUG] API call error:\", apiError);\n      // Continue with local state update even if API call fails\n      // We've already updated the UI, so just log the error\n      Logger.error('API error in updating components (UI still updated):', apiError);\n    }\n    \n    Logger.info('Components updated successfully', {\n      projectId,\n      componentCount: allComponents.length\n    });\n    \n    return allComponents;\n  } catch (error) {\n    Logger.error('Error updating components', error);\n    setError('Failed to update components. Please try again.');\n    // Revert to the original state\n    setComponents(components);\n    // Also revert the currentProject\n    setCurrentProject(prevProject => ({\n      ...prevProject,\n      components: components\n    }));\n    return null;\n  }\n};\n  // Add a completed step\n  const addCompletedStep = async (step) => {\n    try {\n      if (!currentProject || !step) {\n        return;\n      }\n      \n      const userId = getUserId();\n      const projectId = currentProject.project_id;\n      \n      // Update local state first for UI responsiveness\n      const updatedSteps = [...completedSteps, step];\n      setCompletedSteps(updatedSteps);\n      \n      // Also update the currentProject immediately for UI refresh\n      setCurrentProject(prevProject => ({\n        ...prevProject,\n        current_step: step.stepNumber + 1,\n        completed_steps: updatedSteps\n      }));\n      \n      // Send to server\n      Logger.info('Adding completed step', { \n        projectId,\n        stepNumber: step.stepNumber\n      });\n      \n      const response = await fetch(`http://localhost:5003/api/assembly/project/step`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId,\n          step\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to add completed step: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.error || 'Failed to add completed step');\n      }\n      \n      Logger.info('Completed step added successfully', {\n        projectId,\n        stepNumber: step.stepNumber\n      });\n\n      console.log(\"[DEBUG] Sending to API:\", {\n        userId,\n        projectId,\n        components: components\n      });\n\n      return updatedSteps;\n    } catch (error) {\n      Logger.error('Error adding completed step', error);\n      setError('Failed to add completed step. Please try again.');\n      // Revert to the original state\n      setCompletedSteps(completedSteps);\n      // Also revert the currentProject\n      setCurrentProject(prevProject => ({\n        ...prevProject,\n        current_step: prevProject.current_step, // Keep original step\n        completed_steps: completedSteps\n      }));\n      return null;\n    }\n  };\n\n  // Value to be provided by the context\n  const value = {\n    currentProject,\n    isLoading,\n    error,\n    components,\n    completedSteps,\n    loadActiveProject,\n    setActiveProject,\n    addComponents,\n    addCompletedStep\n  };\n  \n\n\n  return (\n    <ProjectContext.Provider value={value}>\n      {children}\n    </ProjectContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}