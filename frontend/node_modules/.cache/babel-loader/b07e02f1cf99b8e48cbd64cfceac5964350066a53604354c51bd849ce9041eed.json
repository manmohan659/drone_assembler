{"ast":null,"code":"var _jsxFileName = \"/Users/single/Workspaces/drone_assembler/frontend/src/components/CameraFeed.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/CameraFeed.js\nimport React, { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport { Camera, Play, Pause, Timer, Bug as BugIcon } from 'lucide-react';\nimport SpeechHandler from './SpeechHandler';\nimport { processGeminiResponse } from '../utils/speechUtils';\nimport Logger from '../utils/logger';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CameraFeed = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  currentStep,\n  onAnalysisComplete\n}, ref) => {\n  _s();\n  const videoRef = useRef(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [autoMode, setAutoMode] = useState(false);\n  const [autoCounter, setAutoCounter] = useState(5);\n  const [debugInfo, setDebugInfo] = useState(null);\n  const [isTestingAPI, setIsTestingAPI] = useState(false);\n  const [speechText, setSpeechText] = useState('');\n  const analyzeIntervalRef = useRef(null);\n  const countdownIntervalRef = useRef(null);\n\n  // Expose methods to parent component\n  useImperativeHandle(ref, () => ({\n    captureFrame: () => captureFrame(),\n    handleVoiceInput: transcript => handleVoiceInput(transcript),\n    setSpeechText: text => {\n      Logger.info('Setting speech text from external component:', {\n        text: text ? text.slice(0, 100) + (text.length > 100 ? '...' : '') : 'empty'\n      });\n\n      // Clear first to force re-render if the text hasn't changed\n      setSpeechText('');\n\n      // Short timeout to ensure the state update is processed\n      setTimeout(() => {\n        setSpeechText(text);\n      }, 50);\n    }\n  }));\n  useEffect(() => {\n    startCamera();\n    return () => {\n      stopCamera();\n      if (analyzeIntervalRef.current) clearInterval(analyzeIntervalRef.current);\n      if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n  const startCamera = async () => {\n    try {\n      Logger.info('Initializing camera');\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: 'environment',\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          }\n        }\n      });\n      videoRef.current.srcObject = stream;\n      Logger.info('Camera initialized successfully');\n    } catch (error) {\n      Logger.error('Error accessing camera:', error);\n      setDebugInfo({\n        status: 'error',\n        message: 'Camera access denied: ' + error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  };\n  const stopCamera = () => {\n    var _videoRef$current;\n    Logger.info('Stopping camera');\n    const stream = (_videoRef$current = videoRef.current) === null || _videoRef$current === void 0 ? void 0 : _videoRef$current.srcObject;\n    stream === null || stream === void 0 ? void 0 : stream.getTracks().forEach(track => track.stop());\n  };\n\n  // Update just the testGeminiConnection function in CameraFeed.js\n\n  const testGeminiConnection = async () => {\n    setIsTestingAPI(true);\n    try {\n      Logger.info('Testing Gemini API connection');\n      const response = await fetch('http://localhost:5003/api/assembly/gemini/test');\n\n      // Log the raw response first\n      const responseText = await response.text();\n      Logger.debug('Raw Gemini test response:', responseText);\n\n      // Try to parse as JSON\n      let data;\n      try {\n        data = JSON.parse(responseText);\n      } catch (e) {\n        throw new Error(`Failed to parse response as JSON: ${responseText}`);\n      }\n      Logger.info('Gemini API test response:', data);\n      const testMessage = data.success ? 'API connection successful' : 'API connection failed';\n      setSpeechText(testMessage);\n      setDebugInfo({\n        status: data.success ? 'success' : 'error',\n        message: data.success ? data.response : data.error,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      Logger.error('Gemini API test failed:', error);\n      setSpeechText('API test failed. Please check the console for details.');\n      setDebugInfo({\n        status: 'error',\n        message: `API Test Failed: ${error.message}`,\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setIsTestingAPI(false);\n    }\n  };\n  const captureFrame = () => {\n    Logger.debug('Capturing video frame');\n    const video = videoRef.current;\n    const canvas = document.createElement('canvas');\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL('image/jpeg', 0.8);\n  };\n  // frontend/src/components/CameraFeed.js - Updated handleVoiceInput function\n  // const handleVoiceInput = async (transcript) => {\n  //   if (isAnalyzing) {\n  //     Logger.warn('Analysis already in progress, skipping voice input');\n  //     return;\n  //   }\n\n  //   setIsAnalyzing(true);\n  //   try {\n  //     Logger.info('Processing voice input:', transcript);\n  //     const imageData = captureFrame();\n\n  //     Logger.info('Captured image for voice query, size:', imageData.length);\n\n  //     const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({\n  //         image: imageData,\n  //         query: transcript,\n  //         currentStep\n  //       })\n  //     });\n\n  //     if (!response.ok) {\n  //       throw new Error(`HTTP error! status: ${response.status}`);\n  //     }\n\n  //     const data = await response.json();\n  //     Logger.info('Voice query response:', data);\n\n  //     if (data.success) {\n  //       // Extract the text response for speech synthesis\n  //       let voiceResponse;\n\n  //       if (data.analysis.answer) {\n  //         voiceResponse = `${data.analysis.answer}`;\n  //         if (data.analysis.details) {\n  //           voiceResponse += ` ${data.analysis.details}`;\n  //         }\n  //       } else if (typeof data.analysis === 'string') {\n  //         // Handle case where response is a string\n  //         voiceResponse = data.analysis;\n  //       } else {\n  //         // Fallback\n  //         voiceResponse = 'Analysis completed successfully.';\n  //       }\n\n  //       // Add warnings if present\n  //       if (data.analysis.warnings && data.analysis.warnings.length > 0) {\n  //         voiceResponse += ' Warning: ' + data.analysis.warnings.join('. ');\n  //       }\n\n  //       Logger.info('Setting speech text for TTS:', voiceResponse.slice(0, 100) + '...');\n  //       setSpeechText(voiceResponse);\n\n  //       onAnalysisComplete(data);\n  //     } else {\n  //       throw new Error(data.error || 'Voice query failed');\n  //     }\n\n  //   } catch (error) {\n  //     Logger.error('Voice query error:', error);\n  //     setSpeechText('I encountered an error processing your question. Please try again.');\n  //     setDebugInfo({\n  //       status: 'error',\n  //       message: error.message,\n  //       timestamp: new Date().toISOString()\n  //     });\n  //   } finally {\n  //     setIsAnalyzing(false);\n  //   }\n  // };\n  const handleVoiceInput = async transcript => {\n    if (isAnalyzing) {\n      Logger.warn('Analysis already in progress, skipping voice input');\n      return;\n    }\n    setIsAnalyzing(true);\n    // Clear previous speech text before starting\n    setSpeechText('');\n    try {\n      Logger.info('Processing voice input:', transcript);\n      const imageData = captureFrame();\n\n      // Get user and project IDs\n      const userId = getUserId();\n      const projectId = getProjectId();\n      Logger.info('Captured image for voice query, size:', imageData.length);\n      const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData,\n          query: transcript,\n          currentStep,\n          userId,\n          projectId,\n          requestId: Date.now().toString() // Add unique request ID\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      Logger.info('Voice query response:', data);\n      if (data.success) {\n        // Clear any previous analysis\n        onAnalysisComplete(null);\n\n        // Process new response\n        const speechText = processGeminiResponse(data);\n        setSpeechText(speechText);\n\n        // Small timeout to ensure state updates don't conflict\n        setTimeout(() => {\n          onAnalysisComplete(data);\n        }, 50);\n      } else {\n        throw new Error(data.error || 'Voice query failed');\n      }\n    } catch (error) {\n      Logger.error('Voice query error:', error);\n      setSpeechText('I encountered an error processing your question. Please try again.');\n      onAnalysisComplete(null); // Clear on error\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  const startAutoMode = () => {\n    Logger.info('Starting auto analysis mode');\n    setAutoMode(true);\n    analyzeIntervalRef.current = setInterval(captureAndAnalyze, 5000);\n    countdownIntervalRef.current = setInterval(() => {\n      setAutoCounter(prev => prev === 1 ? 5 : prev - 1);\n    }, 1000);\n    captureAndAnalyze();\n  };\n  const stopAutoMode = () => {\n    Logger.info('Stopping auto analysis mode');\n    setAutoMode(false);\n    if (analyzeIntervalRef.current) clearInterval(analyzeIntervalRef.current);\n    if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\n    setAutoCounter(5);\n  };\n\n  // 5. Fix in CameraFeed.js - captureAndAnalyze function\n  // Ensure user and project IDs are passed to backend\n\n  const captureAndAnalyze = async () => {\n    if (isAnalyzing) {\n      Logger.warn('Analysis already in progress, skipping');\n      return;\n    }\n    setIsAnalyzing(true);\n    // Clear previous speech text and analysis results before starting new analysis\n    setSpeechText('');\n    try {\n      var _data$analysis, _data$analysis2;\n      Logger.info('Starting image analysis', {\n        currentStep\n      });\n      const imageData = captureFrame();\n\n      // Get current user and project IDs\n      const userId = getUserId();\n      const projectId = getProjectId();\n      Logger.info('Sending analysis request', {\n        userId,\n        projectId,\n        currentStep,\n        hasImage: !!imageData,\n        timestamp: new Date().toISOString() // Add timestamp to ensure uniqueness\n      });\n      const response = await fetch(`http://localhost:5003/api/assembly/gemini/validate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData,\n          currentStep,\n          userId,\n          projectId,\n          requestId: Date.now().toString() // Add unique request ID\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      Logger.info('Received analysis response:', {\n        success: data.success,\n        hasComponents: !!((_data$analysis = data.analysis) !== null && _data$analysis !== void 0 && _data$analysis.identifiedComponents) || !!((_data$analysis2 = data.analysis) !== null && _data$analysis2 !== void 0 && _data$analysis2.identifiedParts),\n        timestamp: new Date().toISOString(),\n        meta: data.meta // Log any metadata from response\n      });\n      if (data.success) {\n        // Process the response into a human-readable format\n        const speechText = processGeminiResponse(data);\n\n        // Set the speech text - adding a unique identifier to force re-rendering\n        setSpeechText(speechText);\n\n        // Clear any old analysis before setting the new one\n        onAnalysisComplete(null); // Clear first\n\n        // Small timeout to ensure state updates don't conflict\n        setTimeout(() => {\n          onAnalysisComplete(data);\n        }, 50);\n      } else {\n        throw new Error(data.error || 'Analysis failed');\n      }\n    } catch (error) {\n      Logger.error('Analysis error:', error);\n      setSpeechText('I encountered an error while analyzing the image. Please try again.');\n      onAnalysisComplete(null); // Clear on error\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-black/30 backdrop-blur-sm rounded-2xl p-4 border border-white/10\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aspect-video bg-black/40 rounded-xl overflow-hidden relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        className: \"w-full h-full object-cover\",\n        autoPlay: true,\n        playsInline: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), isAnalyzing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 bg-black/50 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-white\",\n          children: \"Analyzing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }, this), autoMode && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 right-4 bg-black/70 rounded-lg px-3 py-1.5 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Timer, {\n          className: \"w-4 h-4 text-purple-400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white\",\n          children: [\"Next scan in: \", autoCounter, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-semibold text-white\",\n        children: \"Live Assembly View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: testGeminiConnection,\n          disabled: isTestingAPI,\n          className: \"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(BugIcon, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), isTestingAPI ? 'Testing...' : 'Test API']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: autoMode ? stopAutoMode : startAutoMode,\n          className: `${autoMode ? 'bg-red-600' : 'bg-green-600'} hover:opacity-90 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2`,\n          children: autoMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Pause, {\n              className: \"w-4 h-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this), \"Stop Auto\"]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Play, {\n              className: \"w-4 h-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 17\n            }, this), \"Start Auto\"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: captureAndAnalyze,\n          disabled: isAnalyzing || autoMode,\n          className: `bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 ${isAnalyzing || autoMode ? 'opacity-50 cursor-not-allowed' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(Camera, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this), \"Analyze\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), debugInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mt-4 p-4 rounded-lg ${debugInfo.status === 'success' ? 'bg-green-900/20' : 'bg-red-900/20'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-start\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-white font-medium\",\n          children: \"Debug Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xs text-gray-400\",\n          children: debugInfo.timestamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"mt-2 text-sm font-mono whitespace-pre-wrap text-gray-200\",\n        children: debugInfo.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SpeechHandler, {\n      text: speechText,\n      onSpeechEnd: () => Logger.info('Speech synthesis completed')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 5\n  }, this);\n}, \"XYRNiHf4RU/lCRc+j78ccuWjsh8=\")), \"XYRNiHf4RU/lCRc+j78ccuWjsh8=\");\n_c2 = CameraFeed;\nCameraFeed.displayName = 'CameraFeed';\nexport default CameraFeed;\nvar _c, _c2;\n$RefreshReg$(_c, \"CameraFeed$forwardRef\");\n$RefreshReg$(_c2, \"CameraFeed\");","map":{"version":3,"names":["React","useEffect","useRef","useState","forwardRef","useImperativeHandle","Camera","Play","Pause","Timer","Bug","BugIcon","SpeechHandler","processGeminiResponse","Logger","getUserId","getProjectId","jsxDEV","_jsxDEV","Fragment","_Fragment","CameraFeed","_s","_c","currentStep","onAnalysisComplete","ref","videoRef","isAnalyzing","setIsAnalyzing","autoMode","setAutoMode","autoCounter","setAutoCounter","debugInfo","setDebugInfo","isTestingAPI","setIsTestingAPI","speechText","setSpeechText","analyzeIntervalRef","countdownIntervalRef","captureFrame","handleVoiceInput","transcript","text","info","slice","length","setTimeout","startCamera","stopCamera","current","clearInterval","stream","navigator","mediaDevices","getUserMedia","video","facingMode","width","ideal","height","srcObject","error","status","message","timestamp","Date","toISOString","_videoRef$current","getTracks","forEach","track","stop","testGeminiConnection","response","fetch","responseText","debug","data","JSON","parse","e","Error","testMessage","success","canvas","document","createElement","videoWidth","videoHeight","context","getContext","drawImage","toDataURL","warn","imageData","userId","projectId","method","headers","body","stringify","image","query","requestId","now","toString","ok","json","startAutoMode","setInterval","captureAndAnalyze","prev","stopAutoMode","_data$analysis","_data$analysis2","hasImage","hasComponents","analysis","identifiedComponents","identifiedParts","meta","className","children","autoPlay","playsInline","muted","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","onSpeechEnd","_c2","displayName","$RefreshReg$"],"sources":["/Users/single/Workspaces/drone_assembler/frontend/src/components/CameraFeed.js"],"sourcesContent":["// frontend/src/components/CameraFeed.js\nimport React, { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport { Camera, Play, Pause, Timer, Bug as BugIcon } from 'lucide-react';\nimport SpeechHandler from './SpeechHandler';\nimport { processGeminiResponse } from '../utils/speechUtils';\nimport Logger from '../utils/logger';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\n\nconst CameraFeed = forwardRef(({ currentStep, onAnalysisComplete }, ref) => {\n  const videoRef = useRef(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [autoMode, setAutoMode] = useState(false);\n  const [autoCounter, setAutoCounter] = useState(5);\n  const [debugInfo, setDebugInfo] = useState(null);\n  const [isTestingAPI, setIsTestingAPI] = useState(false);\n  const [speechText, setSpeechText] = useState('');\n  const analyzeIntervalRef = useRef(null);\n  const countdownIntervalRef = useRef(null);\n\n  // Expose methods to parent component\n  useImperativeHandle(ref, () => ({\n    captureFrame: () => captureFrame(),\n    handleVoiceInput: (transcript) => handleVoiceInput(transcript),\n    setSpeechText: (text) => {\n      Logger.info('Setting speech text from external component:', {\n        text: text ? text.slice(0, 100) + (text.length > 100 ? '...' : '') : 'empty'\n      });\n      \n      // Clear first to force re-render if the text hasn't changed\n      setSpeechText('');\n      \n      // Short timeout to ensure the state update is processed\n      setTimeout(() => {\n        setSpeechText(text);\n      }, 50);\n    }\n  }));\n\n  useEffect(() => {\n    startCamera();\n    return () => {\n      stopCamera();\n      if (analyzeIntervalRef.current) clearInterval(analyzeIntervalRef.current);\n      if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n\n  const startCamera = async () => {\n    try {\n      Logger.info('Initializing camera');\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: { \n          facingMode: 'environment',\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        } \n      });\n      videoRef.current.srcObject = stream;\n      Logger.info('Camera initialized successfully');\n    } catch (error) {\n      Logger.error('Error accessing camera:', error);\n      setDebugInfo({\n        status: 'error',\n        message: 'Camera access denied: ' + error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  };\n\n  const stopCamera = () => {\n    Logger.info('Stopping camera');\n    const stream = videoRef.current?.srcObject;\n    stream?.getTracks().forEach(track => track.stop());\n  };\n\n// Update just the testGeminiConnection function in CameraFeed.js\n\nconst testGeminiConnection = async () => {\n    setIsTestingAPI(true);\n    try {\n      Logger.info('Testing Gemini API connection');\n      \n      const response = await fetch('http://localhost:5003/api/assembly/gemini/test');\n      \n      // Log the raw response first\n      const responseText = await response.text();\n      Logger.debug('Raw Gemini test response:', responseText);\n\n      // Try to parse as JSON\n      let data;\n      try {\n        data = JSON.parse(responseText);\n      } catch (e) {\n        throw new Error(`Failed to parse response as JSON: ${responseText}`);\n      }\n\n      Logger.info('Gemini API test response:', data);\n      \n      const testMessage = data.success ? 'API connection successful' : 'API connection failed';\n      setSpeechText(testMessage);\n      \n      setDebugInfo({\n        status: data.success ? 'success' : 'error',\n        message: data.success ? data.response : data.error,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      Logger.error('Gemini API test failed:', error);\n      setSpeechText('API test failed. Please check the console for details.');\n      setDebugInfo({\n        status: 'error',\n        message: `API Test Failed: ${error.message}`,\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setIsTestingAPI(false);\n    }\n  };\n  \n  const captureFrame = () => {\n    Logger.debug('Capturing video frame');\n    const video = videoRef.current;\n    const canvas = document.createElement('canvas');\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL('image/jpeg', 0.8);\n  };\n// frontend/src/components/CameraFeed.js - Updated handleVoiceInput function\n// const handleVoiceInput = async (transcript) => {\n//   if (isAnalyzing) {\n//     Logger.warn('Analysis already in progress, skipping voice input');\n//     return;\n//   }\n  \n//   setIsAnalyzing(true);\n//   try {\n//     Logger.info('Processing voice input:', transcript);\n//     const imageData = captureFrame();\n    \n//     Logger.info('Captured image for voice query, size:', imageData.length);\n    \n//     const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({\n//         image: imageData,\n//         query: transcript,\n//         currentStep\n//       })\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     const data = await response.json();\n//     Logger.info('Voice query response:', data);\n    \n//     if (data.success) {\n//       // Extract the text response for speech synthesis\n//       let voiceResponse;\n      \n//       if (data.analysis.answer) {\n//         voiceResponse = `${data.analysis.answer}`;\n//         if (data.analysis.details) {\n//           voiceResponse += ` ${data.analysis.details}`;\n//         }\n//       } else if (typeof data.analysis === 'string') {\n//         // Handle case where response is a string\n//         voiceResponse = data.analysis;\n//       } else {\n//         // Fallback\n//         voiceResponse = 'Analysis completed successfully.';\n//       }\n      \n//       // Add warnings if present\n//       if (data.analysis.warnings && data.analysis.warnings.length > 0) {\n//         voiceResponse += ' Warning: ' + data.analysis.warnings.join('. ');\n//       }\n      \n//       Logger.info('Setting speech text for TTS:', voiceResponse.slice(0, 100) + '...');\n//       setSpeechText(voiceResponse);\n      \n//       onAnalysisComplete(data);\n//     } else {\n//       throw new Error(data.error || 'Voice query failed');\n//     }\n\n//   } catch (error) {\n//     Logger.error('Voice query error:', error);\n//     setSpeechText('I encountered an error processing your question. Please try again.');\n//     setDebugInfo({\n//       status: 'error',\n//       message: error.message,\n//       timestamp: new Date().toISOString()\n//     });\n//   } finally {\n//     setIsAnalyzing(false);\n//   }\n// };\nconst handleVoiceInput = async (transcript) => {\n  if (isAnalyzing) {\n    Logger.warn('Analysis already in progress, skipping voice input');\n    return;\n  }\n  \n  setIsAnalyzing(true);\n  // Clear previous speech text before starting\n  setSpeechText('');\n  \n  try {\n    Logger.info('Processing voice input:', transcript);\n    const imageData = captureFrame();\n    \n    // Get user and project IDs\n    const userId = getUserId();\n    const projectId = getProjectId();\n    \n    Logger.info('Captured image for voice query, size:', imageData.length);\n    \n    const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        image: imageData,\n        query: transcript,\n        currentStep,\n        userId,\n        projectId,\n        requestId: Date.now().toString() // Add unique request ID\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    Logger.info('Voice query response:', data);\n    \n    if (data.success) {\n      // Clear any previous analysis\n      onAnalysisComplete(null);\n      \n      // Process new response\n      const speechText = processGeminiResponse(data);\n      setSpeechText(speechText);\n      \n      // Small timeout to ensure state updates don't conflict\n      setTimeout(() => {\n        onAnalysisComplete(data);\n      }, 50);\n    } else {\n      throw new Error(data.error || 'Voice query failed');\n    }\n\n  } catch (error) {\n    Logger.error('Voice query error:', error);\n    setSpeechText('I encountered an error processing your question. Please try again.');\n    onAnalysisComplete(null); // Clear on error\n  } finally {\n    setIsAnalyzing(false);\n  }\n};\n  const startAutoMode = () => {\n    Logger.info('Starting auto analysis mode');\n    setAutoMode(true);\n    analyzeIntervalRef.current = setInterval(captureAndAnalyze, 5000);\n    countdownIntervalRef.current = setInterval(() => {\n      setAutoCounter((prev) => (prev === 1 ? 5 : prev - 1));\n    }, 1000);\n    captureAndAnalyze();\n  };\n\n  const stopAutoMode = () => {\n    Logger.info('Stopping auto analysis mode');\n    setAutoMode(false);\n    if (analyzeIntervalRef.current) clearInterval(analyzeIntervalRef.current);\n    if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\n    setAutoCounter(5);\n  };\n\n// 5. Fix in CameraFeed.js - captureAndAnalyze function\n// Ensure user and project IDs are passed to backend\n\nconst captureAndAnalyze = async () => {\n  if (isAnalyzing) {\n    Logger.warn('Analysis already in progress, skipping');\n    return;\n  }\n  \n  setIsAnalyzing(true);\n  // Clear previous speech text and analysis results before starting new analysis\n  setSpeechText('');\n  \n  try {\n    Logger.info('Starting image analysis', { currentStep });\n    const imageData = captureFrame();\n    \n    // Get current user and project IDs\n    const userId = getUserId();\n    const projectId = getProjectId();\n    \n    Logger.info('Sending analysis request', { \n      userId, \n      projectId,\n      currentStep,\n      hasImage: !!imageData,\n      timestamp: new Date().toISOString() // Add timestamp to ensure uniqueness\n    });\n    \n    const response = await fetch(`http://localhost:5003/api/assembly/gemini/validate`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        image: imageData,\n        currentStep,\n        userId,\n        projectId,\n        requestId: Date.now().toString() // Add unique request ID\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    Logger.info('Received analysis response:', { \n      success: data.success,\n      hasComponents: !!data.analysis?.identifiedComponents || !!data.analysis?.identifiedParts,\n      timestamp: new Date().toISOString(),\n      meta: data.meta // Log any metadata from response\n    });\n    \n    if (data.success) {\n      // Process the response into a human-readable format\n      const speechText = processGeminiResponse(data);\n      \n      // Set the speech text - adding a unique identifier to force re-rendering\n      setSpeechText(speechText);\n      \n      // Clear any old analysis before setting the new one\n      onAnalysisComplete(null); // Clear first\n      \n      // Small timeout to ensure state updates don't conflict\n      setTimeout(() => {\n        onAnalysisComplete(data);\n      }, 50);\n    } else {\n      throw new Error(data.error || 'Analysis failed');\n    }\n\n  } catch (error) {\n    Logger.error('Analysis error:', error);\n    setSpeechText('I encountered an error while analyzing the image. Please try again.');\n    onAnalysisComplete(null); // Clear on error\n  } finally {\n    setIsAnalyzing(false);\n  }\n};\n  return (\n    <div className=\"bg-black/30 backdrop-blur-sm rounded-2xl p-4 border border-white/10\">\n      <div className=\"aspect-video bg-black/40 rounded-xl overflow-hidden relative\">\n        <video \n          ref={videoRef} \n          className=\"w-full h-full object-cover\" \n          autoPlay \n          playsInline \n          muted \n        />\n        {isAnalyzing && (\n          <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n            <div className=\"text-white\">Analyzing...</div>\n          </div>\n        )}\n        \n        {autoMode && (\n          <div className=\"absolute top-4 right-4 bg-black/70 rounded-lg px-3 py-1.5 flex items-center gap-2\">\n            <Timer className=\"w-4 h-4 text-purple-400\" />\n            <span className=\"text-white\">Next scan in: {autoCounter}s</span>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"mt-4 flex justify-between items-center\">\n        <h2 className=\"text-lg font-semibold text-white\">Live Assembly View</h2>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={testGeminiConnection}\n            disabled={isTestingAPI}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2\"\n          >\n            <BugIcon className=\"w-4 h-4\" />\n            {isTestingAPI ? 'Testing...' : 'Test API'}\n          </button>\n\n          <button\n            onClick={autoMode ? stopAutoMode : startAutoMode}\n            className={`${\n              autoMode ? 'bg-red-600' : 'bg-green-600'\n            } hover:opacity-90 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2`}\n          >\n            {autoMode ? (\n              <>\n                <Pause className=\"w-4 h-4\" />\n                Stop Auto\n              </>\n            ) : (\n              <>\n                <Play className=\"w-4 h-4\" />\n                Start Auto\n              </>\n            )}\n          </button>\n          \n          <button\n            onClick={captureAndAnalyze}\n            disabled={isAnalyzing || autoMode}\n            className={`bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 ${\n              (isAnalyzing || autoMode) ? 'opacity-50 cursor-not-allowed' : ''\n            }`}\n          >\n            <Camera className=\"w-4 h-4\" />\n            Analyze\n          </button>\n        </div>\n      </div>\n\n      {debugInfo && (\n        <div className={`mt-4 p-4 rounded-lg ${\n          debugInfo.status === 'success' ? 'bg-green-900/20' : 'bg-red-900/20'\n        }`}>\n          <div className=\"flex justify-between items-start\">\n            <h3 className=\"text-white font-medium\">Debug Info</h3>\n            <span className=\"text-xs text-gray-400\">{debugInfo.timestamp}</span>\n          </div>\n          <pre className=\"mt-2 text-sm font-mono whitespace-pre-wrap text-gray-200\">\n            {debugInfo.message}\n          </pre>\n        </div>\n      )}\n\n      <SpeechHandler \n        text={speechText}\n        onSpeechEnd={() => Logger.info('Speech synthesis completed')}\n      />\n    </div>\n  );\n});\nCameraFeed.displayName = 'CameraFeed';\n\nexport default CameraFeed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}