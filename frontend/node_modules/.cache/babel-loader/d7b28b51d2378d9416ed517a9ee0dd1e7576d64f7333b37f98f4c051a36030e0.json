{"ast":null,"code":"// backend/src/services/projectService.js\nconst {\n  supabase\n} = require('../supabaseClient');\nconst Logger = require('../utils/logger');\n\n/**\n * Get or create a user's project\n */\nconst getOrCreateProject = async (userId, projectId, projectName = null) => {\n  try {\n    Logger.info('Getting or creating project', {\n      userId,\n      projectId\n    });\n\n    // Check if project exists\n    const {\n      data,\n      error\n    } = await supabase.from('assembly_progress').select('*').eq('user_id', userId).eq('project_id', projectId).single();\n    if (error && error.code !== 'PGRST116') {\n      // PGRST116 = not found\n      Logger.error('Error fetching project', error);\n      throw error;\n    }\n\n    // If project exists, return it\n    if (data) {\n      Logger.info('Found existing project', {\n        projectId: data.project_id\n      });\n      return data;\n    }\n\n    // Create new project if it doesn't exist\n    const defaultName = projectName || `Drone Project ${new Date().toLocaleDateString()}`;\n    const {\n      data: newProject,\n      error: insertError\n    } = await supabase.from('assembly_progress').insert({\n      user_id: userId,\n      project_id: projectId,\n      project_name: defaultName,\n      current_step: 1,\n      components: [],\n      completed_steps: [],\n      last_interaction: new Date().toISOString()\n    }).select().single();\n    if (insertError) {\n      Logger.error('Error creating project', insertError);\n      throw insertError;\n    }\n    Logger.info('Created new project', {\n      projectId,\n      name: defaultName\n    });\n    return newProject;\n  } catch (error) {\n    Logger.error('Error in getOrCreateProject', error);\n    throw error;\n  }\n};\n\n/**\n * Get all projects for a user\n */\nconst getUserProjects = async userId => {\n  try {\n    Logger.info('Getting projects for user', {\n      userId\n    });\n    const {\n      data,\n      error\n    } = await supabase.from('assembly_progress').select('*').eq('user_id', userId).order('last_interaction', {\n      ascending: false\n    });\n    if (error) {\n      Logger.error('Error fetching user projects', error);\n      throw error;\n    }\n    return data || [];\n  } catch (error) {\n    Logger.error('Error in getUserProjects', error);\n    throw error;\n  }\n};\n\n/**\n * Update project components\n */\nconst updateComponents = async (userId, projectId, components) => {\n  try {\n    Logger.info('Updating project components', {\n      userId,\n      projectId\n    });\n    const {\n      data,\n      error\n    } = await supabase.from('assembly_progress').update({\n      components: components,\n      last_interaction: new Date().toISOString()\n    }).eq('user_id', userId).eq('project_id', projectId).select().single();\n    if (error) {\n      Logger.error('Error updating components', error);\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    Logger.error('Error in updateComponents', error);\n    throw error;\n  }\n};\n\n/**\n * Add a completed step to the project\n */\nconst addCompletedStep = async (userId, projectId, step) => {\n  try {\n    Logger.info('Adding completed step', {\n      userId,\n      projectId,\n      step\n    });\n\n    // First get current completed steps\n    const {\n      data: currentData,\n      error: fetchError\n    } = await supabase.from('assembly_progress').select('completed_steps').eq('user_id', userId).eq('project_id', projectId).single();\n    if (fetchError) {\n      Logger.error('Error fetching current steps', fetchError);\n      throw fetchError;\n    }\n\n    // Append new step to existing steps\n    const completedSteps = [...(currentData.completed_steps || []), step];\n\n    // Update the record\n    const {\n      data,\n      error\n    } = await supabase.from('assembly_progress').update({\n      completed_steps: completedSteps,\n      current_step: step.stepNumber + 1,\n      // Increment current step\n      last_interaction: new Date().toISOString()\n    }).eq('user_id', userId).eq('project_id', projectId).select().single();\n    if (error) {\n      Logger.error('Error updating completed steps', error);\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    Logger.error('Error in addCompletedStep', error);\n    throw error;\n  }\n};\n\n/**\n * Update drone type for the project\n */\nconst updateDroneType = async (userId, projectId, droneType) => {\n  try {\n    Logger.info('Updating drone type', {\n      userId,\n      projectId,\n      droneType\n    });\n    const {\n      data,\n      error\n    } = await supabase.from('assembly_progress').update({\n      drone_type: droneType,\n      last_interaction: new Date().toISOString()\n    }).eq('user_id', userId).eq('project_id', projectId).select().single();\n    if (error) {\n      Logger.error('Error updating drone type', error);\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    Logger.error('Error in updateDroneType', error);\n    throw error;\n  }\n};\n\n/**\n * Get project context for Gemini API\n * Collects all relevant information to provide context for AI\n */\nconst getProjectContext = async (userId, projectId) => {\n  try {\n    Logger.info('Getting project context', {\n      userId,\n      projectId\n    });\n    const {\n      data,\n      error\n    } = await supabase.from('assembly_progress').select('*').eq('user_id', userId).eq('project_id', projectId).single();\n    if (error) {\n      Logger.error('Error fetching project context', error);\n      throw error;\n    }\n    return {\n      projectId: data.project_id,\n      projectName: data.project_name,\n      currentStep: data.current_step,\n      components: data.components || [],\n      completedSteps: data.completed_steps || [],\n      droneType: data.drone_type,\n      lastInteraction: data.last_interaction\n    };\n  } catch (error) {\n    Logger.error('Error in getProjectContext', error);\n    throw error;\n  }\n};\nmodule.exports = {\n  getOrCreateProject,\n  getUserProjects,\n  updateComponents,\n  addCompletedStep,\n  updateDroneType,\n  getProjectContext\n};","map":{"version":3,"names":["supabase","require","Logger","getOrCreateProject","userId","projectId","projectName","info","data","error","from","select","eq","single","code","project_id","defaultName","Date","toLocaleDateString","newProject","insertError","insert","user_id","project_name","current_step","components","completed_steps","last_interaction","toISOString","name","getUserProjects","order","ascending","updateComponents","update","addCompletedStep","step","currentData","fetchError","completedSteps","stepNumber","updateDroneType","droneType","drone_type","getProjectContext","currentStep","lastInteraction","module","exports"],"sources":["/Users/manmohan/drone-assembly-ai/frontend/src/components/ProjectManager.js"],"sourcesContent":["// backend/src/services/projectService.js\nconst { supabase } = require('../supabaseClient');\nconst Logger = require('../utils/logger');\n\n/**\n * Get or create a user's project\n */\nconst getOrCreateProject = async (userId, projectId, projectName = null) => {\n  try {\n    Logger.info('Getting or creating project', { userId, projectId });\n    \n    // Check if project exists\n    const { data, error } = await supabase\n      .from('assembly_progress')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('project_id', projectId)\n      .single();\n    \n    if (error && error.code !== 'PGRST116') { // PGRST116 = not found\n      Logger.error('Error fetching project', error);\n      throw error;\n    }\n    \n    // If project exists, return it\n    if (data) {\n      Logger.info('Found existing project', { projectId: data.project_id });\n      return data;\n    }\n    \n    // Create new project if it doesn't exist\n    const defaultName = projectName || `Drone Project ${new Date().toLocaleDateString()}`;\n    const { data: newProject, error: insertError } = await supabase\n      .from('assembly_progress')\n      .insert({\n        user_id: userId,\n        project_id: projectId,\n        project_name: defaultName,\n        current_step: 1,\n        components: [],\n        completed_steps: [],\n        last_interaction: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (insertError) {\n      Logger.error('Error creating project', insertError);\n      throw insertError;\n    }\n    \n    Logger.info('Created new project', { projectId, name: defaultName });\n    return newProject;\n  } catch (error) {\n    Logger.error('Error in getOrCreateProject', error);\n    throw error;\n  }\n};\n\n/**\n * Get all projects for a user\n */\nconst getUserProjects = async (userId) => {\n  try {\n    Logger.info('Getting projects for user', { userId });\n    \n    const { data, error } = await supabase\n      .from('assembly_progress')\n      .select('*')\n      .eq('user_id', userId)\n      .order('last_interaction', { ascending: false });\n    \n    if (error) {\n      Logger.error('Error fetching user projects', error);\n      throw error;\n    }\n    \n    return data || [];\n  } catch (error) {\n    Logger.error('Error in getUserProjects', error);\n    throw error;\n  }\n};\n\n/**\n * Update project components\n */\nconst updateComponents = async (userId, projectId, components) => {\n  try {\n    Logger.info('Updating project components', { userId, projectId });\n    \n    const { data, error } = await supabase\n      .from('assembly_progress')\n      .update({ \n        components: components,\n        last_interaction: new Date().toISOString()\n      })\n      .eq('user_id', userId)\n      .eq('project_id', projectId)\n      .select()\n      .single();\n    \n    if (error) {\n      Logger.error('Error updating components', error);\n      throw error;\n    }\n    \n    return data;\n  } catch (error) {\n    Logger.error('Error in updateComponents', error);\n    throw error;\n  }\n};\n\n/**\n * Add a completed step to the project\n */\nconst addCompletedStep = async (userId, projectId, step) => {\n  try {\n    Logger.info('Adding completed step', { userId, projectId, step });\n    \n    // First get current completed steps\n    const { data: currentData, error: fetchError } = await supabase\n      .from('assembly_progress')\n      .select('completed_steps')\n      .eq('user_id', userId)\n      .eq('project_id', projectId)\n      .single();\n    \n    if (fetchError) {\n      Logger.error('Error fetching current steps', fetchError);\n      throw fetchError;\n    }\n    \n    // Append new step to existing steps\n    const completedSteps = [...(currentData.completed_steps || []), step];\n    \n    // Update the record\n    const { data, error } = await supabase\n      .from('assembly_progress')\n      .update({ \n        completed_steps: completedSteps,\n        current_step: step.stepNumber + 1, // Increment current step\n        last_interaction: new Date().toISOString()\n      })\n      .eq('user_id', userId)\n      .eq('project_id', projectId)\n      .select()\n      .single();\n    \n    if (error) {\n      Logger.error('Error updating completed steps', error);\n      throw error;\n    }\n    \n    return data;\n  } catch (error) {\n    Logger.error('Error in addCompletedStep', error);\n    throw error;\n  }\n};\n\n/**\n * Update drone type for the project\n */\nconst updateDroneType = async (userId, projectId, droneType) => {\n  try {\n    Logger.info('Updating drone type', { userId, projectId, droneType });\n    \n    const { data, error } = await supabase\n      .from('assembly_progress')\n      .update({ \n        drone_type: droneType,\n        last_interaction: new Date().toISOString()\n      })\n      .eq('user_id', userId)\n      .eq('project_id', projectId)\n      .select()\n      .single();\n    \n    if (error) {\n      Logger.error('Error updating drone type', error);\n      throw error;\n    }\n    \n    return data;\n  } catch (error) {\n    Logger.error('Error in updateDroneType', error);\n    throw error;\n  }\n};\n\n/**\n * Get project context for Gemini API\n * Collects all relevant information to provide context for AI\n */\nconst getProjectContext = async (userId, projectId) => {\n  try {\n    Logger.info('Getting project context', { userId, projectId });\n    \n    const { data, error } = await supabase\n      .from('assembly_progress')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('project_id', projectId)\n      .single();\n    \n    if (error) {\n      Logger.error('Error fetching project context', error);\n      throw error;\n    }\n    \n    return {\n      projectId: data.project_id,\n      projectName: data.project_name,\n      currentStep: data.current_step,\n      components: data.components || [],\n      completedSteps: data.completed_steps || [],\n      droneType: data.drone_type,\n      lastInteraction: data.last_interaction\n    };\n  } catch (error) {\n    Logger.error('Error in getProjectContext', error);\n    throw error;\n  }\n};\n\nmodule.exports = {\n  getOrCreateProject,\n  getUserProjects,\n  updateComponents,\n  addCompletedStep,\n  updateDroneType,\n  getProjectContext\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}