{"ast":null,"code":"// frontend/src/utils/userIdentification.js\nimport Logger from './logger';\nconst USER_ID_KEY = 'drone_assembly_user_id';\nconst PROJECT_ID_KEY = 'drone_assembly_project_id';\n\n/**\n * Generates a unique identifier combining machine info and timestamp\n * Simple device fingerprinting without extensive tracking\n */\nconst generateUniqueId = () => {\n  const timestamp = Date.now().toString(36);\n  const randomStr = Math.random().toString(36).substring(2, 10);\n\n  // Collect basic browser info for fingerprinting\n  const browserInfo = [navigator.userAgent, navigator.language, screen.width, screen.height, new Date().getTimezoneOffset()].join('|');\n\n  // Create a hash-like string from browser info\n  let hash = 0;\n  for (let i = 0; i < browserInfo.length; i++) {\n    hash = (hash << 5) - hash + browserInfo.charCodeAt(i);\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  const browserHash = Math.abs(hash).toString(36);\n  return `${browserHash}-${timestamp}-${randomStr}`;\n};\n\n/**\n * Generates a new project ID \n */\nconst generateProjectId = () => {\n  const timestamp = Date.now().toString(36);\n  const randomStr = Math.random().toString(36).substring(2, 6);\n  return `proj-${timestamp}-${randomStr}`;\n};\n\n/**\n * Gets or creates a user ID for the current user\n */\nconst getUserId = () => {\n  let userId = localStorage.getItem(USER_ID_KEY);\n  if (!userId) {\n    userId = generateUniqueId();\n    localStorage.setItem(USER_ID_KEY, userId);\n    Logger.info('Created new user ID', {\n      userId\n    });\n  }\n  return userId;\n};\n\n/**\n * Gets the current project ID or creates a new one\n */\nconst getProjectId = () => {\n  let projectId = localStorage.getItem(PROJECT_ID_KEY);\n  if (!projectId) {\n    projectId = generateProjectId();\n    localStorage.setItem(PROJECT_ID_KEY, projectId);\n    Logger.info('Created new project ID', {\n      projectId\n    });\n  }\n  return projectId;\n};\n\n/**\n * Sets the current active project\n */\nconst setActiveProject = projectId => {\n  localStorage.setItem(PROJECT_ID_KEY, projectId);\n  Logger.info('Set active project', {\n    projectId\n  });\n};\n\n/**\n * Clears the current project (to start a new one)\n */\nconst clearCurrentProject = () => {\n  localStorage.removeItem(PROJECT_ID_KEY);\n  Logger.info('Cleared current project');\n};\nexport { getUserId, getProjectId, setActiveProject, clearCurrentProject, generateProjectId };","map":{"version":3,"names":["Logger","USER_ID_KEY","PROJECT_ID_KEY","generateUniqueId","timestamp","Date","now","toString","randomStr","Math","random","substring","browserInfo","navigator","userAgent","language","screen","width","height","getTimezoneOffset","join","hash","i","length","charCodeAt","browserHash","abs","generateProjectId","getUserId","userId","localStorage","getItem","setItem","info","getProjectId","projectId","setActiveProject","clearCurrentProject","removeItem"],"sources":["/Users/manmohan/drone-assembly-ai/frontend/src/utils/userIdentification.js"],"sourcesContent":["// frontend/src/utils/userIdentification.js\nimport Logger from './logger';\n\nconst USER_ID_KEY = 'drone_assembly_user_id';\nconst PROJECT_ID_KEY = 'drone_assembly_project_id';\n\n/**\n * Generates a unique identifier combining machine info and timestamp\n * Simple device fingerprinting without extensive tracking\n */\nconst generateUniqueId = () => {\n  const timestamp = Date.now().toString(36);\n  const randomStr = Math.random().toString(36).substring(2, 10);\n  \n  // Collect basic browser info for fingerprinting\n  const browserInfo = [\n    navigator.userAgent,\n    navigator.language,\n    screen.width,\n    screen.height,\n    new Date().getTimezoneOffset()\n  ].join('|');\n  \n  // Create a hash-like string from browser info\n  let hash = 0;\n  for (let i = 0; i < browserInfo.length; i++) {\n    hash = ((hash << 5) - hash) + browserInfo.charCodeAt(i);\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  const browserHash = Math.abs(hash).toString(36);\n  \n  return `${browserHash}-${timestamp}-${randomStr}`;\n};\n\n/**\n * Generates a new project ID \n */\nconst generateProjectId = () => {\n  const timestamp = Date.now().toString(36);\n  const randomStr = Math.random().toString(36).substring(2, 6);\n  return `proj-${timestamp}-${randomStr}`;\n};\n\n/**\n * Gets or creates a user ID for the current user\n */\nconst getUserId = () => {\n  let userId = localStorage.getItem(USER_ID_KEY);\n  \n  if (!userId) {\n    userId = generateUniqueId();\n    localStorage.setItem(USER_ID_KEY, userId);\n    Logger.info('Created new user ID', { userId });\n  }\n  \n  return userId;\n};\n\n/**\n * Gets the current project ID or creates a new one\n */\nconst getProjectId = () => {\n  let projectId = localStorage.getItem(PROJECT_ID_KEY);\n  \n  if (!projectId) {\n    projectId = generateProjectId();\n    localStorage.setItem(PROJECT_ID_KEY, projectId);\n    Logger.info('Created new project ID', { projectId });\n  }\n  \n  return projectId;\n};\n\n/**\n * Sets the current active project\n */\nconst setActiveProject = (projectId) => {\n  localStorage.setItem(PROJECT_ID_KEY, projectId);\n  Logger.info('Set active project', { projectId });\n};\n\n/**\n * Clears the current project (to start a new one)\n */\nconst clearCurrentProject = () => {\n  localStorage.removeItem(PROJECT_ID_KEY);\n  Logger.info('Cleared current project');\n};\n\nexport {\n  getUserId,\n  getProjectId,\n  setActiveProject,\n  clearCurrentProject,\n  generateProjectId\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}