{"ast":null,"code":"// frontend/src/utils/userIdentification.js\nimport Logger from './logger';\n\n// Assuming this file already exists, add or modify these functions\nconst USER_ID_KEY = 'drone_assembly_user_id';\nconst PROJECT_ID_KEY = 'drone_assembly_project_id';\nconst PROJECT_CACHE_PREFIX = 'drone_project_';\n\n// Generate a unique user ID if none exists\nexport const getUserId = () => {\n  let userId = localStorage.getItem(USER_ID_KEY);\n  if (!userId) {\n    userId = `user_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    localStorage.setItem(USER_ID_KEY, userId);\n  }\n  return userId;\n};\n\n// Get current project ID\nexport const getProjectId = () => {\n  return localStorage.getItem(PROJECT_ID_KEY);\n};\n\n// Set active project with proper cache clearing\nexport const setActiveProject = projectId => {\n  const previousProjectId = getProjectId();\n\n  // If switching projects, clear previous project's cache\n  if (previousProjectId && previousProjectId !== projectId) {\n    clearProjectCache(previousProjectId);\n  }\n\n  // Set new project ID\n  localStorage.setItem(PROJECT_ID_KEY, projectId);\n\n  // Log project switch for debugging\n  console.log(`Switched projects: ${previousProjectId || 'none'} -> ${projectId}`);\n  return projectId;\n};\n\n// Generate a new project ID\nexport const generateProjectId = () => {\n  return `proj_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n};\n\n// Clear project-specific cache (components, steps, etc.)\nexport const clearProjectCache = projectId => {\n  if (!projectId) return;\n\n  // Clear any in-memory cache for this project\n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  localStorage.removeItem(cacheKey);\n\n  // Could add more specific cache clearing as needed\n  console.log(`Cleared cache for project: ${projectId}`);\n};\n\n// Cache project data (for offline or quick access)\nexport const cacheProjectData = (projectId, data) => {\n  if (!projectId || !data) return;\n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  localStorage.setItem(cacheKey, JSON.stringify(data));\n};\n\n// Get cached project data\nexport const getCachedProjectData = projectId => {\n  if (!projectId) return null;\n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  const cached = localStorage.getItem(cacheKey);\n  return cached ? JSON.parse(cached) : null;\n};\n\n// frontend/src/components/ProjectManager.js\n// Update handleSelectProject function to properly reset session\n\nconst handleSelectProject = async project => {\n  try {\n    var _data$context$compone;\n    Logger.info('Project selected', {\n      projectId: project.project_id,\n      name: project.project_name\n    });\n\n    // First, notify user we're loading\n    setIsLoading(true);\n\n    // Call API to get fresh project data to ensure we're up to date\n    const userId = getUserId();\n    const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${project.project_id}/context`);\n    if (!response.ok) {\n      throw new Error(`Failed to load project: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (!data.success) {\n      throw new Error(data.error || 'Failed to load project');\n    }\n\n    // Now set the active project with full session reset\n    setActiveProject(project.project_id);\n\n    // Update project cache with fresh data\n    cacheProjectData(project.project_id, data.context);\n\n    // Call the parent callback\n    if (onProjectSelect) {\n      onProjectSelect(project);\n    }\n\n    // Log for debugging\n    Logger.info('Project switch completed', {\n      projectId: project.project_id,\n      componentCount: ((_data$context$compone = data.context.components) === null || _data$context$compone === void 0 ? void 0 : _data$context$compone.length) || 0\n    });\n  } catch (error) {\n    Logger.error('Error selecting project', error);\n    setError('Failed to select project. Please try again.');\n  } finally {\n    setIsLoading(false);\n  }\n};\n\n// frontend/src/contexts/ProjectContext.js\n// Update to handle project switching properly\n\n// Add this to the ProjectProvider component\n// This useEffect watches for project ID changes\nuseEffect(() => {\n  // Set up a listener for project ID changes from other components\n  const handleStorageChange = e => {\n    if (e.key === PROJECT_ID_KEY) {\n      var _currentProject;\n      const newProjectId = e.newValue;\n      const oldProjectId = (_currentProject = currentProject) === null || _currentProject === void 0 ? void 0 : _currentProject.project_id;\n      if (newProjectId !== oldProjectId) {\n        Logger.info('Project ID changed in storage', {\n          from: oldProjectId,\n          to: newProjectId\n        });\n\n        // Reset current state\n        setCurrentProject(null);\n        setComponents([]);\n        setCompletedSteps([]);\n\n        // Load the new project\n        loadActiveProject();\n      }\n    }\n  };\n\n  // Listen for storage events (for multi-tab support)\n  window.addEventListener('storage', handleStorageChange);\n  return () => {\n    window.removeEventListener('storage', handleStorageChange);\n  };\n}, [currentProject]);\n// Completing the loadActiveProject function in ProjectContext.js\n\nconst loadActiveProject = async () => {\n  try {\n    setIsLoading(true);\n    setError(null);\n    const userId = getUserId();\n    const projectId = getProjectId();\n    if (!projectId) {\n      // No active project, so we're done loading\n      setIsLoading(false);\n      setCurrentProject(null);\n      setComponents([]);\n      setCompletedSteps([]);\n      return;\n    }\n    Logger.info('Loading active project', {\n      userId,\n      projectId\n    });\n\n    // Try to get from cache first for immediate display\n    const cachedData = getCachedProjectData(projectId);\n    if (cachedData) {\n      // Use cached data temporarily while we load fresh data\n      setCurrentProject({\n        project_id: cachedData.projectId,\n        project_name: cachedData.projectName,\n        drone_type: cachedData.droneType,\n        current_step: cachedData.currentStep,\n        components: cachedData.components || [],\n        completed_steps: cachedData.completedSteps || [],\n        last_interaction: cachedData.lastInteraction\n      });\n      setComponents(cachedData.components || []);\n      setCompletedSteps(cachedData.completedSteps || []);\n    }\n\n    // Always load fresh data from server\n    const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n    if (!response.ok) {\n      throw new Error(`Failed to load project: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data.success) {\n      // Set current project with fresh data\n      const {\n        context\n      } = data;\n      const projectData = {\n        project_id: context.projectId,\n        project_name: context.projectName,\n        drone_type: context.droneType,\n        current_step: context.currentStep,\n        components: context.components || [],\n        completed_steps: context.completedSteps || [],\n        last_interaction: context.lastInteraction\n      };\n      setCurrentProject(projectData);\n      setComponents(context.components || []);\n      setCompletedSteps(context.completedSteps || []);\n\n      // Update cache with fresh data\n      cacheProjectData(projectId, context);\n      Logger.info('Project loaded successfully', {\n        projectId,\n        name: context.projectName,\n        componentCount: (context.components || []).length\n      });\n    } else {\n      throw new Error(data.error || 'Failed to load project');\n    }\n  } catch (error) {\n    Logger.error('Error loading project', error);\n    setError('Failed to load your project. Please try again.');\n\n    // Clear the current project on error to prevent stale data\n    setCurrentProject(null);\n    setComponents([]);\n    setCompletedSteps([]);\n  } finally {\n    setIsLoading(false);\n  }\n};\n\n// Update the addComponents function to properly merge components\nconst addComponents = async newComponents => {\n  try {\n    if (!currentProject || !newComponents || !newComponents.length) {\n      Logger.warn('Cannot add components - missing project or components', {\n        hasProject: !!currentProject,\n        componentCount: (newComponents === null || newComponents === void 0 ? void 0 : newComponents.length) || 0\n      });\n      return;\n    }\n    const userId = getUserId();\n    const projectId = currentProject.project_id;\n    Logger.info('Adding new components', {\n      projectId,\n      newComponentCount: newComponents.length,\n      currentComponentCount: components.length\n    });\n\n    // Merge with existing components (avoiding duplicates)\n    // Normalize existing components first\n    const normalizedExisting = components.map(comp => {\n      if (typeof comp === 'string') {\n        return {\n          name: comp\n        };\n      }\n      return comp;\n    });\n\n    // Normalize new components\n    const normalizedNew = newComponents.map(comp => {\n      if (typeof comp === 'string') {\n        return {\n          name: comp\n        };\n      }\n      return comp;\n    });\n\n    // Find truly new components (not already present)\n    const allComponents = [...normalizedExisting];\n    let newComponentsAdded = 0;\n    normalizedNew.forEach(newComp => {\n      // Skip if no name property\n      if (!newComp.name) return;\n\n      // Check if component already exists (case-insensitive)\n      const exists = normalizedExisting.some(existing => existing.name && newComp.name && existing.name.toLowerCase() === newComp.name.toLowerCase());\n      if (!exists) {\n        allComponents.push(newComp);\n        newComponentsAdded++;\n      }\n    });\n\n    // Skip API call if no new components were added\n    if (newComponentsAdded === 0) {\n      Logger.info('No new components to add - skipping update');\n      return components;\n    }\n\n    // Update local state first for UI responsiveness\n    setComponents(allComponents);\n\n    // Log details of what we're about to send\n    Logger.componentUpdate(allComponents, 'addComponents');\n\n    // Send to server\n    Logger.info('Updating project components', {\n      projectId,\n      componentCount: allComponents.length,\n      newlyAdded: newComponentsAdded\n    });\n    const response = await fetch(`http://localhost:5003/api/assembly/project/components`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        projectId,\n        components: allComponents\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to update components: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (!data.success) {\n      throw new Error(data.error || 'Failed to update components');\n    }\n\n    // Update the current project with the response data\n    setCurrentProject({\n      ...currentProject,\n      components: allComponents\n    });\n\n    // Update the cache with new component data\n    const cachedData = getCachedProjectData(projectId);\n    if (cachedData) {\n      cachedData.components = allComponents;\n      cacheProjectData(projectId, cachedData);\n    }\n    Logger.info('Components updated successfully', {\n      projectId,\n      componentCount: allComponents.length,\n      newComponentsAdded\n    });\n    return allComponents;\n  } catch (error) {\n    Logger.error('Error updating components', error);\n    setError('Failed to update components. Please try again.');\n    // Revert to the original state\n    setComponents(components);\n    return null;\n  }\n};","map":{"version":3,"names":["Logger","USER_ID_KEY","PROJECT_ID_KEY","PROJECT_CACHE_PREFIX","getUserId","userId","localStorage","getItem","Date","now","Math","random","toString","substring","setItem","getProjectId","setActiveProject","projectId","previousProjectId","clearProjectCache","console","log","generateProjectId","cacheKey","removeItem","cacheProjectData","data","JSON","stringify","getCachedProjectData","cached","parse","handleSelectProject","project","_data$context$compone","info","project_id","name","project_name","setIsLoading","response","fetch","ok","Error","statusText","json","success","error","context","onProjectSelect","componentCount","components","length","setError","useEffect","handleStorageChange","e","key","_currentProject","newProjectId","newValue","oldProjectId","currentProject","from","to","setCurrentProject","setComponents","setCompletedSteps","loadActiveProject","window","addEventListener","removeEventListener","cachedData","projectName","drone_type","droneType","current_step","currentStep","completed_steps","completedSteps","last_interaction","lastInteraction","projectData","addComponents","newComponents","warn","hasProject","newComponentCount","currentComponentCount","normalizedExisting","map","comp","normalizedNew","allComponents","newComponentsAdded","forEach","newComp","exists","some","existing","toLowerCase","push","componentUpdate","newlyAdded","method","headers","body"],"sources":["/Users/manmohan/drone-assembly-ai/frontend/src/utils/userIdentification.js"],"sourcesContent":["// frontend/src/utils/userIdentification.js\nimport Logger from './logger';\n\n// Assuming this file already exists, add or modify these functions\nconst USER_ID_KEY = 'drone_assembly_user_id';\nconst PROJECT_ID_KEY = 'drone_assembly_project_id';\nconst PROJECT_CACHE_PREFIX = 'drone_project_';\n\n// Generate a unique user ID if none exists\nexport const getUserId = () => {\n  let userId = localStorage.getItem(USER_ID_KEY);\n  \n  if (!userId) {\n    userId = `user_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    localStorage.setItem(USER_ID_KEY, userId);\n  }\n  \n  return userId;\n};\n\n// Get current project ID\nexport const getProjectId = () => {\n  return localStorage.getItem(PROJECT_ID_KEY);\n};\n\n// Set active project with proper cache clearing\nexport const setActiveProject = (projectId) => {\n  const previousProjectId = getProjectId();\n  \n  // If switching projects, clear previous project's cache\n  if (previousProjectId && previousProjectId !== projectId) {\n    clearProjectCache(previousProjectId);\n  }\n  \n  // Set new project ID\n  localStorage.setItem(PROJECT_ID_KEY, projectId);\n  \n  // Log project switch for debugging\n  console.log(`Switched projects: ${previousProjectId || 'none'} -> ${projectId}`);\n  \n  return projectId;\n};\n\n// Generate a new project ID\nexport const generateProjectId = () => {\n  return `proj_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n};\n\n// Clear project-specific cache (components, steps, etc.)\nexport const clearProjectCache = (projectId) => {\n  if (!projectId) return;\n  \n  // Clear any in-memory cache for this project\n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  localStorage.removeItem(cacheKey);\n  \n  // Could add more specific cache clearing as needed\n  console.log(`Cleared cache for project: ${projectId}`);\n};\n\n// Cache project data (for offline or quick access)\nexport const cacheProjectData = (projectId, data) => {\n  if (!projectId || !data) return;\n  \n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  localStorage.setItem(cacheKey, JSON.stringify(data));\n};\n\n// Get cached project data\nexport const getCachedProjectData = (projectId) => {\n  if (!projectId) return null;\n  \n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  const cached = localStorage.getItem(cacheKey);\n  \n  return cached ? JSON.parse(cached) : null;\n};\n\n// frontend/src/components/ProjectManager.js\n// Update handleSelectProject function to properly reset session\n\nconst handleSelectProject = async (project) => {\n  try {\n    Logger.info('Project selected', { \n      projectId: project.project_id, \n      name: project.project_name \n    });\n    \n    // First, notify user we're loading\n    setIsLoading(true);\n    \n    // Call API to get fresh project data to ensure we're up to date\n    const userId = getUserId();\n    const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${project.project_id}/context`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to load project: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    \n    if (!data.success) {\n      throw new Error(data.error || 'Failed to load project');\n    }\n    \n    // Now set the active project with full session reset\n    setActiveProject(project.project_id);\n    \n    // Update project cache with fresh data\n    cacheProjectData(project.project_id, data.context);\n    \n    // Call the parent callback\n    if (onProjectSelect) {\n      onProjectSelect(project);\n    }\n    \n    // Log for debugging\n    Logger.info('Project switch completed', {\n      projectId: project.project_id,\n      componentCount: data.context.components?.length || 0\n    });\n  } catch (error) {\n    Logger.error('Error selecting project', error);\n    setError('Failed to select project. Please try again.');\n  } finally {\n    setIsLoading(false);\n  }\n};\n\n// frontend/src/contexts/ProjectContext.js\n// Update to handle project switching properly\n\n// Add this to the ProjectProvider component\n// This useEffect watches for project ID changes\nuseEffect(() => {\n  // Set up a listener for project ID changes from other components\n  const handleStorageChange = (e) => {\n    if (e.key === PROJECT_ID_KEY) {\n      const newProjectId = e.newValue;\n      const oldProjectId = currentProject?.project_id;\n      \n      if (newProjectId !== oldProjectId) {\n        Logger.info('Project ID changed in storage', {\n          from: oldProjectId,\n          to: newProjectId\n        });\n        \n        // Reset current state\n        setCurrentProject(null);\n        setComponents([]);\n        setCompletedSteps([]);\n        \n        // Load the new project\n        loadActiveProject();\n      }\n    }\n  };\n  \n  // Listen for storage events (for multi-tab support)\n  window.addEventListener('storage', handleStorageChange);\n  \n  return () => {\n    window.removeEventListener('storage', handleStorageChange);\n  };\n}, [currentProject]);\n// Completing the loadActiveProject function in ProjectContext.js\n\nconst loadActiveProject = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const userId = getUserId();\n      const projectId = getProjectId();\n      \n      if (!projectId) {\n        // No active project, so we're done loading\n        setIsLoading(false);\n        setCurrentProject(null);\n        setComponents([]);\n        setCompletedSteps([]);\n        return;\n      }\n      \n      Logger.info('Loading active project', { userId, projectId });\n      \n      // Try to get from cache first for immediate display\n      const cachedData = getCachedProjectData(projectId);\n      if (cachedData) {\n        // Use cached data temporarily while we load fresh data\n        setCurrentProject({\n          project_id: cachedData.projectId,\n          project_name: cachedData.projectName,\n          drone_type: cachedData.droneType,\n          current_step: cachedData.currentStep,\n          components: cachedData.components || [],\n          completed_steps: cachedData.completedSteps || [],\n          last_interaction: cachedData.lastInteraction\n        });\n        setComponents(cachedData.components || []);\n        setCompletedSteps(cachedData.completedSteps || []);\n      }\n      \n      // Always load fresh data from server\n      const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load project: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        // Set current project with fresh data\n        const { context } = data;\n        \n        const projectData = {\n          project_id: context.projectId,\n          project_name: context.projectName,\n          drone_type: context.droneType,\n          current_step: context.currentStep,\n          components: context.components || [],\n          completed_steps: context.completedSteps || [],\n          last_interaction: context.lastInteraction\n        };\n        \n        setCurrentProject(projectData);\n        setComponents(context.components || []);\n        setCompletedSteps(context.completedSteps || []);\n        \n        // Update cache with fresh data\n        cacheProjectData(projectId, context);\n        \n        Logger.info('Project loaded successfully', { \n          projectId, \n          name: context.projectName,\n          componentCount: (context.components || []).length\n        });\n      } else {\n        throw new Error(data.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('Error loading project', error);\n      setError('Failed to load your project. Please try again.');\n      \n      // Clear the current project on error to prevent stale data\n      setCurrentProject(null);\n      setComponents([]);\n      setCompletedSteps([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Update the addComponents function to properly merge components\n  const addComponents = async (newComponents) => {\n    try {\n      if (!currentProject || !newComponents || !newComponents.length) {\n        Logger.warn('Cannot add components - missing project or components', {\n          hasProject: !!currentProject,\n          componentCount: newComponents?.length || 0\n        });\n        return;\n      }\n      \n      const userId = getUserId();\n      const projectId = currentProject.project_id;\n      \n      Logger.info('Adding new components', {\n        projectId,\n        newComponentCount: newComponents.length,\n        currentComponentCount: components.length\n      });\n      \n      // Merge with existing components (avoiding duplicates)\n      // Normalize existing components first\n      const normalizedExisting = components.map(comp => {\n        if (typeof comp === 'string') {\n          return { name: comp };\n        }\n        return comp;\n      });\n      \n      // Normalize new components\n      const normalizedNew = newComponents.map(comp => {\n        if (typeof comp === 'string') {\n          return { name: comp };\n        }\n        return comp;\n      });\n      \n      // Find truly new components (not already present)\n      const allComponents = [...normalizedExisting];\n      let newComponentsAdded = 0;\n      \n      normalizedNew.forEach(newComp => {\n        // Skip if no name property\n        if (!newComp.name) return;\n        \n        // Check if component already exists (case-insensitive)\n        const exists = normalizedExisting.some(existing => \n          existing.name && \n          newComp.name && \n          existing.name.toLowerCase() === newComp.name.toLowerCase()\n        );\n        \n        if (!exists) {\n          allComponents.push(newComp);\n          newComponentsAdded++;\n        }\n      });\n      \n      // Skip API call if no new components were added\n      if (newComponentsAdded === 0) {\n        Logger.info('No new components to add - skipping update');\n        return components;\n      }\n      \n      // Update local state first for UI responsiveness\n      setComponents(allComponents);\n      \n      // Log details of what we're about to send\n      Logger.componentUpdate(allComponents, 'addComponents');\n      \n      // Send to server\n      Logger.info('Updating project components', { \n        projectId,\n        componentCount: allComponents.length,\n        newlyAdded: newComponentsAdded\n      });\n      \n      const response = await fetch(`http://localhost:5003/api/assembly/project/components`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId,\n          components: allComponents\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to update components: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.error || 'Failed to update components');\n      }\n      \n      // Update the current project with the response data\n      setCurrentProject({\n        ...currentProject,\n        components: allComponents\n      });\n      \n      // Update the cache with new component data\n      const cachedData = getCachedProjectData(projectId);\n      if (cachedData) {\n        cachedData.components = allComponents;\n        cacheProjectData(projectId, cachedData);\n      }\n      \n      Logger.info('Components updated successfully', {\n        projectId,\n        componentCount: allComponents.length,\n        newComponentsAdded\n      });\n      \n      return allComponents;\n    } catch (error) {\n      Logger.error('Error updating components', error);\n      setError('Failed to update components. Please try again.');\n      // Revert to the original state\n      setComponents(components);\n      return null;\n    }\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}