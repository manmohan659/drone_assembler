{"ast":null,"code":"var _jsxFileName = \"/Users/manmohan/Documents/drone_assembler/frontend/src/components/MainInterface.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/MainInterface.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Clock, MessageSquare, Folder, ArrowLeftRight } from 'lucide-react';\nimport CameraFeed from './CameraFeed';\nimport InstructionPanel from './InstructionPanel';\nimport VisualizationPanel from './VisualizationPanel';\nimport VoiceInput from './VoiceInput';\nimport ProjectManager from './ProjectManager';\nimport NewUserOnboarding from './NewUserOnboarding';\nimport Logger from '../utils/logger';\nimport { processGeminiResponse } from '../utils/speechUtils';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport { useProject } from '../contexts/ProjectContext';\nimport GeneratedImagePanel from './GeneratedImagePanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainInterface = () => {\n  _s();\n  const [analysisResult, setAnalysisResult] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStatus, setProcessingStatus] = useState(null);\n  const [showProjectManager, setShowProjectManager] = useState(false);\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const cameraFeedRef = useRef();\n  const [generatedImage, setGeneratedImage] = useState(null);\n  const [isGeneratingImage, setIsGeneratingImage] = useState(false);\n  const [imageGenerationError, setImageGenerationError] = useState(null);\n  const {\n    currentProject,\n    isLoading: projectLoading,\n    loadActiveProject,\n    setActiveProject,\n    addComponents,\n    addCompletedStep,\n    components // Add this line to fix the error\n  } = useProject();\n  useEffect(() => {\n    const projectId = getProjectId();\n    if (!projectId) {\n      setShowOnboarding(true);\n    }\n  }, []);\n  const currentStep = (currentProject === null || currentProject === void 0 ? void 0 : currentProject.current_step) || 1;\n  const isVisualizationRequest = transcript => {\n    // Expanded list of triggers for image generation/visualization\n    const visualizationTriggers = [/create.*image/i, /generate.*image/i, /show.*visual/i, /create.*visual/i, /visualize/i, /draw.*drone/i, /make.*picture/i, /create.*picture/i, /show.*what.*looks.*like/i, /picture.*of/i, /image.*of/i, /illustration.*of/i, /visualize.*the.*drone/i, /show.*me.*what/i, /show.*me.*a.*picture/i, /show.*me.*an.*image/i, /can.*you.*draw/i, /can.*you.*show.*me/i, /generate.*a.*picture/i, /create.*a.*representation/i, /make.*an.*image/i];\n    const result = visualizationTriggers.some(trigger => trigger.test(transcript));\n    console.log(\"[DEBUG] Visualization request check:\", transcript, result);\n    return result;\n  };\n  const handleAnalysisComplete = result => {\n    var _result$analysis, _result$analysis2, _result$analysis5;\n    if (!result) {\n      setAnalysisResult(null);\n      setProcessingStatus(null);\n      return;\n    }\n    setAnalysisResult(result);\n    console.log(\"[DEBUG] Analysis result:\", result);\n    console.log(\"[DEBUG] Current project:\", currentProject);\n    console.log(\"[DEBUG] Current components:\", components);\n    Logger.info('Analysis completed', {\n      hasData: !!result,\n      hasAnalysis: !!(result !== null && result !== void 0 && result.analysis),\n      identifiedComponents: !!(result !== null && result !== void 0 && (_result$analysis = result.analysis) !== null && _result$analysis !== void 0 && _result$analysis.identifiedComponents),\n      identifiedParts: !!(result !== null && result !== void 0 && (_result$analysis2 = result.analysis) !== null && _result$analysis2 !== void 0 && _result$analysis2.identifiedParts),\n      timestamp: new Date().toISOString()\n    });\n    if (currentProject) {\n      var _result$analysis3, _result$analysis4;\n      let componentsToStore = [];\n\n      // Check in both locations the backend might put component data\n      if (result !== null && result !== void 0 && (_result$analysis3 = result.analysis) !== null && _result$analysis3 !== void 0 && _result$analysis3.identifiedComponents && Array.isArray(result.analysis.identifiedComponents)) {\n        componentsToStore = result.analysis.identifiedComponents;\n        console.log(\"[DEBUG] Found identifiedComponents:\", componentsToStore);\n      } else if (result !== null && result !== void 0 && (_result$analysis4 = result.analysis) !== null && _result$analysis4 !== void 0 && _result$analysis4.identifiedParts && Array.isArray(result.analysis.identifiedParts)) {\n        componentsToStore = result.analysis.identifiedParts;\n        console.log(\"[DEBUG] Found identifiedParts:\", componentsToStore);\n      } else {\n        // Debug the actual structure received to understand what's happening\n        console.log(\"[DEBUG] No identifiedComponents or identifiedParts arrays found in:\", result.analysis);\n      }\n\n      // Add special check for object structure\n      if (componentsToStore.length === 0 && typeof result.analysis === 'object') {\n        // Try to extract component data from other possible fields\n        const possibleFields = Object.keys(result.analysis).filter(key => Array.isArray(result.analysis[key]) && key.toLowerCase().includes('component'));\n        if (possibleFields.length > 0) {\n          console.log(\"[DEBUG] Found alternative component fields:\", possibleFields);\n          componentsToStore = result.analysis[possibleFields[0]];\n        }\n      }\n\n      // Enhanced validation of component data\n      if (componentsToStore.length > 0) {\n        // Filter out invalid components\n        const validComponents = componentsToStore.filter(comp => comp && (typeof comp === 'string' || typeof comp === 'object' && comp.name));\n        if (validComponents.length > 0) {\n          console.log(\"[DEBUG] Valid components to store:\", validComponents);\n          storeIdentifiedComponents(validComponents);\n        } else {\n          console.log(\"[DEBUG] No valid components after filtering:\", componentsToStore);\n        }\n      } else {\n        console.log(\"[DEBUG] No components to store found in result\");\n      }\n    } else {\n      console.log(\"[DEBUG] No current project available\");\n    }\n    if (result !== null && result !== void 0 && (_result$analysis5 = result.analysis) !== null && _result$analysis5 !== void 0 && _result$analysis5.canProceed) {\n      const stepInfo = {\n        stepNumber: currentStep,\n        title: `Step ${currentStep} completed`,\n        timestamp: new Date().toISOString(),\n        details: result.analysis.feedback || 'Step completed successfully'\n      };\n      addCompletedStep(stepInfo);\n    }\n  };\n  // Fixed storeIdentifiedComponents function for MainInterface.js\n  const storeIdentifiedComponents = async components => {\n    if (!components || !Array.isArray(components) || components.length === 0) {\n      console.log(\"[DEBUG] Invalid components to store:\", components);\n      return;\n    }\n    console.log(\"[DEBUG] Calling addComponents with:\", components);\n    try {\n      Logger.info('Storing identified components', {\n        count: components.length\n      });\n      const result = await addComponents(components); // Capture the return value\n      console.log(\"[DEBUG] addComponents returned:\", result);\n    } catch (error) {\n      Logger.error('Error storing components', error);\n      console.error(\"[DEBUG] Error in storeIdentifiedComponents:\", error);\n    }\n  };\n\n  // Updated image generation function with progress tracking\n  const generateStableDiffusionImage = async prompt => {\n    try {\n      var _cameraFeedRef$curren;\n      setIsGeneratingImage(true);\n      setImageGenerationError(null);\n      Logger.info('Starting image generation', {\n        prompt\n      });\n      console.log(\"[DEBUG] Image generation prompt:\", prompt);\n\n      // First check if the service is running\n      try {\n        const healthCheck = await fetch('http://localhost:9999', {\n          method: 'GET',\n          signal: AbortSignal.timeout(2000)\n        });\n        if (healthCheck.ok) {\n          console.log(\"[DEBUG] Image service is running\");\n        }\n      } catch (e) {\n        console.log(\"[DEBUG] Service health check failed, attempting to generate anyway\");\n      }\n\n      // Start the async image generation\n      const response = await fetch('http://localhost:9999/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: prompt,\n          userId: getUserId(),\n          projectId: getProjectId(),\n          async: true // Enable async processing\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to start image generation: ${response.status} ${response.statusText}`);\n      }\n\n      // Get the task info from the response\n      const taskInfo = await response.json();\n      console.log(\"[DEBUG] Image generation task started:\", taskInfo);\n      if (!taskInfo.task_id) {\n        throw new Error(\"No task ID returned from image generation service\");\n      }\n\n      // Poll for progress updates\n      const taskId = taskInfo.task_id;\n      let isComplete = false;\n      let progressUpdates = 0;\n\n      // Add success message to speech about generation starting\n      if ((_cameraFeedRef$curren = cameraFeedRef.current) !== null && _cameraFeedRef$curren !== void 0 && _cameraFeedRef$curren.setSpeechText) {\n        const currentText = cameraFeedRef.current.speechText || '';\n        cameraFeedRef.current.setSpeechText(`${currentText} I'm generating a visualization based on your request. This may take a moment.`);\n      }\n\n      // Add a delay before starting to poll to give the server time to initiate the task\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Start polling for progress\n      let pollingAttempts = 0;\n      const maxPollingAttempts = 120; // Poll for up to 2 minutes (1 second per poll)\n\n      while (!isComplete && pollingAttempts < maxPollingAttempts) {\n        try {\n          await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second between polls\n          pollingAttempts++;\n          console.log(`[DEBUG] Polling for progress (attempt ${pollingAttempts}): ${taskId}`);\n          const progressResponse = await fetch(`http://localhost:9999/progress/${taskId}`, {\n            signal: AbortSignal.timeout(5000),\n            headers: {\n              'Cache-Control': 'no-cache',\n              'Pragma': 'no-cache'\n            }\n          });\n          if (!progressResponse.ok) {\n            progressUpdates++;\n\n            // Get response text for logging, but with a timeout to avoid hanging\n            let responseText = \"Could not read response text\";\n            try {\n              // Set a timeout for reading the response text\n              const textPromise = progressResponse.text();\n              responseText = await Promise.race([textPromise, new Promise((_, reject) => setTimeout(() => reject(new Error(\"Text read timeout\")), 1000))]);\n            } catch (textError) {\n              console.log(`[DEBUG] Could not read error response text: ${textError}`);\n            }\n            console.log(`[DEBUG] Progress check failed (${progressResponse.status}): ${responseText}`);\n\n            // After a few failed attempts, update UI to show we're still waiting\n            if (progressUpdates % 5 === 0) {\n              setProcessingStatus(`Waiting for progress update... (${progressUpdates})`);\n            }\n\n            // We'll be much more patient - don't throw errors for 400 responses, as the task might\n            // still be running in the background. Only fail after many attempts.\n            if (progressUpdates > 30) {\n              console.log(\"[DEBUG] Too many progress update failures, moving to direct image checks\");\n              break; // Instead of throwing, just exit the loop to try direct image retrieval\n            }\n            continue;\n          }\n\n          // Reset progress update failures when we get a successful response\n          progressUpdates = 0;\n          const progress = await progressResponse.json();\n          console.log(\"[DEBUG] Image generation progress:\", progress);\n\n          // Update UI with progress info\n          setProcessingStatus(`Generating image: ${progress.progress}% - ${progress.message}`);\n\n          // Check if complete\n          if (progress.status === \"completed\") {\n            var _cameraFeedRef$curren2;\n            isComplete = true;\n            console.log(\"[DEBUG] Image generation completed, fetching result\");\n\n            // Add a small delay before fetching the result to ensure it's ready\n            await new Promise(resolve => setTimeout(resolve, 500));\n\n            // Fetch the final image\n            const resultResponse = await fetch(`http://localhost:9999/result/${taskId}`, {\n              headers: {\n                'Cache-Control': 'no-cache',\n                'Pragma': 'no-cache'\n              }\n            });\n            if (!resultResponse.ok) {\n              console.error(`[DEBUG] Failed to fetch result: ${resultResponse.status}`);\n              throw new Error(`Failed to fetch completed image: ${resultResponse.status}`);\n            }\n\n            // Clean up any existing object URL\n            if (generatedImage) {\n              URL.revokeObjectURL(generatedImage);\n            }\n            const blob = await resultResponse.blob();\n            const imageUrl = URL.createObjectURL(blob);\n            setGeneratedImage(imageUrl);\n            console.log(\"[DEBUG] Image generation successful, URL created:\", imageUrl);\n\n            // Add success message to speech\n            if ((_cameraFeedRef$curren2 = cameraFeedRef.current) !== null && _cameraFeedRef$curren2 !== void 0 && _cameraFeedRef$curren2.setSpeechText) {\n              const currentText = cameraFeedRef.current.speechText || '';\n              cameraFeedRef.current.setSpeechText(`${currentText} I've completed generating the visualization based on your request.`);\n            }\n          }\n        } catch (pollError) {\n          console.error(\"[DEBUG] Error polling for progress:\", pollError);\n          progressUpdates++;\n\n          // If we've had many failed updates, but the task might still be running,\n          // we'll just wait and try the final result after a timeout\n          if (progressUpdates > 20) {\n            console.log(\"[DEBUG] Too many failed progress updates, waiting for final result\");\n            setProcessingStatus(\"Lost connection with image service, waiting for image to complete...\");\n            await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds before trying the final result\n            break;\n          }\n        }\n      }\n\n      // If we exited the loop without getting a final image, try a more robust approach\n      if (!generatedImage) {\n        try {\n          console.log(\"[DEBUG] Attempting robust image recovery\");\n\n          // Add a longer delay to ensure image generation has completed\n          await new Promise(resolve => setTimeout(resolve, 10000));\n\n          // FIRST STRATEGY: Try to get the latest image from the server\n          console.log(\"[DEBUG] Trying to fetch the latest generated image\");\n          try {\n            const latestResponse = await fetch('http://localhost:9999/latest_image', {\n              headers: {\n                'Cache-Control': 'no-cache',\n                'Pragma': 'no-cache'\n              }\n            });\n            if (latestResponse.ok) {\n              var _cameraFeedRef$curren3;\n              console.log(\"[DEBUG] Latest image fetch successful\");\n              const blob = await latestResponse.blob();\n              const imageUrl = URL.createObjectURL(blob);\n              setGeneratedImage(imageUrl);\n\n              // Add success message to speech\n              if ((_cameraFeedRef$curren3 = cameraFeedRef.current) !== null && _cameraFeedRef$curren3 !== void 0 && _cameraFeedRef$curren3.setSpeechText) {\n                const currentText = cameraFeedRef.current.speechText || '';\n                cameraFeedRef.current.setSpeechText(`${currentText} I've completed generating the visualization based on your request.`);\n              }\n              return; // Exit if we successfully got an image\n            } else {\n              console.log(\"[DEBUG] Latest image fetch failed:\", await latestResponse.text());\n            }\n          } catch (latestError) {\n            console.error(\"[DEBUG] Error fetching latest image:\", latestError);\n          }\n\n          // SECOND STRATEGY: Try with specific timestamps\n          console.log(\"[DEBUG] Trying timestamp-based image fetching\");\n          const timestamp = Math.floor(Date.now() / 1000);\n          const backupTimestamps = [timestamp, timestamp - 30, timestamp - 60, timestamp - 90, timestamp - 120];\n\n          // Try a few recent timestamps\n          for (const ts of backupTimestamps) {\n            try {\n              const backupUrl = `http://localhost:9999/generated_samples/generated_image_${ts}.jpg`;\n              console.log(`[DEBUG] Trying backup URL: ${backupUrl}`);\n              const backupResponse = await fetch(backupUrl, {\n                headers: {\n                  'Cache-Control': 'no-cache',\n                  'Pragma': 'no-cache'\n                }\n              });\n              if (backupResponse.ok) {\n                var _cameraFeedRef$curren4;\n                const blob = await backupResponse.blob();\n                const imageUrl = URL.createObjectURL(blob);\n                setGeneratedImage(imageUrl);\n                console.log(\"[DEBUG] Timestamp-based image fetch successful\");\n\n                // Add success message to speech\n                if ((_cameraFeedRef$curren4 = cameraFeedRef.current) !== null && _cameraFeedRef$curren4 !== void 0 && _cameraFeedRef$curren4.setSpeechText) {\n                  const currentText = cameraFeedRef.current.speechText || '';\n                  cameraFeedRef.current.setSpeechText(`${currentText} I've completed generating the visualization based on your request.`);\n                }\n                return; // Exit if we successfully got an image\n              }\n            } catch (backupError) {\n              console.error(`[DEBUG] Backup fetch error for timestamp ${ts}:`, backupError);\n            }\n          }\n\n          // THIRD STRATEGY: Keep trying the task result for longer\n          console.log(\"[DEBUG] Trying task result again with longer wait\");\n          // Wait a bit longer and try the task ID again\n          await new Promise(resolve => setTimeout(resolve, 5000));\n          for (let retryAttempt = 0; retryAttempt < 3; retryAttempt++) {\n            try {\n              const finalResponse = await fetch(`http://localhost:9999/result/${taskId}`, {\n                headers: {\n                  'Cache-Control': 'no-cache',\n                  'Pragma': 'no-cache'\n                }\n              });\n              if (finalResponse.ok) {\n                const blob = await finalResponse.blob();\n                const imageUrl = URL.createObjectURL(blob);\n                setGeneratedImage(imageUrl);\n                console.log(\"[DEBUG] Final retry was successful\");\n                return;\n              } else {\n                console.log(`[DEBUG] Retry ${retryAttempt + 1} failed:`, await finalResponse.text());\n                await new Promise(resolve => setTimeout(resolve, 3000));\n              }\n            } catch (retryError) {\n              console.error(`[DEBUG] Retry ${retryAttempt + 1} error:`, retryError);\n            }\n          }\n          throw new Error(\"Could not retrieve image after multiple recovery attempts\");\n        } catch (finalError) {\n          console.error(\"[DEBUG] All image recovery attempts failed:\", finalError);\n          throw new Error(\"Failed to retrieve generated image\");\n        }\n      }\n    } catch (error) {\n      var _cameraFeedRef$curren5;\n      console.error(\"[DEBUG] Image generation error:\", error);\n      if (error.name === 'AbortError') {\n        setImageGenerationError('Image generation timed out. Please try again.');\n      } else {\n        setImageGenerationError(`Error: ${error.message}`);\n      }\n      Logger.error('Error generating image:', error);\n\n      // Add error message to speech\n      if ((_cameraFeedRef$curren5 = cameraFeedRef.current) !== null && _cameraFeedRef$curren5 !== void 0 && _cameraFeedRef$curren5.setSpeechText) {\n        const currentText = cameraFeedRef.current.speechText || '';\n        cameraFeedRef.current.setSpeechText(`${currentText} I encountered an error while trying to generate the visualization.`);\n      }\n    } finally {\n      setProcessingStatus(null);\n      setIsGeneratingImage(false);\n    }\n  };\n  useEffect(() => {\n    return () => {\n      // Clean up any object URLs when component unmounts\n      if (generatedImage) {\n        URL.revokeObjectURL(generatedImage);\n      }\n    };\n  }, []);\n  const handleVoiceInput = async (transcript, statusCallback) => {\n    if (!cameraFeedRef.current) {\n      Logger.error('Camera feed not initialized');\n      statusCallback('Error: Camera not ready');\n      return;\n    }\n    setAnalysisResult(null);\n    setIsProcessing(true);\n    Logger.info('Processing voice input:', transcript);\n    console.log(\"[DEBUG] Processing voice input:\", transcript);\n    setProcessingStatus('Capturing image...');\n    try {\n      const imageData = cameraFeedRef.current.captureFrame();\n      if (!imageData) {\n        throw new Error('Failed to capture camera frame');\n      }\n\n      // Check if this is a visualization/image generation request\n      const shouldGenerateImage = isVisualizationRequest(transcript);\n      console.log(\"[DEBUG] Should generate image:\", shouldGenerateImage);\n      Logger.info('Image captured successfully');\n      setProcessingStatus('Image captured ✅ Sending to API...');\n      statusCallback('Image captured ✅ Sending to API...');\n      const userId = getUserId();\n      const projectId = getProjectId();\n\n      // If it's an image generation request, proceed with it directly\n      if (shouldGenerateImage) {\n        statusCallback('Image request detected ✅ Generating visualization...');\n        console.log(\"[DEBUG] Image generation request detected, processing directly\");\n\n        // Still send to Gemini for component analysis\n        const geminiResponse = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            image: imageData,\n            query: transcript,\n            currentStep,\n            userId,\n            projectId,\n            requestId: Date.now().toString()\n          })\n        });\n        let components = [];\n\n        // Try to extract components if Gemini response is successful\n        let data = null;\n        try {\n          if (geminiResponse.ok) {\n            data = await geminiResponse.json();\n            setAnalysisResult(data);\n            if (data.success && data.analysis) {\n              var _cameraFeedRef$curren6;\n              // Extract components from the analysis\n              if (data.analysis.identifiedComponents && Array.isArray(data.analysis.identifiedComponents)) {\n                components = data.analysis.identifiedComponents;\n              } else if (data.analysis.identifiedParts && Array.isArray(data.analysis.identifiedParts)) {\n                components = data.analysis.identifiedParts;\n              }\n\n              // Process Gemini response for speech\n              const processedResponse = processGeminiResponse(data);\n              if ((_cameraFeedRef$curren6 = cameraFeedRef.current) !== null && _cameraFeedRef$curren6 !== void 0 && _cameraFeedRef$curren6.setSpeechText) {\n                cameraFeedRef.current.setSpeechText('');\n                setTimeout(() => {\n                  cameraFeedRef.current.setSpeechText(`${processedResponse} I'll generate a visualization of that for you.`);\n                }, 100);\n              }\n            }\n          } else {\n            var _cameraFeedRef$curren7;\n            // Even if the response isn't successful, continue with the image generation\n            console.log(`[DEBUG] Gemini voice query error: ${geminiResponse.status}. Continuing with image generation anyway.`);\n\n            // Set a basic speech message\n            if ((_cameraFeedRef$curren7 = cameraFeedRef.current) !== null && _cameraFeedRef$curren7 !== void 0 && _cameraFeedRef$curren7.setSpeechText) {\n              cameraFeedRef.current.setSpeechText(\"I'll generate a visualization based on your request.\");\n            }\n          }\n        } catch (respError) {\n          var _cameraFeedRef$curren8;\n          // Don't let response parsing errors stop the image generation\n          console.error(\"[DEBUG] Error parsing Gemini voice query response:\", respError);\n\n          // Set a basic speech message\n          if ((_cameraFeedRef$curren8 = cameraFeedRef.current) !== null && _cameraFeedRef$curren8 !== void 0 && _cameraFeedRef$curren8.setSpeechText) {\n            cameraFeedRef.current.setSpeechText(\"I'll generate a visualization based on your request.\");\n          }\n        }\n\n        // Clean transcript to form a better prompt for image generation\n        let imagePrompt = transcript.replace(/can you /i, '').replace(/please /i, '').replace(/I want /i, '').replace(/I'd like /i, '').replace(/show me /i, '').replace(/create /i, '').replace(/generate /i, '').replace(/make /i, '');\n\n        // Add components to prompt if available\n        if (components.length > 0) {\n          const componentNames = components.map(c => typeof c === 'string' ? c : c.name).filter(Boolean).join(', ');\n          imagePrompt = `${imagePrompt}. Include these drone components: ${componentNames}`;\n        }\n\n        // Always add \"drone\" to the prompt if it's not already there\n        if (!imagePrompt.toLowerCase().includes('drone')) {\n          imagePrompt = `${imagePrompt} of a drone`;\n        }\n        console.log(\"[DEBUG] Image prompt:\", imagePrompt);\n        // Generate the image\n        generateStableDiffusionImage(imagePrompt);\n        return; // Early return to skip the regular flow\n      }\n\n      // Continue with regular voice query flow if not an image request\n      const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData,\n          query: transcript,\n          currentStep,\n          userId,\n          projectId,\n          requestId: Date.now().toString()\n        })\n      });\n\n      // Handle response errors more gracefully\n      let data;\n      try {\n        if (!response.ok) {\n          console.error(`[DEBUG] HTTP error in regular voice query: ${response.status}`);\n          // Don't throw here, try to continue with basic info\n          data = {\n            success: true,\n            analysis: {\n              answer: \"I processed your request, but encountered an issue with the server.\",\n              status: \"warning\"\n            }\n          };\n        } else {\n          data = await response.json();\n        }\n        setProcessingStatus('Response received ✅');\n        statusCallback('Response received ✅');\n        if (data && data.success) {\n          var _cameraFeedRef$curren9;\n          setAnalysisResult(data);\n          const processedResponse = processGeminiResponse(data);\n          if ((_cameraFeedRef$curren9 = cameraFeedRef.current) !== null && _cameraFeedRef$curren9 !== void 0 && _cameraFeedRef$curren9.setSpeechText) {\n            cameraFeedRef.current.setSpeechText('');\n            setTimeout(() => {\n              cameraFeedRef.current.setSpeechText(processedResponse);\n            }, 100);\n          }\n        } else {\n          var _cameraFeedRef$curren10;\n          console.warn(\"[DEBUG] Voice query returned unsuccessful response:\", data);\n          // Create a basic response instead of throwing\n          const fallbackData = {\n            success: true,\n            analysis: {\n              answer: \"I couldn't fully understand your request, but I'll try to help.\",\n              status: \"warning\"\n            }\n          };\n          setAnalysisResult(fallbackData);\n          if ((_cameraFeedRef$curren10 = cameraFeedRef.current) !== null && _cameraFeedRef$curren10 !== void 0 && _cameraFeedRef$curren10.setSpeechText) {\n            cameraFeedRef.current.setSpeechText(\"I couldn't fully understand your request, but I'll try to help.\");\n          }\n        }\n      } catch (parseError) {\n        var _cameraFeedRef$curren11;\n        console.error(\"[DEBUG] Error parsing regular voice query response:\", parseError);\n        // Handle parsing errors gracefully\n        const fallbackData = {\n          success: true,\n          analysis: {\n            answer: \"I had trouble processing the response from the server.\",\n            status: \"warning\"\n          }\n        };\n        setAnalysisResult(fallbackData);\n        if ((_cameraFeedRef$curren11 = cameraFeedRef.current) !== null && _cameraFeedRef$curren11 !== void 0 && _cameraFeedRef$curren11.setSpeechText) {\n          cameraFeedRef.current.setSpeechText(\"I had trouble processing the response from the server.\");\n        }\n      }\n    } catch (error) {\n      var _cameraFeedRef$curren12;\n      Logger.error('Voice query error:', error);\n      console.error(\"[DEBUG] Voice query error:\", error);\n      setProcessingStatus('Error processing request ❌');\n      statusCallback('Error processing request ❌');\n      setAnalysisResult(null);\n      if ((_cameraFeedRef$curren12 = cameraFeedRef.current) !== null && _cameraFeedRef$curren12 !== void 0 && _cameraFeedRef$curren12.setSpeechText) {\n        cameraFeedRef.current.setSpeechText('I encountered an error processing your request. Please try again.');\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleProjectSelect = project => {\n    setActiveProject(project);\n    setShowProjectManager(false);\n  };\n  const handleOnboardingComplete = () => {\n    setShowOnboarding(false);\n    loadActiveProject();\n  };\n  const toggleProjectManager = () => {\n    setShowProjectManager(!showProjectManager);\n  };\n  const renderContent = () => {\n    if (showOnboarding) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto px-4 py-8\",\n        children: /*#__PURE__*/_jsxDEV(NewUserOnboarding, {\n          onComplete: handleOnboardingComplete,\n          onGenerateImage: generateStableDiffusionImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 9\n      }, this);\n    }\n    if (projectLoading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto px-4 py-8 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mx-auto px-4 py-6\",\n      children: showProjectManager ? /*#__PURE__*/_jsxDEV(ProjectManager, {\n        onProjectSelect: handleProjectSelect,\n        onNewProject: handleProjectSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-12 gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-span-12 lg:col-span-8\",\n          children: [/*#__PURE__*/_jsxDEV(CameraFeed, {\n            ref: cameraFeedRef,\n            currentStep: currentStep,\n            onAnalysisComplete: handleAnalysisComplete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 15\n          }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4 bg-black/50 text-white p-4 rounded-xl\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center gap-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-3 h-3 bg-green-500 rounded-full animate-pulse\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 782,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: processingStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 783,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 781,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 780,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 772,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-span-12 lg:col-span-4 space-y-6\",\n          children: [/*#__PURE__*/_jsxDEV(InstructionPanel, {\n            currentStep: currentStep,\n            analysis: analysisResult === null || analysisResult === void 0 ? void 0 : analysisResult.analysis,\n            project: currentProject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(VisualizationPanel, {\n            components: components || [] // Now 'components' is properly defined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(GeneratedImagePanel, {\n            image: generatedImage,\n            isLoading: isGeneratingImage,\n            error: imageGenerationError,\n            title: \"Drone Visualization\",\n            progressStatus: processingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-indigo-800\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"border-b border-white/10 backdrop-blur-md bg-black/20\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto px-4 py-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-2xl font-bold text-white\",\n            children: (currentProject === null || currentProject === void 0 ? void 0 : currentProject.project_name) || 'Drone Assembly'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 816,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: toggleProjectManager,\n              className: \"text-indigo-200 hover:text-white transition-colors\",\n              title: \"Projects\",\n              children: /*#__PURE__*/_jsxDEV(Folder, {\n                className: \"w-6 h-6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-indigo-200 hover:text-white transition-colors\",\n              title: \"History\",\n              children: /*#__PURE__*/_jsxDEV(Clock, {\n                className: \"w-6 h-6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 828,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 827,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-indigo-200 hover:text-white transition-colors\",\n              title: \"Chat\",\n              children: /*#__PURE__*/_jsxDEV(MessageSquare, {\n                className: \"w-6 h-6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 830,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 819,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 814,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 813,\n      columnNumber: 7\n    }, this), renderContent(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-6 right-6 flex flex-col gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(VoiceInput, {\n        onVoiceInput: handleVoiceInput,\n        disabled: isProcessing || showProjectManager || showOnboarding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-14 h-14 bg-indigo-600 hover:bg-indigo-700 rounded-full flex items-center justify-center text-white shadow-lg transition-colors\",\n        onClick: toggleProjectManager,\n        title: showProjectManager ? \"Back to Assembly\" : \"Switch Project\",\n        children: /*#__PURE__*/_jsxDEV(ArrowLeftRight, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 840,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 812,\n    columnNumber: 5\n  }, this);\n};\n_s(MainInterface, \"jikbddtpSzIluA8ogUytJ6zNz8w=\", false, function () {\n  return [useProject];\n});\n_c = MainInterface;\nexport default MainInterface;\nvar _c;\n$RefreshReg$(_c, \"MainInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Clock","MessageSquare","Folder","ArrowLeftRight","CameraFeed","InstructionPanel","VisualizationPanel","VoiceInput","ProjectManager","NewUserOnboarding","Logger","processGeminiResponse","getUserId","getProjectId","useProject","GeneratedImagePanel","jsxDEV","_jsxDEV","MainInterface","_s","analysisResult","setAnalysisResult","isProcessing","setIsProcessing","processingStatus","setProcessingStatus","showProjectManager","setShowProjectManager","showOnboarding","setShowOnboarding","cameraFeedRef","generatedImage","setGeneratedImage","isGeneratingImage","setIsGeneratingImage","imageGenerationError","setImageGenerationError","currentProject","isLoading","projectLoading","loadActiveProject","setActiveProject","addComponents","addCompletedStep","components","projectId","currentStep","current_step","isVisualizationRequest","transcript","visualizationTriggers","result","some","trigger","test","console","log","handleAnalysisComplete","_result$analysis","_result$analysis2","_result$analysis5","info","hasData","hasAnalysis","analysis","identifiedComponents","identifiedParts","timestamp","Date","toISOString","_result$analysis3","_result$analysis4","componentsToStore","Array","isArray","length","possibleFields","Object","keys","filter","key","toLowerCase","includes","validComponents","comp","name","storeIdentifiedComponents","canProceed","stepInfo","stepNumber","title","details","feedback","count","error","generateStableDiffusionImage","prompt","_cameraFeedRef$curren","healthCheck","fetch","method","signal","AbortSignal","timeout","ok","e","response","headers","body","JSON","stringify","userId","async","Error","status","statusText","taskInfo","json","task_id","taskId","isComplete","progressUpdates","current","setSpeechText","currentText","speechText","Promise","resolve","setTimeout","pollingAttempts","maxPollingAttempts","progressResponse","responseText","textPromise","text","race","_","reject","textError","progress","message","_cameraFeedRef$curren2","resultResponse","URL","revokeObjectURL","blob","imageUrl","createObjectURL","pollError","latestResponse","_cameraFeedRef$curren3","latestError","Math","floor","now","backupTimestamps","ts","backupUrl","backupResponse","_cameraFeedRef$curren4","backupError","retryAttempt","finalResponse","retryError","finalError","_cameraFeedRef$curren5","handleVoiceInput","statusCallback","imageData","captureFrame","shouldGenerateImage","geminiResponse","image","query","requestId","toString","data","success","_cameraFeedRef$curren6","processedResponse","_cameraFeedRef$curren7","respError","_cameraFeedRef$curren8","imagePrompt","replace","componentNames","map","c","Boolean","join","answer","_cameraFeedRef$curren9","_cameraFeedRef$curren10","warn","fallbackData","parseError","_cameraFeedRef$curren11","_cameraFeedRef$curren12","handleProjectSelect","project","handleOnboardingComplete","toggleProjectManager","renderContent","className","children","onComplete","onGenerateImage","fileName","_jsxFileName","lineNumber","columnNumber","onProjectSelect","onNewProject","ref","onAnalysisComplete","progressStatus","project_name","onClick","onVoiceInput","disabled","_c","$RefreshReg$"],"sources":["/Users/manmohan/Documents/drone_assembler/frontend/src/components/MainInterface.js"],"sourcesContent":["// frontend/src/components/MainInterface.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Clock, MessageSquare, Folder, ArrowLeftRight } from 'lucide-react';\nimport CameraFeed from './CameraFeed';\nimport InstructionPanel from './InstructionPanel';\nimport VisualizationPanel from './VisualizationPanel';\nimport VoiceInput from './VoiceInput';\nimport ProjectManager from './ProjectManager';\nimport NewUserOnboarding from './NewUserOnboarding';\nimport Logger from '../utils/logger';\nimport { processGeminiResponse } from '../utils/speechUtils';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport { useProject } from '../contexts/ProjectContext';\nimport GeneratedImagePanel from './GeneratedImagePanel';\n\nconst MainInterface = () => {\n  const [analysisResult, setAnalysisResult] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStatus, setProcessingStatus] = useState(null);\n  const [showProjectManager, setShowProjectManager] = useState(false);\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const cameraFeedRef = useRef();\n  const [generatedImage, setGeneratedImage] = useState(null);\n  const [isGeneratingImage, setIsGeneratingImage] = useState(false);\n  const [imageGenerationError, setImageGenerationError] = useState(null);\n\n  const { \n    currentProject, \n    isLoading: projectLoading,\n    loadActiveProject, \n    setActiveProject,\n    addComponents,\n    addCompletedStep,\n    components // Add this line to fix the error\n  } = useProject();\n\n  useEffect(() => {\n    const projectId = getProjectId();\n    if (!projectId) {\n      setShowOnboarding(true);\n    }\n  }, []);\n\n  const currentStep = currentProject?.current_step || 1;\n\n  const isVisualizationRequest = (transcript) => {\n    // Expanded list of triggers for image generation/visualization\n    const visualizationTriggers = [\n      /create.*image/i,\n      /generate.*image/i,\n      /show.*visual/i,\n      /create.*visual/i,\n      /visualize/i,\n      /draw.*drone/i,\n      /make.*picture/i,\n      /create.*picture/i,\n      /show.*what.*looks.*like/i,\n      /picture.*of/i,\n      /image.*of/i,\n      /illustration.*of/i,\n      /visualize.*the.*drone/i, \n      /show.*me.*what/i,\n      /show.*me.*a.*picture/i,\n      /show.*me.*an.*image/i,\n      /can.*you.*draw/i,\n      /can.*you.*show.*me/i,\n      /generate.*a.*picture/i,\n      /create.*a.*representation/i,\n      /make.*an.*image/i\n    ];\n    \n    const result = visualizationTriggers.some(trigger => trigger.test(transcript));\n    console.log(\"[DEBUG] Visualization request check:\", transcript, result);\n    return result;\n  };\n\n  const handleAnalysisComplete = (result) => {\n    if (!result) {\n      setAnalysisResult(null);\n      setProcessingStatus(null);\n      return;\n    }\n    \n    setAnalysisResult(result);\n    \n    console.log(\"[DEBUG] Analysis result:\", result);\n    console.log(\"[DEBUG] Current project:\", currentProject);\n    console.log(\"[DEBUG] Current components:\", components);\n  \n    Logger.info('Analysis completed', {\n      hasData: !!result,\n      hasAnalysis: !!result?.analysis,\n      identifiedComponents: !!result?.analysis?.identifiedComponents,\n      identifiedParts: !!result?.analysis?.identifiedParts,\n      timestamp: new Date().toISOString()\n    });\n    \n    if (currentProject) {\n      let componentsToStore = [];\n      \n      // Check in both locations the backend might put component data\n      if (result?.analysis?.identifiedComponents && Array.isArray(result.analysis.identifiedComponents)) {\n        componentsToStore = result.analysis.identifiedComponents;\n        console.log(\"[DEBUG] Found identifiedComponents:\", componentsToStore);\n      } else if (result?.analysis?.identifiedParts && Array.isArray(result.analysis.identifiedParts)) {\n        componentsToStore = result.analysis.identifiedParts;\n        console.log(\"[DEBUG] Found identifiedParts:\", componentsToStore);\n      } else {\n        // Debug the actual structure received to understand what's happening\n        console.log(\"[DEBUG] No identifiedComponents or identifiedParts arrays found in:\", result.analysis);\n      }\n      \n      // Add special check for object structure\n      if (componentsToStore.length === 0 && typeof result.analysis === 'object') {\n        // Try to extract component data from other possible fields\n        const possibleFields = Object.keys(result.analysis).filter(key => \n          Array.isArray(result.analysis[key]) && \n          key.toLowerCase().includes('component')\n        );\n        \n        if (possibleFields.length > 0) {\n          console.log(\"[DEBUG] Found alternative component fields:\", possibleFields);\n          componentsToStore = result.analysis[possibleFields[0]];\n        }\n      }\n      \n      // Enhanced validation of component data\n      if (componentsToStore.length > 0) {\n        // Filter out invalid components\n        const validComponents = componentsToStore.filter(comp => \n          comp && (typeof comp === 'string' || (typeof comp === 'object' && comp.name))\n        );\n        \n        if (validComponents.length > 0) {\n          console.log(\"[DEBUG] Valid components to store:\", validComponents);\n          storeIdentifiedComponents(validComponents);\n        } else {\n          console.log(\"[DEBUG] No valid components after filtering:\", componentsToStore);\n        }\n      } else {\n        console.log(\"[DEBUG] No components to store found in result\");\n      }\n    } else {\n      console.log(\"[DEBUG] No current project available\");\n    }\n    \n    if (result?.analysis?.canProceed) {\n      const stepInfo = {\n        stepNumber: currentStep,\n        title: `Step ${currentStep} completed`,\n        timestamp: new Date().toISOString(),\n        details: result.analysis.feedback || 'Step completed successfully',\n      };\n      \n      addCompletedStep(stepInfo);\n    }\n  };\n// Fixed storeIdentifiedComponents function for MainInterface.js\n  const storeIdentifiedComponents = async (components) => {\n    if (!components || !Array.isArray(components) || components.length === 0) {\n      console.log(\"[DEBUG] Invalid components to store:\", components);\n      return;\n    }\n    \n    console.log(\"[DEBUG] Calling addComponents with:\", components);\n    try {\n      Logger.info('Storing identified components', { count: components.length });\n      const result = await addComponents(components); // Capture the return value\n      console.log(\"[DEBUG] addComponents returned:\", result);\n    } catch (error) {\n      Logger.error('Error storing components', error);\n      console.error(\"[DEBUG] Error in storeIdentifiedComponents:\", error);\n    }\n  };\n  \n  // Updated image generation function with progress tracking\nconst generateStableDiffusionImage = async (prompt) => {\n  try {\n    setIsGeneratingImage(true);\n    setImageGenerationError(null);\n    \n    Logger.info('Starting image generation', { prompt });\n    console.log(\"[DEBUG] Image generation prompt:\", prompt);\n    \n    // First check if the service is running\n    try {\n      const healthCheck = await fetch('http://localhost:9999', { \n        method: 'GET',\n        signal: AbortSignal.timeout(2000)\n      });\n      \n      if (healthCheck.ok) {\n        console.log(\"[DEBUG] Image service is running\");\n      }\n    } catch (e) {\n      console.log(\"[DEBUG] Service health check failed, attempting to generate anyway\");\n    }\n    \n    // Start the async image generation\n    const response = await fetch('http://localhost:9999/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: prompt,\n        userId: getUserId(),\n        projectId: getProjectId(),\n        async: true  // Enable async processing\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to start image generation: ${response.status} ${response.statusText}`);\n    }\n\n    // Get the task info from the response\n    const taskInfo = await response.json();\n    console.log(\"[DEBUG] Image generation task started:\", taskInfo);\n    \n    if (!taskInfo.task_id) {\n      throw new Error(\"No task ID returned from image generation service\");\n    }\n    \n    // Poll for progress updates\n    const taskId = taskInfo.task_id;\n    let isComplete = false;\n    let progressUpdates = 0;\n    \n    // Add success message to speech about generation starting\n    if (cameraFeedRef.current?.setSpeechText) {\n      const currentText = cameraFeedRef.current.speechText || '';\n      cameraFeedRef.current.setSpeechText(\n        `${currentText} I'm generating a visualization based on your request. This may take a moment.`\n      );\n    }\n    \n    // Add a delay before starting to poll to give the server time to initiate the task\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Start polling for progress\n    let pollingAttempts = 0;\n    const maxPollingAttempts = 120; // Poll for up to 2 minutes (1 second per poll)\n    \n    while (!isComplete && pollingAttempts < maxPollingAttempts) {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second between polls\n        pollingAttempts++;\n        \n        console.log(`[DEBUG] Polling for progress (attempt ${pollingAttempts}): ${taskId}`);\n        \n        const progressResponse = await fetch(`http://localhost:9999/progress/${taskId}`, {\n          signal: AbortSignal.timeout(5000),\n          headers: {\n            'Cache-Control': 'no-cache',\n            'Pragma': 'no-cache'\n          }\n        });\n        \n        if (!progressResponse.ok) {\n          progressUpdates++;\n          \n          // Get response text for logging, but with a timeout to avoid hanging\n          let responseText = \"Could not read response text\";\n          try {\n            // Set a timeout for reading the response text\n            const textPromise = progressResponse.text();\n            responseText = await Promise.race([\n              textPromise,\n              new Promise((_, reject) => setTimeout(() => reject(new Error(\"Text read timeout\")), 1000))\n            ]);\n          } catch (textError) {\n            console.log(`[DEBUG] Could not read error response text: ${textError}`);\n          }\n          \n          console.log(`[DEBUG] Progress check failed (${progressResponse.status}): ${responseText}`);\n          \n          // After a few failed attempts, update UI to show we're still waiting\n          if (progressUpdates % 5 === 0) {\n            setProcessingStatus(`Waiting for progress update... (${progressUpdates})`);\n          }\n          \n          // We'll be much more patient - don't throw errors for 400 responses, as the task might\n          // still be running in the background. Only fail after many attempts.\n          if (progressUpdates > 30) {\n            console.log(\"[DEBUG] Too many progress update failures, moving to direct image checks\");\n            break; // Instead of throwing, just exit the loop to try direct image retrieval\n          }\n          continue;\n        }\n        \n        // Reset progress update failures when we get a successful response\n        progressUpdates = 0;\n        \n        const progress = await progressResponse.json();\n        console.log(\"[DEBUG] Image generation progress:\", progress);\n        \n        // Update UI with progress info\n        setProcessingStatus(`Generating image: ${progress.progress}% - ${progress.message}`);\n        \n        // Check if complete\n        if (progress.status === \"completed\") {\n          isComplete = true;\n          \n          console.log(\"[DEBUG] Image generation completed, fetching result\");\n          \n          // Add a small delay before fetching the result to ensure it's ready\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          // Fetch the final image\n          const resultResponse = await fetch(`http://localhost:9999/result/${taskId}`, {\n            headers: {\n              'Cache-Control': 'no-cache',\n              'Pragma': 'no-cache'\n            }\n          });\n          \n          if (!resultResponse.ok) {\n            console.error(`[DEBUG] Failed to fetch result: ${resultResponse.status}`);\n            throw new Error(`Failed to fetch completed image: ${resultResponse.status}`);\n          }\n          \n          // Clean up any existing object URL\n          if (generatedImage) {\n            URL.revokeObjectURL(generatedImage);\n          }\n          \n          const blob = await resultResponse.blob();\n          const imageUrl = URL.createObjectURL(blob);\n          setGeneratedImage(imageUrl);\n          console.log(\"[DEBUG] Image generation successful, URL created:\", imageUrl);\n          \n          // Add success message to speech\n          if (cameraFeedRef.current?.setSpeechText) {\n            const currentText = cameraFeedRef.current.speechText || '';\n            cameraFeedRef.current.setSpeechText(\n              `${currentText} I've completed generating the visualization based on your request.`\n            );\n          }\n        }\n      } catch (pollError) {\n        console.error(\"[DEBUG] Error polling for progress:\", pollError);\n        progressUpdates++;\n        \n        // If we've had many failed updates, but the task might still be running,\n        // we'll just wait and try the final result after a timeout\n        if (progressUpdates > 20) {\n          console.log(\"[DEBUG] Too many failed progress updates, waiting for final result\");\n          setProcessingStatus(\"Lost connection with image service, waiting for image to complete...\");\n          await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds before trying the final result\n          break;\n        }\n      }\n    }\n    \n    // If we exited the loop without getting a final image, try a more robust approach\n    if (!generatedImage) {\n      try {\n        console.log(\"[DEBUG] Attempting robust image recovery\");\n        \n        // Add a longer delay to ensure image generation has completed\n        await new Promise(resolve => setTimeout(resolve, 10000));\n        \n        // FIRST STRATEGY: Try to get the latest image from the server\n        console.log(\"[DEBUG] Trying to fetch the latest generated image\");\n        try {\n          const latestResponse = await fetch('http://localhost:9999/latest_image', {\n            headers: {\n              'Cache-Control': 'no-cache',\n              'Pragma': 'no-cache'\n            }\n          });\n          \n          if (latestResponse.ok) {\n            console.log(\"[DEBUG] Latest image fetch successful\");\n            const blob = await latestResponse.blob();\n            const imageUrl = URL.createObjectURL(blob);\n            setGeneratedImage(imageUrl);\n            \n            // Add success message to speech\n            if (cameraFeedRef.current?.setSpeechText) {\n              const currentText = cameraFeedRef.current.speechText || '';\n              cameraFeedRef.current.setSpeechText(\n                `${currentText} I've completed generating the visualization based on your request.`\n              );\n            }\n            \n            return; // Exit if we successfully got an image\n          } else {\n            console.log(\"[DEBUG] Latest image fetch failed:\", await latestResponse.text());\n          }\n        } catch (latestError) {\n          console.error(\"[DEBUG] Error fetching latest image:\", latestError);\n        }\n        \n        // SECOND STRATEGY: Try with specific timestamps\n        console.log(\"[DEBUG] Trying timestamp-based image fetching\");\n        const timestamp = Math.floor(Date.now() / 1000);\n        const backupTimestamps = [\n          timestamp,\n          timestamp - 30,\n          timestamp - 60,\n          timestamp - 90,\n          timestamp - 120\n        ];\n        \n        // Try a few recent timestamps\n        for (const ts of backupTimestamps) {\n          try {\n            const backupUrl = `http://localhost:9999/generated_samples/generated_image_${ts}.jpg`;\n            console.log(`[DEBUG] Trying backup URL: ${backupUrl}`);\n            \n            const backupResponse = await fetch(backupUrl, {\n              headers: {\n                'Cache-Control': 'no-cache',\n                'Pragma': 'no-cache'\n              }\n            });\n            \n            if (backupResponse.ok) {\n              const blob = await backupResponse.blob();\n              const imageUrl = URL.createObjectURL(blob);\n              setGeneratedImage(imageUrl);\n              console.log(\"[DEBUG] Timestamp-based image fetch successful\");\n              \n              // Add success message to speech\n              if (cameraFeedRef.current?.setSpeechText) {\n                const currentText = cameraFeedRef.current.speechText || '';\n                cameraFeedRef.current.setSpeechText(\n                  `${currentText} I've completed generating the visualization based on your request.`\n                );\n              }\n              \n              return; // Exit if we successfully got an image\n            }\n          } catch (backupError) {\n            console.error(`[DEBUG] Backup fetch error for timestamp ${ts}:`, backupError);\n          }\n        }\n        \n        // THIRD STRATEGY: Keep trying the task result for longer\n        console.log(\"[DEBUG] Trying task result again with longer wait\");\n        // Wait a bit longer and try the task ID again\n        await new Promise(resolve => setTimeout(resolve, 5000));\n        \n        for (let retryAttempt = 0; retryAttempt < 3; retryAttempt++) {\n          try {\n            const finalResponse = await fetch(`http://localhost:9999/result/${taskId}`, {\n              headers: {\n                'Cache-Control': 'no-cache',\n                'Pragma': 'no-cache'\n              }\n            });\n            \n            if (finalResponse.ok) {\n              const blob = await finalResponse.blob();\n              const imageUrl = URL.createObjectURL(blob);\n              setGeneratedImage(imageUrl);\n              console.log(\"[DEBUG] Final retry was successful\");\n              return;\n            } else {\n              console.log(`[DEBUG] Retry ${retryAttempt + 1} failed:`, await finalResponse.text());\n              await new Promise(resolve => setTimeout(resolve, 3000));\n            }\n          } catch (retryError) {\n            console.error(`[DEBUG] Retry ${retryAttempt + 1} error:`, retryError);\n          }\n        }\n        \n        throw new Error(\"Could not retrieve image after multiple recovery attempts\");\n      } catch (finalError) {\n        console.error(\"[DEBUG] All image recovery attempts failed:\", finalError);\n        throw new Error(\"Failed to retrieve generated image\");\n      }\n    }\n    \n  } catch (error) {\n    console.error(\"[DEBUG] Image generation error:\", error);\n    if (error.name === 'AbortError') {\n      setImageGenerationError('Image generation timed out. Please try again.');\n    } else {\n      setImageGenerationError(`Error: ${error.message}`);\n    }\n    Logger.error('Error generating image:', error);\n    \n    // Add error message to speech\n    if (cameraFeedRef.current?.setSpeechText) {\n      const currentText = cameraFeedRef.current.speechText || '';\n      cameraFeedRef.current.setSpeechText(\n        `${currentText} I encountered an error while trying to generate the visualization.`\n      );\n    }\n  } finally {\n    setProcessingStatus(null);\n    setIsGeneratingImage(false);\n  }\n};\n\nuseEffect(() => {\n  return () => {\n    // Clean up any object URLs when component unmounts\n    if (generatedImage) {\n      URL.revokeObjectURL(generatedImage);\n    }\n  };\n}, []);\n\n  const handleVoiceInput = async (transcript, statusCallback) => {\n    if (!cameraFeedRef.current) {\n      Logger.error('Camera feed not initialized');\n      statusCallback('Error: Camera not ready');\n      return;\n    }\n  \n    setAnalysisResult(null);\n    setIsProcessing(true);\n    Logger.info('Processing voice input:', transcript);\n    console.log(\"[DEBUG] Processing voice input:\", transcript);\n    setProcessingStatus('Capturing image...');\n    \n    try {\n      const imageData = cameraFeedRef.current.captureFrame();\n      \n      if (!imageData) {\n        throw new Error('Failed to capture camera frame');\n      }\n      \n      // Check if this is a visualization/image generation request\n      const shouldGenerateImage = isVisualizationRequest(transcript);\n      console.log(\"[DEBUG] Should generate image:\", shouldGenerateImage);\n      \n      Logger.info('Image captured successfully');\n      setProcessingStatus('Image captured ✅ Sending to API...');\n      statusCallback('Image captured ✅ Sending to API...');\n  \n      const userId = getUserId();\n      const projectId = getProjectId();\n      \n      // If it's an image generation request, proceed with it directly\n      if (shouldGenerateImage) {\n        statusCallback('Image request detected ✅ Generating visualization...');\n        console.log(\"[DEBUG] Image generation request detected, processing directly\");\n        \n        // Still send to Gemini for component analysis\n        const geminiResponse = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            image: imageData,\n            query: transcript,\n            currentStep,\n            userId,\n            projectId,\n            requestId: Date.now().toString()\n          })\n        });\n        \n        let components = [];\n        \n        // Try to extract components if Gemini response is successful\n        let data = null;\n        try {\n          if (geminiResponse.ok) {\n            data = await geminiResponse.json();\n            setAnalysisResult(data);\n            \n            if (data.success && data.analysis) {\n              // Extract components from the analysis\n              if (data.analysis.identifiedComponents && Array.isArray(data.analysis.identifiedComponents)) {\n                components = data.analysis.identifiedComponents;\n              } else if (data.analysis.identifiedParts && Array.isArray(data.analysis.identifiedParts)) {\n                components = data.analysis.identifiedParts;\n              }\n              \n              // Process Gemini response for speech\n              const processedResponse = processGeminiResponse(data);\n              if (cameraFeedRef.current?.setSpeechText) {\n                cameraFeedRef.current.setSpeechText('');\n                setTimeout(() => {\n                  cameraFeedRef.current.setSpeechText(\n                    `${processedResponse} I'll generate a visualization of that for you.`\n                  );\n                }, 100);\n              }\n            }\n          } else {\n            // Even if the response isn't successful, continue with the image generation\n            console.log(`[DEBUG] Gemini voice query error: ${geminiResponse.status}. Continuing with image generation anyway.`);\n            \n            // Set a basic speech message\n            if (cameraFeedRef.current?.setSpeechText) {\n              cameraFeedRef.current.setSpeechText(\"I'll generate a visualization based on your request.\");\n            }\n          }\n        } catch (respError) {\n          // Don't let response parsing errors stop the image generation\n          console.error(\"[DEBUG] Error parsing Gemini voice query response:\", respError);\n          \n          // Set a basic speech message\n          if (cameraFeedRef.current?.setSpeechText) {\n            cameraFeedRef.current.setSpeechText(\"I'll generate a visualization based on your request.\");\n          }\n        }\n        \n        // Clean transcript to form a better prompt for image generation\n        let imagePrompt = transcript.replace(/can you /i, '')\n                                    .replace(/please /i, '')\n                                    .replace(/I want /i, '')\n                                    .replace(/I'd like /i, '')\n                                    .replace(/show me /i, '')\n                                    .replace(/create /i, '')\n                                    .replace(/generate /i, '')\n                                    .replace(/make /i, '');\n        \n        // Add components to prompt if available\n        if (components.length > 0) {\n          const componentNames = components\n            .map(c => typeof c === 'string' ? c : c.name)\n            .filter(Boolean)\n            .join(', ');\n          \n          imagePrompt = `${imagePrompt}. Include these drone components: ${componentNames}`;\n        }\n        \n        // Always add \"drone\" to the prompt if it's not already there\n        if (!imagePrompt.toLowerCase().includes('drone')) {\n          imagePrompt = `${imagePrompt} of a drone`;\n        }\n        \n        console.log(\"[DEBUG] Image prompt:\", imagePrompt);\n        // Generate the image\n        generateStableDiffusionImage(imagePrompt);\n        \n        return; // Early return to skip the regular flow\n      }\n      \n      // Continue with regular voice query flow if not an image request\n      const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          image: imageData,\n          query: transcript,\n          currentStep,\n          userId,\n          projectId,\n          requestId: Date.now().toString()\n        })\n      });\n  \n      // Handle response errors more gracefully\n      let data;\n      try {\n        if (!response.ok) {\n          console.error(`[DEBUG] HTTP error in regular voice query: ${response.status}`);\n          // Don't throw here, try to continue with basic info\n          data = {\n            success: true,\n            analysis: {\n              answer: \"I processed your request, but encountered an issue with the server.\",\n              status: \"warning\"\n            }\n          };\n        } else {\n          data = await response.json();\n        }\n        \n        setProcessingStatus('Response received ✅');\n        statusCallback('Response received ✅');\n    \n        if (data && data.success) {\n          setAnalysisResult(data);\n          \n          const processedResponse = processGeminiResponse(data);\n          if (cameraFeedRef.current?.setSpeechText) {\n            cameraFeedRef.current.setSpeechText('');\n            setTimeout(() => {\n              cameraFeedRef.current.setSpeechText(processedResponse);\n            }, 100);\n          }\n        } else {\n          console.warn(\"[DEBUG] Voice query returned unsuccessful response:\", data);\n          // Create a basic response instead of throwing\n          const fallbackData = {\n            success: true,\n            analysis: {\n              answer: \"I couldn't fully understand your request, but I'll try to help.\",\n              status: \"warning\"\n            }\n          };\n          setAnalysisResult(fallbackData);\n          \n          if (cameraFeedRef.current?.setSpeechText) {\n            cameraFeedRef.current.setSpeechText(\"I couldn't fully understand your request, but I'll try to help.\");\n          }\n        }\n      } catch (parseError) {\n        console.error(\"[DEBUG] Error parsing regular voice query response:\", parseError);\n        // Handle parsing errors gracefully\n        const fallbackData = {\n          success: true,\n          analysis: {\n            answer: \"I had trouble processing the response from the server.\",\n            status: \"warning\"\n          }\n        };\n        setAnalysisResult(fallbackData);\n        \n        if (cameraFeedRef.current?.setSpeechText) {\n          cameraFeedRef.current.setSpeechText(\"I had trouble processing the response from the server.\");\n        }\n      }\n  \n    } catch (error) {\n      Logger.error('Voice query error:', error);\n      console.error(\"[DEBUG] Voice query error:\", error);\n      setProcessingStatus('Error processing request ❌');\n      statusCallback('Error processing request ❌');\n      setAnalysisResult(null);\n      \n      if (cameraFeedRef.current?.setSpeechText) {\n        cameraFeedRef.current.setSpeechText('I encountered an error processing your request. Please try again.');\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleProjectSelect = (project) => {\n    setActiveProject(project);\n    setShowProjectManager(false);\n  };\n\n  const handleOnboardingComplete = () => {\n    setShowOnboarding(false);\n    loadActiveProject();\n  };\n\n  const toggleProjectManager = () => {\n    setShowProjectManager(!showProjectManager);\n  };\n\n  const renderContent = () => {\n    if (showOnboarding) {\n      return (\n        <div className=\"container mx-auto px-4 py-8\">\n          <NewUserOnboarding \n            onComplete={handleOnboardingComplete}\n            onGenerateImage={generateStableDiffusionImage} \n          />\n        </div>\n      );\n    }\n    \n    if (projectLoading) {\n      return (\n        <div className=\"container mx-auto px-4 py-8 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"></div>\n        </div>\n      );\n    }\n    \n    return (\n      <main className=\"container mx-auto px-4 py-6\">\n        {showProjectManager ? (\n          <ProjectManager \n            onProjectSelect={handleProjectSelect}\n            onNewProject={handleProjectSelect}\n          />\n        ) : (\n          <div className=\"grid grid-cols-12 gap-6\">\n            <div className=\"col-span-12 lg:col-span-8\">\n              <CameraFeed \n                ref={cameraFeedRef}\n                currentStep={currentStep}\n                onAnalysisComplete={handleAnalysisComplete}\n              />\n              \n              {processingStatus && (\n                <div className=\"mt-4 bg-black/50 text-white p-4 rounded-xl\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                    <span>{processingStatus}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"col-span-12 lg:col-span-4 space-y-6\">\n              <InstructionPanel \n                currentStep={currentStep}\n                analysis={analysisResult?.analysis}\n                project={currentProject}\n              />\n              <VisualizationPanel \n                components={components || []} // Now 'components' is properly defined\n              />\n              <GeneratedImagePanel\n                image={generatedImage}\n                isLoading={isGeneratingImage}\n                error={imageGenerationError}\n                title=\"Drone Visualization\"\n                progressStatus={processingStatus}\n              />\n            </div>\n          </div>\n        )}\n      </main>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-indigo-800\">\n      <header className=\"border-b border-white/10 backdrop-blur-md bg-black/20\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-2xl font-bold text-white\">\n              {currentProject?.project_name || 'Drone Assembly'}\n            </h1>\n            <div className=\"flex items-center gap-4\">\n              <button \n                onClick={toggleProjectManager}\n                className=\"text-indigo-200 hover:text-white transition-colors\"\n                title=\"Projects\"\n              >\n                <Folder className=\"w-6 h-6\" />\n              </button>\n              <button className=\"text-indigo-200 hover:text-white transition-colors\" title=\"History\">\n                <Clock className=\"w-6 h-6\" />\n              </button>\n              <button className=\"text-indigo-200 hover:text-white transition-colors\" title=\"Chat\">\n                <MessageSquare className=\"w-6 h-6\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      {renderContent()}\n\n      <div className=\"fixed bottom-6 right-6 flex flex-col gap-4\">\n        <VoiceInput \n          onVoiceInput={handleVoiceInput}\n          disabled={isProcessing || showProjectManager || showOnboarding}\n        />\n        <button \n          className=\"w-14 h-14 bg-indigo-600 hover:bg-indigo-700 rounded-full flex items-center justify-center text-white shadow-lg transition-colors\"\n          onClick={toggleProjectManager}\n          title={showProjectManager ? \"Back to Assembly\" : \"Switch Project\"}\n        >\n          <ArrowLeftRight className=\"w-6 h-6\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default MainInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}