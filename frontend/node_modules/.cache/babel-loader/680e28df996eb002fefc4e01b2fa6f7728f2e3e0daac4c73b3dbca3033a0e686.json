{"ast":null,"code":"var _jsxFileName = \"/Users/manmohan/Documents/drone_assembler/frontend/src/components/CameraFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport { Camera, Play, Pause, Timer, Bug as BugIcon } from 'lucide-react';\nimport SpeechHandler from './SpeechHandler';\nimport { processGeminiResponse } from '../utils/speechUtils';\nimport Logger from '../utils/logger';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CameraFeed = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  currentStep,\n  onAnalysisComplete\n}, ref) => {\n  _s();\n  const videoRef = useRef(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [autoMode, setAutoMode] = useState(false);\n  const [autoCounter, setAutoCounter] = useState(5);\n  const [debugInfo, setDebugInfo] = useState(null);\n  const [isTestingAPI, setIsTestingAPI] = useState(false);\n  const [speechText, setSpeechText] = useState('');\n  const [cameraError, setCameraError] = useState(null);\n  const analyzeIntervalRef = useRef(null);\n  const countdownIntervalRef = useRef(null);\n\n  // Expose methods to parent component\n  useImperativeHandle(ref, () => ({\n    captureFrame: () => captureFrame(),\n    handleVoiceInput: transcript => handleVoiceInput(transcript),\n    setSpeechText: text => {\n      Logger.info('Setting speech text from external component:', {\n        text: text ? text.slice(0, 100) + (text.length > 100 ? '...' : '') : 'empty'\n      });\n      setSpeechText('');\n      setTimeout(() => {\n        setSpeechText(text);\n      }, 50);\n    }\n  }));\n  useEffect(() => {\n    let mounted = true;\n    const initCamera = async () => {\n      try {\n        if (!videoRef.current) {\n          throw new Error('Video element not initialized');\n        }\n        Logger.info('Initializing camera');\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            facingMode: 'environment',\n            width: {\n              ideal: 1280\n            },\n            height: {\n              ideal: 720\n            }\n          }\n        });\n        if (mounted && videoRef.current) {\n          videoRef.current.srcObject = stream;\n          setCameraError(null);\n          Logger.info('Camera initialized successfully');\n        }\n      } catch (error) {\n        Logger.error('Error accessing camera:', error);\n        setCameraError(error.message);\n        setDebugInfo({\n          status: 'error',\n          message: 'Camera access denied: ' + error.message,\n          timestamp: new Date().toISOString()\n        });\n      }\n    };\n    initCamera();\n    return () => {\n      mounted = false;\n      stopCamera();\n      if (analyzeIntervalRef.current) clearInterval(analyzeIntervalRef.current);\n      if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n  const stopCamera = () => {\n    var _videoRef$current;\n    Logger.info('Stopping camera');\n    const stream = (_videoRef$current = videoRef.current) === null || _videoRef$current === void 0 ? void 0 : _videoRef$current.srcObject;\n    stream === null || stream === void 0 ? void 0 : stream.getTracks().forEach(track => track.stop());\n  };\n\n  // Update just the testGeminiConnection function in CameraFeed.js\n\n  const testGeminiConnection = async () => {\n    setIsTestingAPI(true);\n    try {\n      Logger.info('Testing Gemini API connection');\n      const response = await fetch('http://localhost:5003/api/assembly/gemini/test');\n\n      // Log the raw response first\n      const responseText = await response.text();\n      Logger.debug('Raw Gemini test response:', responseText);\n\n      // Try to parse as JSON\n      let data;\n      try {\n        data = JSON.parse(responseText);\n      } catch (e) {\n        throw new Error(`Failed to parse response as JSON: ${responseText}`);\n      }\n      Logger.info('Gemini API test response:', data);\n      const testMessage = data.success ? 'API connection successful' : 'API connection failed';\n      setSpeechText(testMessage);\n      setDebugInfo({\n        status: data.success ? 'success' : 'error',\n        message: data.success ? data.response : data.error,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      Logger.error('Gemini API test failed:', error);\n      setSpeechText('API test failed. Please check the console for details.');\n      setDebugInfo({\n        status: 'error',\n        message: `API Test Failed: ${error.message}`,\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setIsTestingAPI(false);\n    }\n  };\n  const captureFrame = () => {\n    Logger.debug('Capturing video frame');\n    const video = videoRef.current;\n    const canvas = document.createElement('canvas');\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL('image/jpeg', 0.8);\n  };\n  // frontend/src/components/CameraFeed.js - Updated handleVoiceInput function\n  // const handleVoiceInput = async (transcript) => {\n  //   if (isAnalyzing) {\n  //     Logger.warn('Analysis already in progress, skipping voice input');\n  //     return;\n  //   }\n\n  //   setIsAnalyzing(true);\n  //   try {\n  //     Logger.info('Processing voice input:', transcript);\n  //     const imageData = captureFrame();\n\n  //     Logger.info('Captured image for voice query, size:', imageData.length);\n\n  //     const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({\n  //         image: imageData,\n  //         query: transcript,\n  //         currentStep\n  //       })\n  //     });\n\n  //     if (!response.ok) {\n  //       throw new Error(`HTTP error! status: ${response.status}`);\n  //     }\n\n  //     const data = await response.json();\n  //     Logger.info('Voice query response:', data);\n\n  //     if (data.success) {\n  //       // Extract the text response for speech synthesis\n  //       let voiceResponse;\n\n  //       if (data.analysis.answer) {\n  //         voiceResponse = `${data.analysis.answer}`;\n  //         if (data.analysis.details) {\n  //           voiceResponse += ` ${data.analysis.details}`;\n  //         }\n  //       } else if (typeof data.analysis === 'string') {\n  //         // Handle case where response is a string\n  //         voiceResponse = data.analysis;\n  //       } else {\n  //         // Fallback\n  //         voiceResponse = 'Analysis completed successfully.';\n  //       }\n\n  //       // Add warnings if present\n  //       if (data.analysis.warnings && data.analysis.warnings.length > 0) {\n  //         voiceResponse += ' Warning: ' + data.analysis.warnings.join('. ');\n  //       }\n\n  //       Logger.info('Setting speech text for TTS:', voiceResponse.slice(0, 100) + '...');\n  //       setSpeechText(voiceResponse);\n\n  //       onAnalysisComplete(data);\n  //     } else {\n  //       throw new Error(data.error || 'Voice query failed');\n  //     }\n\n  //   } catch (error) {\n  //     Logger.error('Voice query error:', error);\n  //     setSpeechText('I encountered an error processing your question. Please try again.');\n  //     setDebugInfo({\n  //       status: 'error',\n  //       message: error.message,\n  //       timestamp: new Date().toISOString()\n  //     });\n  //   } finally {\n  //     setIsAnalyzing(false);\n  //   }\n  // };\n  const handleVoiceInput = async transcript => {\n    if (isAnalyzing) {\n      Logger.warn('Analysis already in progress, skipping voice input');\n      return;\n    }\n    setIsAnalyzing(true);\n    // Clear previous speech text before starting\n    setSpeechText('');\n    try {\n      Logger.info('Processing voice input:', transcript);\n      const imageData = captureFrame();\n\n      // Get user and project IDs\n      const userId = getUserId();\n      const projectId = getProjectId();\n      Logger.info('Captured image for voice query, size:', imageData.length);\n      const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData,\n          query: transcript,\n          currentStep,\n          userId,\n          projectId,\n          requestId: Date.now().toString() // Add unique request ID\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      Logger.info('Voice query response:', data);\n      if (data.success) {\n        // Clear any previous analysis\n        onAnalysisComplete(null);\n\n        // Process new response\n        const speechText = processGeminiResponse(data);\n        setSpeechText(speechText);\n\n        // Small timeout to ensure state updates don't conflict\n        setTimeout(() => {\n          onAnalysisComplete(data);\n        }, 50);\n      } else {\n        throw new Error(data.error || 'Voice query failed');\n      }\n    } catch (error) {\n      Logger.error('Voice query error:', error);\n      setSpeechText('I encountered an error processing your question. Please try again.');\n      onAnalysisComplete(null); // Clear on error\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  const startAutoMode = () => {\n    Logger.info('Starting auto analysis mode');\n    setAutoMode(true);\n    analyzeIntervalRef.current = setInterval(captureAndAnalyze, 5000);\n    countdownIntervalRef.current = setInterval(() => {\n      setAutoCounter(prev => prev === 1 ? 5 : prev - 1);\n    }, 1000);\n    captureAndAnalyze();\n  };\n  const stopAutoMode = () => {\n    Logger.info('Stopping auto analysis mode');\n    setAutoMode(false);\n    if (analyzeIntervalRef.current) clearInterval(analyzeIntervalRef.current);\n    if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\n    setAutoCounter(5);\n  };\n\n  // 5. Fix in CameraFeed.js - captureAndAnalyze function\n  // Ensure user and project IDs are passed to backend\n\n  // Enhanced captureAndAnalyze function for CameraFeed.js\n\n  const captureAndAnalyze = async () => {\n    if (isAnalyzing) {\n      Logger.warn('Analysis already in progress, skipping');\n      return;\n    }\n    setIsAnalyzing(true);\n    // Clear previous speech text and analysis results before starting new analysis\n    setSpeechText('');\n    try {\n      var _data$analysis, _data$analysis2, _data$analysis3, _data$analysis4;\n      Logger.info('Starting image analysis', {\n        currentStep\n      });\n      const imageData = captureFrame();\n\n      // Get current user and project IDs\n      const userId = getUserId();\n      const projectId = getProjectId();\n      Logger.info('Sending analysis request', {\n        userId,\n        projectId,\n        currentStep,\n        hasImage: !!imageData,\n        timestamp: new Date().toISOString()\n      });\n      const response = await fetch(`http://localhost:5003/api/assembly/gemini/validate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData,\n          currentStep,\n          userId,\n          projectId,\n          requestId: Date.now().toString() // Add unique request ID\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Read response once as text to debug\n      const responseText = await response.clone().text();\n      console.log(\"[DEBUG] Raw API response:\", responseText.substring(0, 500) + '...');\n      const data = await response.json();\n      console.log(\"[DEBUG] Full analysis response:\", data);\n      console.log(\"[DEBUG] Components in response:\", ((_data$analysis = data.analysis) === null || _data$analysis === void 0 ? void 0 : _data$analysis.identifiedComponents) || ((_data$analysis2 = data.analysis) === null || _data$analysis2 === void 0 ? void 0 : _data$analysis2.identifiedParts) || []);\n      Logger.info('Received analysis response:', {\n        success: data.success,\n        hasComponents: !!((_data$analysis3 = data.analysis) !== null && _data$analysis3 !== void 0 && _data$analysis3.identifiedComponents) || !!((_data$analysis4 = data.analysis) !== null && _data$analysis4 !== void 0 && _data$analysis4.identifiedParts),\n        timestamp: new Date().toISOString(),\n        meta: data.meta\n      });\n      if (data.success) {\n        // Process the response into a human-readable format\n        const speechText = processGeminiResponse(data);\n        setSpeechText(speechText);\n\n        // Clear any old analysis before setting the new one\n        onAnalysisComplete(null); // Clear first\n\n        // Set the new analysis with a small delay to ensure state updates don't conflict\n        setTimeout(() => {\n          onAnalysisComplete(data);\n        }, 50);\n      } else {\n        throw new Error(data.error || 'Analysis failed');\n      }\n    } catch (error) {\n      Logger.error('Analysis error:', error);\n      setSpeechText('I encountered an error while analyzing the image. Please try again.');\n      onAnalysisComplete(null); // Clear on error\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-black/30 backdrop-blur-sm rounded-2xl p-4 border border-white/10\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aspect-video bg-black/40 rounded-xl overflow-hidden relative\",\n      children: [cameraError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 flex items-center justify-center bg-red-900/20\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-400 mb-2\",\n            children: \"Camera Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-white text-sm\",\n            children: cameraError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => window.location.reload(),\n            className: \"mt-4 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors\",\n            children: \"Retry Camera Access\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        className: \"w-full h-full object-cover\",\n        autoPlay: true,\n        playsInline: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), isAnalyzing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 bg-black/50 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-white\",\n          children: \"Analyzing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), autoMode && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 right-4 bg-black/70 rounded-lg px-3 py-1.5 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Timer, {\n          className: \"w-4 h-4 text-purple-400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white\",\n          children: [\"Next scan in: \", autoCounter, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-semibold text-white\",\n        children: \"Live Assembly View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: testGeminiConnection,\n          disabled: isTestingAPI,\n          className: \"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(BugIcon, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 11\n          }, this), isTestingAPI ? 'Testing...' : 'Test API']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: autoMode ? stopAutoMode : startAutoMode,\n          className: `${autoMode ? 'bg-red-600' : 'bg-green-600'} hover:opacity-90 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2`,\n          children: autoMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Pause, {\n              className: \"w-4 h-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this), \"Stop Auto\"]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Play, {\n              className: \"w-4 h-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 15\n            }, this), \"Start Auto\"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: captureAndAnalyze,\n          disabled: isAnalyzing || autoMode,\n          className: `bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 ${isAnalyzing || autoMode ? 'opacity-50 cursor-not-allowed' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(Camera, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 11\n          }, this), \"Analyze\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 5\n    }, this), debugInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mt-4 p-4 rounded-lg ${debugInfo.status === 'success' ? 'bg-green-900/20' : 'bg-red-900/20'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-start\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-white font-medium\",\n          children: \"Debug Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xs text-gray-400\",\n          children: debugInfo.timestamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"mt-2 text-sm font-mono whitespace-pre-wrap text-gray-200\",\n        children: debugInfo.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SpeechHandler, {\n      text: speechText,\n      onSpeechEnd: () => Logger.info('Speech synthesis completed')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 3\n  }, this);\n}, \"ElnNzBpHeMpX3JSYyoUCRCgzTJQ=\")), \"ElnNzBpHeMpX3JSYyoUCRCgzTJQ=\");\n_c2 = CameraFeed;\nCameraFeed.displayName = 'CameraFeed';\nexport default CameraFeed;\nvar _c, _c2;\n$RefreshReg$(_c, \"CameraFeed$forwardRef\");\n$RefreshReg$(_c2, \"CameraFeed\");","map":{"version":3,"names":["React","useEffect","useRef","useState","forwardRef","useImperativeHandle","Camera","Play","Pause","Timer","Bug","BugIcon","SpeechHandler","processGeminiResponse","Logger","getUserId","getProjectId","jsxDEV","_jsxDEV","Fragment","_Fragment","CameraFeed","_s","_c","currentStep","onAnalysisComplete","ref","videoRef","isAnalyzing","setIsAnalyzing","autoMode","setAutoMode","autoCounter","setAutoCounter","debugInfo","setDebugInfo","isTestingAPI","setIsTestingAPI","speechText","setSpeechText","cameraError","setCameraError","analyzeIntervalRef","countdownIntervalRef","captureFrame","handleVoiceInput","transcript","text","info","slice","length","setTimeout","mounted","initCamera","current","Error","stream","navigator","mediaDevices","getUserMedia","video","facingMode","width","ideal","height","srcObject","error","message","status","timestamp","Date","toISOString","stopCamera","clearInterval","_videoRef$current","getTracks","forEach","track","stop","testGeminiConnection","response","fetch","responseText","debug","data","JSON","parse","e","testMessage","success","canvas","document","createElement","videoWidth","videoHeight","context","getContext","drawImage","toDataURL","warn","imageData","userId","projectId","method","headers","body","stringify","image","query","requestId","now","toString","ok","json","startAutoMode","setInterval","captureAndAnalyze","prev","stopAutoMode","_data$analysis","_data$analysis2","_data$analysis3","_data$analysis4","hasImage","clone","console","log","substring","analysis","identifiedComponents","identifiedParts","hasComponents","meta","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","autoPlay","playsInline","muted","disabled","onSpeechEnd","_c2","displayName","$RefreshReg$"],"sources":["/Users/manmohan/Documents/drone_assembler/frontend/src/components/CameraFeed.js"],"sourcesContent":["import React, { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport { Camera, Play, Pause, Timer, Bug as BugIcon } from 'lucide-react';\nimport SpeechHandler from './SpeechHandler';\nimport { processGeminiResponse } from '../utils/speechUtils';\nimport Logger from '../utils/logger';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\n\nconst CameraFeed = forwardRef(({ currentStep, onAnalysisComplete }, ref) => {\n  const videoRef = useRef(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [autoMode, setAutoMode] = useState(false);\n  const [autoCounter, setAutoCounter] = useState(5);\n  const [debugInfo, setDebugInfo] = useState(null);\n  const [isTestingAPI, setIsTestingAPI] = useState(false);\n  const [speechText, setSpeechText] = useState('');\n  const [cameraError, setCameraError] = useState(null);\n  const analyzeIntervalRef = useRef(null);\n  const countdownIntervalRef = useRef(null);\n\n  // Expose methods to parent component\n  useImperativeHandle(ref, () => ({\n    captureFrame: () => captureFrame(),\n    handleVoiceInput: (transcript) => handleVoiceInput(transcript),\n    setSpeechText: (text) => {\n      Logger.info('Setting speech text from external component:', {\n        text: text ? text.slice(0, 100) + (text.length > 100 ? '...' : '') : 'empty'\n      });\n      setSpeechText('');\n      setTimeout(() => {\n        setSpeechText(text);\n      }, 50);\n    }\n  }));\n\n  useEffect(() => {\n    let mounted = true;\n    \n    const initCamera = async () => {\n      try {\n        if (!videoRef.current) {\n          throw new Error('Video element not initialized');\n        }\n        \n        Logger.info('Initializing camera');\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          video: { \n            facingMode: 'environment',\n            width: { ideal: 1280 },\n            height: { ideal: 720 }\n          } \n        });\n        \n        if (mounted && videoRef.current) {\n          videoRef.current.srcObject = stream;\n          setCameraError(null);\n          Logger.info('Camera initialized successfully');\n        }\n      } catch (error) {\n        Logger.error('Error accessing camera:', error);\n        setCameraError(error.message);\n        setDebugInfo({\n          status: 'error',\n          message: 'Camera access denied: ' + error.message,\n          timestamp: new Date().toISOString()\n        });\n      }\n    };\n\n    initCamera();\n\n    return () => {\n      mounted = false;\n      stopCamera();\n      if (analyzeIntervalRef.current) clearInterval(analyzeIntervalRef.current);\n      if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n\n  const stopCamera = () => {\n    Logger.info('Stopping camera');\n    const stream = videoRef.current?.srcObject;\n    stream?.getTracks().forEach(track => track.stop());\n  };\n\n// Update just the testGeminiConnection function in CameraFeed.js\n\nconst testGeminiConnection = async () => {\n    setIsTestingAPI(true);\n    try {\n      Logger.info('Testing Gemini API connection');\n      \n      const response = await fetch('http://localhost:5003/api/assembly/gemini/test');\n      \n      // Log the raw response first\n      const responseText = await response.text();\n      Logger.debug('Raw Gemini test response:', responseText);\n\n      // Try to parse as JSON\n      let data;\n      try {\n        data = JSON.parse(responseText);\n      } catch (e) {\n        throw new Error(`Failed to parse response as JSON: ${responseText}`);\n      }\n\n      Logger.info('Gemini API test response:', data);\n      \n      const testMessage = data.success ? 'API connection successful' : 'API connection failed';\n      setSpeechText(testMessage);\n      \n      setDebugInfo({\n        status: data.success ? 'success' : 'error',\n        message: data.success ? data.response : data.error,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      Logger.error('Gemini API test failed:', error);\n      setSpeechText('API test failed. Please check the console for details.');\n      setDebugInfo({\n        status: 'error',\n        message: `API Test Failed: ${error.message}`,\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setIsTestingAPI(false);\n    }\n  };\n  \n  const captureFrame = () => {\n    Logger.debug('Capturing video frame');\n    const video = videoRef.current;\n    const canvas = document.createElement('canvas');\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL('image/jpeg', 0.8);\n  };\n// frontend/src/components/CameraFeed.js - Updated handleVoiceInput function\n// const handleVoiceInput = async (transcript) => {\n//   if (isAnalyzing) {\n//     Logger.warn('Analysis already in progress, skipping voice input');\n//     return;\n//   }\n  \n//   setIsAnalyzing(true);\n//   try {\n//     Logger.info('Processing voice input:', transcript);\n//     const imageData = captureFrame();\n    \n//     Logger.info('Captured image for voice query, size:', imageData.length);\n    \n//     const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({\n//         image: imageData,\n//         query: transcript,\n//         currentStep\n//       })\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     const data = await response.json();\n//     Logger.info('Voice query response:', data);\n    \n//     if (data.success) {\n//       // Extract the text response for speech synthesis\n//       let voiceResponse;\n      \n//       if (data.analysis.answer) {\n//         voiceResponse = `${data.analysis.answer}`;\n//         if (data.analysis.details) {\n//           voiceResponse += ` ${data.analysis.details}`;\n//         }\n//       } else if (typeof data.analysis === 'string') {\n//         // Handle case where response is a string\n//         voiceResponse = data.analysis;\n//       } else {\n//         // Fallback\n//         voiceResponse = 'Analysis completed successfully.';\n//       }\n      \n//       // Add warnings if present\n//       if (data.analysis.warnings && data.analysis.warnings.length > 0) {\n//         voiceResponse += ' Warning: ' + data.analysis.warnings.join('. ');\n//       }\n      \n//       Logger.info('Setting speech text for TTS:', voiceResponse.slice(0, 100) + '...');\n//       setSpeechText(voiceResponse);\n      \n//       onAnalysisComplete(data);\n//     } else {\n//       throw new Error(data.error || 'Voice query failed');\n//     }\n\n//   } catch (error) {\n//     Logger.error('Voice query error:', error);\n//     setSpeechText('I encountered an error processing your question. Please try again.');\n//     setDebugInfo({\n//       status: 'error',\n//       message: error.message,\n//       timestamp: new Date().toISOString()\n//     });\n//   } finally {\n//     setIsAnalyzing(false);\n//   }\n// };\nconst handleVoiceInput = async (transcript) => {\n  if (isAnalyzing) {\n    Logger.warn('Analysis already in progress, skipping voice input');\n    return;\n  }\n  \n  setIsAnalyzing(true);\n  // Clear previous speech text before starting\n  setSpeechText('');\n  \n  try {\n    Logger.info('Processing voice input:', transcript);\n    const imageData = captureFrame();\n    \n    // Get user and project IDs\n    const userId = getUserId();\n    const projectId = getProjectId();\n    \n    Logger.info('Captured image for voice query, size:', imageData.length);\n    \n    const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        image: imageData,\n        query: transcript,\n        currentStep,\n        userId,\n        projectId,\n        requestId: Date.now().toString() // Add unique request ID\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    Logger.info('Voice query response:', data);\n    \n    if (data.success) {\n      // Clear any previous analysis\n      onAnalysisComplete(null);\n      \n      // Process new response\n      const speechText = processGeminiResponse(data);\n      setSpeechText(speechText);\n      \n      // Small timeout to ensure state updates don't conflict\n      setTimeout(() => {\n        onAnalysisComplete(data);\n      }, 50);\n    } else {\n      throw new Error(data.error || 'Voice query failed');\n    }\n\n  } catch (error) {\n    Logger.error('Voice query error:', error);\n    setSpeechText('I encountered an error processing your question. Please try again.');\n    onAnalysisComplete(null); // Clear on error\n  } finally {\n    setIsAnalyzing(false);\n  }\n};\n  const startAutoMode = () => {\n    Logger.info('Starting auto analysis mode');\n    setAutoMode(true);\n    analyzeIntervalRef.current = setInterval(captureAndAnalyze, 5000);\n    countdownIntervalRef.current = setInterval(() => {\n      setAutoCounter((prev) => (prev === 1 ? 5 : prev - 1));\n    }, 1000);\n    captureAndAnalyze();\n  };\n\n  const stopAutoMode = () => {\n    Logger.info('Stopping auto analysis mode');\n    setAutoMode(false);\n    if (analyzeIntervalRef.current) clearInterval(analyzeIntervalRef.current);\n    if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\n    setAutoCounter(5);\n  };\n\n// 5. Fix in CameraFeed.js - captureAndAnalyze function\n// Ensure user and project IDs are passed to backend\n\n// Enhanced captureAndAnalyze function for CameraFeed.js\n\nconst captureAndAnalyze = async () => {\n  if (isAnalyzing) {\n    Logger.warn('Analysis already in progress, skipping');\n    return;\n  }\n  \n  setIsAnalyzing(true);\n  // Clear previous speech text and analysis results before starting new analysis\n  setSpeechText('');\n  \n  try {\n    Logger.info('Starting image analysis', { currentStep });\n    const imageData = captureFrame();\n    \n    // Get current user and project IDs\n    const userId = getUserId();\n    const projectId = getProjectId();\n    \n    Logger.info('Sending analysis request', { \n      userId, \n      projectId,\n      currentStep,\n      hasImage: !!imageData,\n      timestamp: new Date().toISOString()\n    });\n    \n    const response = await fetch(`http://localhost:5003/api/assembly/gemini/validate`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        image: imageData,\n        currentStep,\n        userId,\n        projectId,\n        requestId: Date.now().toString() // Add unique request ID\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    // Read response once as text to debug\n    const responseText = await response.clone().text();\n    console.log(\"[DEBUG] Raw API response:\", responseText.substring(0, 500) + '...');\n    \n    const data = await response.json();\n    \n    console.log(\"[DEBUG] Full analysis response:\", data);\n    console.log(\"[DEBUG] Components in response:\", \n      data.analysis?.identifiedComponents || data.analysis?.identifiedParts || []);\n    \n    Logger.info('Received analysis response:', { \n      success: data.success,\n      hasComponents: !!data.analysis?.identifiedComponents || !!data.analysis?.identifiedParts,\n      timestamp: new Date().toISOString(),\n      meta: data.meta\n    });\n    \n    if (data.success) {\n      // Process the response into a human-readable format\n      const speechText = processGeminiResponse(data);\n      setSpeechText(speechText);\n      \n      // Clear any old analysis before setting the new one\n      onAnalysisComplete(null); // Clear first\n      \n      // Set the new analysis with a small delay to ensure state updates don't conflict\n      setTimeout(() => {\n        onAnalysisComplete(data);\n      }, 50);\n    } else {\n      throw new Error(data.error || 'Analysis failed');\n    }\n\n  } catch (error) {\n    Logger.error('Analysis error:', error);\n    setSpeechText('I encountered an error while analyzing the image. Please try again.');\n    onAnalysisComplete(null); // Clear on error\n  } finally {\n    setIsAnalyzing(false);\n  }\n};\nreturn (\n  <div className=\"bg-black/30 backdrop-blur-sm rounded-2xl p-4 border border-white/10\">\n    <div className=\"aspect-video bg-black/40 rounded-xl overflow-hidden relative\">\n      {cameraError ? (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-red-900/20\">\n          <div className=\"text-center p-4\">\n            <p className=\"text-red-400 mb-2\">Camera Error</p>\n            <p className=\"text-white text-sm\">{cameraError}</p>\n            <button \n              onClick={() => window.location.reload()}\n              className=\"mt-4 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors\"\n            >\n              Retry Camera Access\n            </button>\n          </div>\n        </div>\n      ) : (\n        <video \n          ref={videoRef} \n          className=\"w-full h-full object-cover\" \n          autoPlay \n          playsInline \n          muted \n        />\n      )}\n      \n      {isAnalyzing && (\n        <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n          <div className=\"text-white\">Analyzing...</div>\n        </div>\n      )}\n      \n      {autoMode && (\n        <div className=\"absolute top-4 right-4 bg-black/70 rounded-lg px-3 py-1.5 flex items-center gap-2\">\n          <Timer className=\"w-4 h-4 text-purple-400\" />\n          <span className=\"text-white\">Next scan in: {autoCounter}s</span>\n        </div>\n      )}\n    </div>\n    \n    <div className=\"mt-4 flex justify-between items-center\">\n      <h2 className=\"text-lg font-semibold text-white\">Live Assembly View</h2>\n      <div className=\"flex gap-2\">\n        <button\n          onClick={testGeminiConnection}\n          disabled={isTestingAPI}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2\"\n        >\n          <BugIcon className=\"w-4 h-4\" />\n          {isTestingAPI ? 'Testing...' : 'Test API'}\n        </button>\n\n        <button\n          onClick={autoMode ? stopAutoMode : startAutoMode}\n          className={`${\n            autoMode ? 'bg-red-600' : 'bg-green-600'\n          } hover:opacity-90 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2`}\n        >\n          {autoMode ? (\n            <>\n              <Pause className=\"w-4 h-4\" />\n              Stop Auto\n            </>\n          ) : (\n            <>\n              <Play className=\"w-4 h-4\" />\n              Start Auto\n            </>\n          )}\n        </button>\n        \n        <button\n          onClick={captureAndAnalyze}\n          disabled={isAnalyzing || autoMode}\n          className={`bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2 ${\n            (isAnalyzing || autoMode) ? 'opacity-50 cursor-not-allowed' : ''\n          }`}\n        >\n          <Camera className=\"w-4 h-4\" />\n          Analyze\n        </button>\n      </div>\n    </div>\n\n    {debugInfo && (\n      <div className={`mt-4 p-4 rounded-lg ${\n        debugInfo.status === 'success' ? 'bg-green-900/20' : 'bg-red-900/20'\n      }`}>\n        <div className=\"flex justify-between items-start\">\n          <h3 className=\"text-white font-medium\">Debug Info</h3>\n          <span className=\"text-xs text-gray-400\">{debugInfo.timestamp}</span>\n        </div>\n        <pre className=\"mt-2 text-sm font-mono whitespace-pre-wrap text-gray-200\">\n          {debugInfo.message}\n        </pre>\n      </div>\n    )}\n\n    <SpeechHandler \n      text={speechText}\n      onSpeechEnd={() => Logger.info('Speech synthesis completed')}\n    />\n  </div>\n);\n});\n\nCameraFeed.displayName = 'CameraFeed';\n\nexport default CameraFeed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}