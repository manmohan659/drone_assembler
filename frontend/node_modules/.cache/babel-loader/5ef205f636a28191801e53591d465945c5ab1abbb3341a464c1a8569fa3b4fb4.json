{"ast":null,"code":"var _jsxFileName = \"/Users/manmohan/Documents/drone_assembler/frontend/src/components/MainInterface.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/MainInterface.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Clock, MessageSquare, Folder, ArrowLeftRight } from 'lucide-react';\nimport CameraFeed from './CameraFeed';\nimport InstructionPanel from './InstructionPanel';\nimport VisualizationPanel from './VisualizationPanel';\nimport VoiceInput from './VoiceInput';\nimport ProjectManager from './ProjectManager';\nimport NewUserOnboarding from './NewUserOnboarding';\nimport Logger from '../utils/logger';\nimport { processGeminiResponse } from '../utils/speechUtils';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport { useProject } from '../contexts/ProjectContext';\nimport GeneratedImagePanel from './GeneratedImagePanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainInterface = () => {\n  _s();\n  const [analysisResult, setAnalysisResult] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStatus, setProcessingStatus] = useState(null);\n  const [showProjectManager, setShowProjectManager] = useState(false);\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const cameraFeedRef = useRef();\n  const [generatedImage, setGeneratedImage] = useState(null);\n  const [isGeneratingImage, setIsGeneratingImage] = useState(false);\n  const [imageGenerationError, setImageGenerationError] = useState(null);\n  const {\n    currentProject,\n    isLoading: projectLoading,\n    loadActiveProject,\n    setActiveProject,\n    addComponents,\n    addCompletedStep,\n    components // Add this line to fix the error\n  } = useProject();\n  useEffect(() => {\n    const projectId = getProjectId();\n    if (!projectId) {\n      setShowOnboarding(true);\n    }\n  }, []);\n  const currentStep = (currentProject === null || currentProject === void 0 ? void 0 : currentProject.current_step) || 1;\n  const isVisualizationRequest = transcript => {\n    // Expanded list of triggers for image generation/visualization\n    const visualizationTriggers = [/create.*image/i, /generate.*image/i, /show.*visual/i, /create.*visual/i, /visualize/i, /draw.*drone/i, /make.*picture/i, /create.*picture/i, /show.*what.*looks.*like/i, /picture.*of/i, /image.*of/i, /illustration.*of/i, /visualize.*the.*drone/i, /show.*me.*what/i, /show.*me.*a.*picture/i, /show.*me.*an.*image/i, /can.*you.*draw/i, /can.*you.*show.*me/i, /generate.*a.*picture/i, /create.*a.*representation/i, /make.*an.*image/i];\n    const result = visualizationTriggers.some(trigger => trigger.test(transcript));\n    console.log(\"[DEBUG] Visualization request check:\", transcript, result);\n    return result;\n  };\n  const handleAnalysisComplete = result => {\n    var _result$analysis, _result$analysis2, _result$analysis5;\n    if (!result) {\n      setAnalysisResult(null);\n      setProcessingStatus(null);\n      return;\n    }\n    setAnalysisResult(result);\n    console.log(\"[DEBUG] Analysis result:\", result);\n    console.log(\"[DEBUG] Current project:\", currentProject);\n    console.log(\"[DEBUG] Current components:\", components);\n    Logger.info('Analysis completed', {\n      hasData: !!result,\n      hasAnalysis: !!(result !== null && result !== void 0 && result.analysis),\n      identifiedComponents: !!(result !== null && result !== void 0 && (_result$analysis = result.analysis) !== null && _result$analysis !== void 0 && _result$analysis.identifiedComponents),\n      identifiedParts: !!(result !== null && result !== void 0 && (_result$analysis2 = result.analysis) !== null && _result$analysis2 !== void 0 && _result$analysis2.identifiedParts),\n      timestamp: new Date().toISOString()\n    });\n    if (currentProject) {\n      var _result$analysis3, _result$analysis4;\n      let componentsToStore = [];\n\n      // Check in both locations the backend might put component data\n      if (result !== null && result !== void 0 && (_result$analysis3 = result.analysis) !== null && _result$analysis3 !== void 0 && _result$analysis3.identifiedComponents && Array.isArray(result.analysis.identifiedComponents)) {\n        componentsToStore = result.analysis.identifiedComponents;\n        console.log(\"[DEBUG] Found identifiedComponents:\", componentsToStore);\n      } else if (result !== null && result !== void 0 && (_result$analysis4 = result.analysis) !== null && _result$analysis4 !== void 0 && _result$analysis4.identifiedParts && Array.isArray(result.analysis.identifiedParts)) {\n        componentsToStore = result.analysis.identifiedParts;\n        console.log(\"[DEBUG] Found identifiedParts:\", componentsToStore);\n      } else {\n        // Debug the actual structure received to understand what's happening\n        console.log(\"[DEBUG] No identifiedComponents or identifiedParts arrays found in:\", result.analysis);\n      }\n\n      // Add special check for object structure\n      if (componentsToStore.length === 0 && typeof result.analysis === 'object') {\n        // Try to extract component data from other possible fields\n        const possibleFields = Object.keys(result.analysis).filter(key => Array.isArray(result.analysis[key]) && key.toLowerCase().includes('component'));\n        if (possibleFields.length > 0) {\n          console.log(\"[DEBUG] Found alternative component fields:\", possibleFields);\n          componentsToStore = result.analysis[possibleFields[0]];\n        }\n      }\n\n      // Enhanced validation of component data\n      if (componentsToStore.length > 0) {\n        // Filter out invalid components\n        const validComponents = componentsToStore.filter(comp => comp && (typeof comp === 'string' || typeof comp === 'object' && comp.name));\n        if (validComponents.length > 0) {\n          console.log(\"[DEBUG] Valid components to store:\", validComponents);\n          storeIdentifiedComponents(validComponents);\n        } else {\n          console.log(\"[DEBUG] No valid components after filtering:\", componentsToStore);\n        }\n      } else {\n        console.log(\"[DEBUG] No components to store found in result\");\n      }\n    } else {\n      console.log(\"[DEBUG] No current project available\");\n    }\n    if (result !== null && result !== void 0 && (_result$analysis5 = result.analysis) !== null && _result$analysis5 !== void 0 && _result$analysis5.canProceed) {\n      const stepInfo = {\n        stepNumber: currentStep,\n        title: `Step ${currentStep} completed`,\n        timestamp: new Date().toISOString(),\n        details: result.analysis.feedback || 'Step completed successfully'\n      };\n      addCompletedStep(stepInfo);\n    }\n  };\n  // Fixed storeIdentifiedComponents function for MainInterface.js\n  const storeIdentifiedComponents = async components => {\n    if (!components || !Array.isArray(components) || components.length === 0) {\n      console.log(\"[DEBUG] Invalid components to store:\", components);\n      return;\n    }\n    console.log(\"[DEBUG] Calling addComponents with:\", components);\n    try {\n      Logger.info('Storing identified components', {\n        count: components.length\n      });\n      const result = await addComponents(components); // Capture the return value\n      console.log(\"[DEBUG] addComponents returned:\", result);\n    } catch (error) {\n      Logger.error('Error storing components', error);\n      console.error(\"[DEBUG] Error in storeIdentifiedComponents:\", error);\n    }\n  };\n\n  // Updated image generation function with progress tracking\n  const generateStableDiffusionImage = async prompt => {\n    try {\n      var _cameraFeedRef$curren;\n      setIsGeneratingImage(true);\n      setImageGenerationError(null);\n      Logger.info('Starting image generation', {\n        prompt\n      });\n      console.log(\"[DEBUG] Image generation prompt:\", prompt);\n\n      // First check if the service is running\n      try {\n        const healthCheck = await fetch('http://localhost:9999', {\n          method: 'GET',\n          signal: AbortSignal.timeout(2000)\n        });\n        if (healthCheck.ok) {\n          console.log(\"[DEBUG] Image service is running\");\n        }\n      } catch (e) {\n        console.log(\"[DEBUG] Service health check failed, attempting to generate anyway\");\n      }\n\n      // Start the async image generation\n      const response = await fetch('http://localhost:9999/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: prompt,\n          userId: getUserId(),\n          projectId: getProjectId(),\n          async: true // Enable async processing\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to start image generation: ${response.status} ${response.statusText}`);\n      }\n\n      // Get the task info from the response\n      const taskInfo = await response.json();\n      console.log(\"[DEBUG] Image generation task started:\", taskInfo);\n      if (!taskInfo.task_id) {\n        throw new Error(\"No task ID returned from image generation service\");\n      }\n\n      // Poll for progress updates\n      const taskId = taskInfo.task_id;\n      let isComplete = false;\n      let progressUpdates = 0;\n\n      // Add success message to speech about generation starting\n      if ((_cameraFeedRef$curren = cameraFeedRef.current) !== null && _cameraFeedRef$curren !== void 0 && _cameraFeedRef$curren.setSpeechText) {\n        const currentText = cameraFeedRef.current.speechText || '';\n        cameraFeedRef.current.setSpeechText(`${currentText} I'm generating a visualization based on your request. This may take a moment.`);\n      }\n\n      // Start polling for progress\n      while (!isComplete) {\n        try {\n          await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second between polls\n\n          const progressResponse = await fetch(`http://localhost:9999/progress/${taskId}`, {\n            signal: AbortSignal.timeout(5000)\n          });\n          if (!progressResponse.ok) {\n            progressUpdates++;\n            if (progressUpdates > 10) {\n              throw new Error(\"Too many failed progress updates\");\n            }\n            continue;\n          }\n          const progress = await progressResponse.json();\n          console.log(\"[DEBUG] Image generation progress:\", progress);\n\n          // Update UI with progress info\n          setProcessingStatus(`Generating image: ${progress.progress}% - ${progress.message}`);\n\n          // Check if complete\n          if (progress.status === \"completed\") {\n            var _cameraFeedRef$curren2;\n            isComplete = true;\n\n            // Fetch the final image\n            const resultResponse = await fetch(`http://localhost:9999/result/${taskId}`);\n            if (!resultResponse.ok) {\n              throw new Error(\"Failed to fetch completed image\");\n            }\n\n            // Clean up any existing object URL\n            if (generatedImage) {\n              URL.revokeObjectURL(generatedImage);\n            }\n            const blob = await resultResponse.blob();\n            const imageUrl = URL.createObjectURL(blob);\n            setGeneratedImage(imageUrl);\n            console.log(\"[DEBUG] Image generation successful, URL created:\", imageUrl);\n\n            // Add success message to speech\n            if ((_cameraFeedRef$curren2 = cameraFeedRef.current) !== null && _cameraFeedRef$curren2 !== void 0 && _cameraFeedRef$curren2.setSpeechText) {\n              const currentText = cameraFeedRef.current.speechText || '';\n              cameraFeedRef.current.setSpeechText(`${currentText} I've completed generating the visualization based on your request.`);\n            }\n          }\n        } catch (pollError) {\n          console.error(\"[DEBUG] Error polling for progress:\", pollError);\n          progressUpdates++;\n\n          // If we've had many failed updates, but the task might still be running,\n          // we'll just wait and try the final result after a timeout\n          if (progressUpdates > 10) {\n            console.log(\"[DEBUG] Too many failed progress updates, waiting for final result\");\n            break;\n          }\n        }\n      }\n\n      // If we exited the loop without getting a final image, try one last time\n      if (!generatedImage) {\n        try {\n          console.log(\"[DEBUG] Attempting final result fetch\");\n          const finalResponse = await fetch(`http://localhost:9999/result/${taskId}`);\n          if (finalResponse.ok) {\n            const blob = await finalResponse.blob();\n            const imageUrl = URL.createObjectURL(blob);\n            setGeneratedImage(imageUrl);\n            console.log(\"[DEBUG] Final image fetch successful\");\n          } else {\n            throw new Error(\"Failed to fetch final image\");\n          }\n        } catch (finalError) {\n          console.error(\"[DEBUG] Error in final image fetch:\", finalError);\n          throw new Error(\"Failed to retrieve generated image\");\n        }\n      }\n    } catch (error) {\n      var _cameraFeedRef$curren3;\n      console.error(\"[DEBUG] Image generation error:\", error);\n      if (error.name === 'AbortError') {\n        setImageGenerationError('Image generation timed out. Please try again.');\n      } else {\n        setImageGenerationError(`Error: ${error.message}`);\n      }\n      Logger.error('Error generating image:', error);\n\n      // Add error message to speech\n      if ((_cameraFeedRef$curren3 = cameraFeedRef.current) !== null && _cameraFeedRef$curren3 !== void 0 && _cameraFeedRef$curren3.setSpeechText) {\n        const currentText = cameraFeedRef.current.speechText || '';\n        cameraFeedRef.current.setSpeechText(`${currentText} I encountered an error while trying to generate the visualization.`);\n      }\n    } finally {\n      setProcessingStatus(null);\n      setIsGeneratingImage(false);\n    }\n  };\n  useEffect(() => {\n    return () => {\n      // Clean up any object URLs when component unmounts\n      if (generatedImage) {\n        URL.revokeObjectURL(generatedImage);\n      }\n    };\n  }, []);\n  const handleVoiceInput = async (transcript, statusCallback) => {\n    if (!cameraFeedRef.current) {\n      Logger.error('Camera feed not initialized');\n      statusCallback('Error: Camera not ready');\n      return;\n    }\n    setAnalysisResult(null);\n    setIsProcessing(true);\n    Logger.info('Processing voice input:', transcript);\n    console.log(\"[DEBUG] Processing voice input:\", transcript);\n    setProcessingStatus('Capturing image...');\n    try {\n      const imageData = cameraFeedRef.current.captureFrame();\n      if (!imageData) {\n        throw new Error('Failed to capture camera frame');\n      }\n\n      // Check if this is a visualization/image generation request\n      const shouldGenerateImage = isVisualizationRequest(transcript);\n      console.log(\"[DEBUG] Should generate image:\", shouldGenerateImage);\n      Logger.info('Image captured successfully');\n      setProcessingStatus('Image captured ✅ Sending to API...');\n      statusCallback('Image captured ✅ Sending to API...');\n      const userId = getUserId();\n      const projectId = getProjectId();\n\n      // If it's an image generation request, proceed with it directly\n      if (shouldGenerateImage) {\n        statusCallback('Image request detected ✅ Generating visualization...');\n        console.log(\"[DEBUG] Image generation request detected, processing directly\");\n\n        // Still send to Gemini for component analysis\n        const geminiResponse = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            image: imageData,\n            query: transcript,\n            currentStep,\n            userId,\n            projectId,\n            requestId: Date.now().toString()\n          })\n        });\n        let components = [];\n\n        // Try to extract components if Gemini response is successful\n        if (geminiResponse.ok) {\n          const data = await geminiResponse.json();\n          setAnalysisResult(data);\n          if (data.success && data.analysis) {\n            var _cameraFeedRef$curren4;\n            // Extract components from the analysis\n            if (data.analysis.identifiedComponents && Array.isArray(data.analysis.identifiedComponents)) {\n              components = data.analysis.identifiedComponents;\n            } else if (data.analysis.identifiedParts && Array.isArray(data.analysis.identifiedParts)) {\n              components = data.analysis.identifiedParts;\n            }\n\n            // Process Gemini response for speech\n            const processedResponse = processGeminiResponse(data);\n            if ((_cameraFeedRef$curren4 = cameraFeedRef.current) !== null && _cameraFeedRef$curren4 !== void 0 && _cameraFeedRef$curren4.setSpeechText) {\n              cameraFeedRef.current.setSpeechText('');\n              setTimeout(() => {\n                cameraFeedRef.current.setSpeechText(`${processedResponse} I'll generate a visualization of that for you.`);\n              }, 100);\n            }\n          }\n        }\n\n        // Clean transcript to form a better prompt for image generation\n        let imagePrompt = transcript.replace(/can you /i, '').replace(/please /i, '').replace(/I want /i, '').replace(/I'd like /i, '').replace(/show me /i, '').replace(/create /i, '').replace(/generate /i, '').replace(/make /i, '');\n\n        // Add components to prompt if available\n        if (components.length > 0) {\n          const componentNames = components.map(c => typeof c === 'string' ? c : c.name).filter(Boolean).join(', ');\n          imagePrompt = `${imagePrompt}. Include these drone components: ${componentNames}`;\n        }\n\n        // Always add \"drone\" to the prompt if it's not already there\n        if (!imagePrompt.toLowerCase().includes('drone')) {\n          imagePrompt = `${imagePrompt} of a drone`;\n        }\n        console.log(\"[DEBUG] Image prompt:\", imagePrompt);\n        // Generate the image\n        generateStableDiffusionImage(imagePrompt);\n        return; // Early return to skip the regular flow\n      }\n\n      // Continue with regular voice query flow if not an image request\n      const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData,\n          query: transcript,\n          currentStep,\n          userId,\n          projectId,\n          requestId: Date.now().toString()\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setProcessingStatus('Response received ✅');\n      statusCallback('Response received ✅');\n      if (data.success) {\n        var _cameraFeedRef$curren5;\n        setAnalysisResult(data);\n        const processedResponse = processGeminiResponse(data);\n        if ((_cameraFeedRef$curren5 = cameraFeedRef.current) !== null && _cameraFeedRef$curren5 !== void 0 && _cameraFeedRef$curren5.setSpeechText) {\n          cameraFeedRef.current.setSpeechText('');\n          setTimeout(() => {\n            cameraFeedRef.current.setSpeechText(processedResponse);\n          }, 100);\n        }\n      } else {\n        throw new Error(data.error || 'Voice query failed');\n      }\n    } catch (error) {\n      var _cameraFeedRef$curren6;\n      Logger.error('Voice query error:', error);\n      console.error(\"[DEBUG] Voice query error:\", error);\n      setProcessingStatus('Error processing request ❌');\n      statusCallback('Error processing request ❌');\n      setAnalysisResult(null);\n      if ((_cameraFeedRef$curren6 = cameraFeedRef.current) !== null && _cameraFeedRef$curren6 !== void 0 && _cameraFeedRef$curren6.setSpeechText) {\n        cameraFeedRef.current.setSpeechText('I encountered an error processing your request. Please try again.');\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleProjectSelect = project => {\n    setActiveProject(project);\n    setShowProjectManager(false);\n  };\n  const handleOnboardingComplete = () => {\n    setShowOnboarding(false);\n    loadActiveProject();\n  };\n  const toggleProjectManager = () => {\n    setShowProjectManager(!showProjectManager);\n  };\n  const renderContent = () => {\n    if (showOnboarding) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto px-4 py-8\",\n        children: /*#__PURE__*/_jsxDEV(NewUserOnboarding, {\n          onComplete: handleOnboardingComplete,\n          onGenerateImage: generateStableDiffusionImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this);\n    }\n    if (projectLoading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto px-4 py-8 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mx-auto px-4 py-6\",\n      children: showProjectManager ? /*#__PURE__*/_jsxDEV(ProjectManager, {\n        onProjectSelect: handleProjectSelect,\n        onNewProject: handleProjectSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-12 gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-span-12 lg:col-span-8\",\n          children: [/*#__PURE__*/_jsxDEV(CameraFeed, {\n            ref: cameraFeedRef,\n            currentStep: currentStep,\n            onAnalysisComplete: handleAnalysisComplete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 15\n          }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4 bg-black/50 text-white p-4 rounded-xl\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center gap-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-3 h-3 bg-green-500 rounded-full animate-pulse\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: processingStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-span-12 lg:col-span-4 space-y-6\",\n          children: [/*#__PURE__*/_jsxDEV(InstructionPanel, {\n            currentStep: currentStep,\n            analysis: analysisResult === null || analysisResult === void 0 ? void 0 : analysisResult.analysis,\n            project: currentProject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(VisualizationPanel, {\n            components: components || [] // Now 'components' is properly defined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(GeneratedImagePanel, {\n            image: generatedImage,\n            isLoading: isGeneratingImage,\n            error: imageGenerationError,\n            title: \"Drone Visualization\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-indigo-800\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"border-b border-white/10 backdrop-blur-md bg-black/20\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto px-4 py-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-2xl font-bold text-white\",\n            children: (currentProject === null || currentProject === void 0 ? void 0 : currentProject.project_name) || 'Drone Assembly'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: toggleProjectManager,\n              className: \"text-indigo-200 hover:text-white transition-colors\",\n              title: \"Projects\",\n              children: /*#__PURE__*/_jsxDEV(Folder, {\n                className: \"w-6 h-6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-indigo-200 hover:text-white transition-colors\",\n              title: \"History\",\n              children: /*#__PURE__*/_jsxDEV(Clock, {\n                className: \"w-6 h-6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-indigo-200 hover:text-white transition-colors\",\n              title: \"Chat\",\n              children: /*#__PURE__*/_jsxDEV(MessageSquare, {\n                className: \"w-6 h-6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 616,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 7\n    }, this), renderContent(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-6 right-6 flex flex-col gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(VoiceInput, {\n        onVoiceInput: handleVoiceInput,\n        disabled: isProcessing || showProjectManager || showOnboarding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-14 h-14 bg-indigo-600 hover:bg-indigo-700 rounded-full flex items-center justify-center text-white shadow-lg transition-colors\",\n        onClick: toggleProjectManager,\n        title: showProjectManager ? \"Back to Assembly\" : \"Switch Project\",\n        children: /*#__PURE__*/_jsxDEV(ArrowLeftRight, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 597,\n    columnNumber: 5\n  }, this);\n};\n_s(MainInterface, \"jikbddtpSzIluA8ogUytJ6zNz8w=\", false, function () {\n  return [useProject];\n});\n_c = MainInterface;\nexport default MainInterface;\nvar _c;\n$RefreshReg$(_c, \"MainInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Clock","MessageSquare","Folder","ArrowLeftRight","CameraFeed","InstructionPanel","VisualizationPanel","VoiceInput","ProjectManager","NewUserOnboarding","Logger","processGeminiResponse","getUserId","getProjectId","useProject","GeneratedImagePanel","jsxDEV","_jsxDEV","MainInterface","_s","analysisResult","setAnalysisResult","isProcessing","setIsProcessing","processingStatus","setProcessingStatus","showProjectManager","setShowProjectManager","showOnboarding","setShowOnboarding","cameraFeedRef","generatedImage","setGeneratedImage","isGeneratingImage","setIsGeneratingImage","imageGenerationError","setImageGenerationError","currentProject","isLoading","projectLoading","loadActiveProject","setActiveProject","addComponents","addCompletedStep","components","projectId","currentStep","current_step","isVisualizationRequest","transcript","visualizationTriggers","result","some","trigger","test","console","log","handleAnalysisComplete","_result$analysis","_result$analysis2","_result$analysis5","info","hasData","hasAnalysis","analysis","identifiedComponents","identifiedParts","timestamp","Date","toISOString","_result$analysis3","_result$analysis4","componentsToStore","Array","isArray","length","possibleFields","Object","keys","filter","key","toLowerCase","includes","validComponents","comp","name","storeIdentifiedComponents","canProceed","stepInfo","stepNumber","title","details","feedback","count","error","generateStableDiffusionImage","prompt","_cameraFeedRef$curren","healthCheck","fetch","method","signal","AbortSignal","timeout","ok","e","response","headers","body","JSON","stringify","userId","async","Error","status","statusText","taskInfo","json","task_id","taskId","isComplete","progressUpdates","current","setSpeechText","currentText","speechText","Promise","resolve","setTimeout","progressResponse","progress","message","_cameraFeedRef$curren2","resultResponse","URL","revokeObjectURL","blob","imageUrl","createObjectURL","pollError","finalResponse","finalError","_cameraFeedRef$curren3","handleVoiceInput","statusCallback","imageData","captureFrame","shouldGenerateImage","geminiResponse","image","query","requestId","now","toString","data","success","_cameraFeedRef$curren4","processedResponse","imagePrompt","replace","componentNames","map","c","Boolean","join","_cameraFeedRef$curren5","_cameraFeedRef$curren6","handleProjectSelect","project","handleOnboardingComplete","toggleProjectManager","renderContent","className","children","onComplete","onGenerateImage","fileName","_jsxFileName","lineNumber","columnNumber","onProjectSelect","onNewProject","ref","onAnalysisComplete","project_name","onClick","onVoiceInput","disabled","_c","$RefreshReg$"],"sources":["/Users/manmohan/Documents/drone_assembler/frontend/src/components/MainInterface.js"],"sourcesContent":["// frontend/src/components/MainInterface.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Clock, MessageSquare, Folder, ArrowLeftRight } from 'lucide-react';\nimport CameraFeed from './CameraFeed';\nimport InstructionPanel from './InstructionPanel';\nimport VisualizationPanel from './VisualizationPanel';\nimport VoiceInput from './VoiceInput';\nimport ProjectManager from './ProjectManager';\nimport NewUserOnboarding from './NewUserOnboarding';\nimport Logger from '../utils/logger';\nimport { processGeminiResponse } from '../utils/speechUtils';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport { useProject } from '../contexts/ProjectContext';\nimport GeneratedImagePanel from './GeneratedImagePanel';\n\nconst MainInterface = () => {\n  const [analysisResult, setAnalysisResult] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStatus, setProcessingStatus] = useState(null);\n  const [showProjectManager, setShowProjectManager] = useState(false);\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const cameraFeedRef = useRef();\n  const [generatedImage, setGeneratedImage] = useState(null);\n  const [isGeneratingImage, setIsGeneratingImage] = useState(false);\n  const [imageGenerationError, setImageGenerationError] = useState(null);\n\n  const { \n    currentProject, \n    isLoading: projectLoading,\n    loadActiveProject, \n    setActiveProject,\n    addComponents,\n    addCompletedStep,\n    components // Add this line to fix the error\n  } = useProject();\n\n  useEffect(() => {\n    const projectId = getProjectId();\n    if (!projectId) {\n      setShowOnboarding(true);\n    }\n  }, []);\n\n  const currentStep = currentProject?.current_step || 1;\n\n  const isVisualizationRequest = (transcript) => {\n    // Expanded list of triggers for image generation/visualization\n    const visualizationTriggers = [\n      /create.*image/i,\n      /generate.*image/i,\n      /show.*visual/i,\n      /create.*visual/i,\n      /visualize/i,\n      /draw.*drone/i,\n      /make.*picture/i,\n      /create.*picture/i,\n      /show.*what.*looks.*like/i,\n      /picture.*of/i,\n      /image.*of/i,\n      /illustration.*of/i,\n      /visualize.*the.*drone/i, \n      /show.*me.*what/i,\n      /show.*me.*a.*picture/i,\n      /show.*me.*an.*image/i,\n      /can.*you.*draw/i,\n      /can.*you.*show.*me/i,\n      /generate.*a.*picture/i,\n      /create.*a.*representation/i,\n      /make.*an.*image/i\n    ];\n    \n    const result = visualizationTriggers.some(trigger => trigger.test(transcript));\n    console.log(\"[DEBUG] Visualization request check:\", transcript, result);\n    return result;\n  };\n\n  const handleAnalysisComplete = (result) => {\n    if (!result) {\n      setAnalysisResult(null);\n      setProcessingStatus(null);\n      return;\n    }\n    \n    setAnalysisResult(result);\n    \n    console.log(\"[DEBUG] Analysis result:\", result);\n    console.log(\"[DEBUG] Current project:\", currentProject);\n    console.log(\"[DEBUG] Current components:\", components);\n  \n    Logger.info('Analysis completed', {\n      hasData: !!result,\n      hasAnalysis: !!result?.analysis,\n      identifiedComponents: !!result?.analysis?.identifiedComponents,\n      identifiedParts: !!result?.analysis?.identifiedParts,\n      timestamp: new Date().toISOString()\n    });\n    \n    if (currentProject) {\n      let componentsToStore = [];\n      \n      // Check in both locations the backend might put component data\n      if (result?.analysis?.identifiedComponents && Array.isArray(result.analysis.identifiedComponents)) {\n        componentsToStore = result.analysis.identifiedComponents;\n        console.log(\"[DEBUG] Found identifiedComponents:\", componentsToStore);\n      } else if (result?.analysis?.identifiedParts && Array.isArray(result.analysis.identifiedParts)) {\n        componentsToStore = result.analysis.identifiedParts;\n        console.log(\"[DEBUG] Found identifiedParts:\", componentsToStore);\n      } else {\n        // Debug the actual structure received to understand what's happening\n        console.log(\"[DEBUG] No identifiedComponents or identifiedParts arrays found in:\", result.analysis);\n      }\n      \n      // Add special check for object structure\n      if (componentsToStore.length === 0 && typeof result.analysis === 'object') {\n        // Try to extract component data from other possible fields\n        const possibleFields = Object.keys(result.analysis).filter(key => \n          Array.isArray(result.analysis[key]) && \n          key.toLowerCase().includes('component')\n        );\n        \n        if (possibleFields.length > 0) {\n          console.log(\"[DEBUG] Found alternative component fields:\", possibleFields);\n          componentsToStore = result.analysis[possibleFields[0]];\n        }\n      }\n      \n      // Enhanced validation of component data\n      if (componentsToStore.length > 0) {\n        // Filter out invalid components\n        const validComponents = componentsToStore.filter(comp => \n          comp && (typeof comp === 'string' || (typeof comp === 'object' && comp.name))\n        );\n        \n        if (validComponents.length > 0) {\n          console.log(\"[DEBUG] Valid components to store:\", validComponents);\n          storeIdentifiedComponents(validComponents);\n        } else {\n          console.log(\"[DEBUG] No valid components after filtering:\", componentsToStore);\n        }\n      } else {\n        console.log(\"[DEBUG] No components to store found in result\");\n      }\n    } else {\n      console.log(\"[DEBUG] No current project available\");\n    }\n    \n    if (result?.analysis?.canProceed) {\n      const stepInfo = {\n        stepNumber: currentStep,\n        title: `Step ${currentStep} completed`,\n        timestamp: new Date().toISOString(),\n        details: result.analysis.feedback || 'Step completed successfully',\n      };\n      \n      addCompletedStep(stepInfo);\n    }\n  };\n// Fixed storeIdentifiedComponents function for MainInterface.js\n  const storeIdentifiedComponents = async (components) => {\n    if (!components || !Array.isArray(components) || components.length === 0) {\n      console.log(\"[DEBUG] Invalid components to store:\", components);\n      return;\n    }\n    \n    console.log(\"[DEBUG] Calling addComponents with:\", components);\n    try {\n      Logger.info('Storing identified components', { count: components.length });\n      const result = await addComponents(components); // Capture the return value\n      console.log(\"[DEBUG] addComponents returned:\", result);\n    } catch (error) {\n      Logger.error('Error storing components', error);\n      console.error(\"[DEBUG] Error in storeIdentifiedComponents:\", error);\n    }\n  };\n  \n  // Updated image generation function with progress tracking\nconst generateStableDiffusionImage = async (prompt) => {\n  try {\n    setIsGeneratingImage(true);\n    setImageGenerationError(null);\n    \n    Logger.info('Starting image generation', { prompt });\n    console.log(\"[DEBUG] Image generation prompt:\", prompt);\n    \n    // First check if the service is running\n    try {\n      const healthCheck = await fetch('http://localhost:9999', { \n        method: 'GET',\n        signal: AbortSignal.timeout(2000)\n      });\n      \n      if (healthCheck.ok) {\n        console.log(\"[DEBUG] Image service is running\");\n      }\n    } catch (e) {\n      console.log(\"[DEBUG] Service health check failed, attempting to generate anyway\");\n    }\n    \n    // Start the async image generation\n    const response = await fetch('http://localhost:9999/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: prompt,\n        userId: getUserId(),\n        projectId: getProjectId(),\n        async: true  // Enable async processing\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to start image generation: ${response.status} ${response.statusText}`);\n    }\n\n    // Get the task info from the response\n    const taskInfo = await response.json();\n    console.log(\"[DEBUG] Image generation task started:\", taskInfo);\n    \n    if (!taskInfo.task_id) {\n      throw new Error(\"No task ID returned from image generation service\");\n    }\n    \n    // Poll for progress updates\n    const taskId = taskInfo.task_id;\n    let isComplete = false;\n    let progressUpdates = 0;\n    \n    // Add success message to speech about generation starting\n    if (cameraFeedRef.current?.setSpeechText) {\n      const currentText = cameraFeedRef.current.speechText || '';\n      cameraFeedRef.current.setSpeechText(\n        `${currentText} I'm generating a visualization based on your request. This may take a moment.`\n      );\n    }\n    \n    // Start polling for progress\n    while (!isComplete) {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second between polls\n        \n        const progressResponse = await fetch(`http://localhost:9999/progress/${taskId}`, {\n          signal: AbortSignal.timeout(5000)\n        });\n        \n        if (!progressResponse.ok) {\n          progressUpdates++;\n          if (progressUpdates > 10) {\n            throw new Error(\"Too many failed progress updates\");\n          }\n          continue;\n        }\n        \n        const progress = await progressResponse.json();\n        console.log(\"[DEBUG] Image generation progress:\", progress);\n        \n        // Update UI with progress info\n        setProcessingStatus(`Generating image: ${progress.progress}% - ${progress.message}`);\n        \n        // Check if complete\n        if (progress.status === \"completed\") {\n          isComplete = true;\n          \n          // Fetch the final image\n          const resultResponse = await fetch(`http://localhost:9999/result/${taskId}`);\n          if (!resultResponse.ok) {\n            throw new Error(\"Failed to fetch completed image\");\n          }\n          \n          // Clean up any existing object URL\n          if (generatedImage) {\n            URL.revokeObjectURL(generatedImage);\n          }\n          \n          const blob = await resultResponse.blob();\n          const imageUrl = URL.createObjectURL(blob);\n          setGeneratedImage(imageUrl);\n          console.log(\"[DEBUG] Image generation successful, URL created:\", imageUrl);\n          \n          // Add success message to speech\n          if (cameraFeedRef.current?.setSpeechText) {\n            const currentText = cameraFeedRef.current.speechText || '';\n            cameraFeedRef.current.setSpeechText(\n              `${currentText} I've completed generating the visualization based on your request.`\n            );\n          }\n        }\n      } catch (pollError) {\n        console.error(\"[DEBUG] Error polling for progress:\", pollError);\n        progressUpdates++;\n        \n        // If we've had many failed updates, but the task might still be running,\n        // we'll just wait and try the final result after a timeout\n        if (progressUpdates > 10) {\n          console.log(\"[DEBUG] Too many failed progress updates, waiting for final result\");\n          break;\n        }\n      }\n    }\n    \n    // If we exited the loop without getting a final image, try one last time\n    if (!generatedImage) {\n      try {\n        console.log(\"[DEBUG] Attempting final result fetch\");\n        const finalResponse = await fetch(`http://localhost:9999/result/${taskId}`);\n        \n        if (finalResponse.ok) {\n          const blob = await finalResponse.blob();\n          const imageUrl = URL.createObjectURL(blob);\n          setGeneratedImage(imageUrl);\n          console.log(\"[DEBUG] Final image fetch successful\");\n        } else {\n          throw new Error(\"Failed to fetch final image\");\n        }\n      } catch (finalError) {\n        console.error(\"[DEBUG] Error in final image fetch:\", finalError);\n        throw new Error(\"Failed to retrieve generated image\");\n      }\n    }\n    \n  } catch (error) {\n    console.error(\"[DEBUG] Image generation error:\", error);\n    if (error.name === 'AbortError') {\n      setImageGenerationError('Image generation timed out. Please try again.');\n    } else {\n      setImageGenerationError(`Error: ${error.message}`);\n    }\n    Logger.error('Error generating image:', error);\n    \n    // Add error message to speech\n    if (cameraFeedRef.current?.setSpeechText) {\n      const currentText = cameraFeedRef.current.speechText || '';\n      cameraFeedRef.current.setSpeechText(\n        `${currentText} I encountered an error while trying to generate the visualization.`\n      );\n    }\n  } finally {\n    setProcessingStatus(null);\n    setIsGeneratingImage(false);\n  }\n};\n\nuseEffect(() => {\n  return () => {\n    // Clean up any object URLs when component unmounts\n    if (generatedImage) {\n      URL.revokeObjectURL(generatedImage);\n    }\n  };\n}, []);\n\n  const handleVoiceInput = async (transcript, statusCallback) => {\n    if (!cameraFeedRef.current) {\n      Logger.error('Camera feed not initialized');\n      statusCallback('Error: Camera not ready');\n      return;\n    }\n  \n    setAnalysisResult(null);\n    setIsProcessing(true);\n    Logger.info('Processing voice input:', transcript);\n    console.log(\"[DEBUG] Processing voice input:\", transcript);\n    setProcessingStatus('Capturing image...');\n    \n    try {\n      const imageData = cameraFeedRef.current.captureFrame();\n      \n      if (!imageData) {\n        throw new Error('Failed to capture camera frame');\n      }\n      \n      // Check if this is a visualization/image generation request\n      const shouldGenerateImage = isVisualizationRequest(transcript);\n      console.log(\"[DEBUG] Should generate image:\", shouldGenerateImage);\n      \n      Logger.info('Image captured successfully');\n      setProcessingStatus('Image captured ✅ Sending to API...');\n      statusCallback('Image captured ✅ Sending to API...');\n  \n      const userId = getUserId();\n      const projectId = getProjectId();\n      \n      // If it's an image generation request, proceed with it directly\n      if (shouldGenerateImage) {\n        statusCallback('Image request detected ✅ Generating visualization...');\n        console.log(\"[DEBUG] Image generation request detected, processing directly\");\n        \n        // Still send to Gemini for component analysis\n        const geminiResponse = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            image: imageData,\n            query: transcript,\n            currentStep,\n            userId,\n            projectId,\n            requestId: Date.now().toString()\n          })\n        });\n        \n        let components = [];\n        \n        // Try to extract components if Gemini response is successful\n        if (geminiResponse.ok) {\n          const data = await geminiResponse.json();\n          setAnalysisResult(data);\n          \n          if (data.success && data.analysis) {\n            // Extract components from the analysis\n            if (data.analysis.identifiedComponents && Array.isArray(data.analysis.identifiedComponents)) {\n              components = data.analysis.identifiedComponents;\n            } else if (data.analysis.identifiedParts && Array.isArray(data.analysis.identifiedParts)) {\n              components = data.analysis.identifiedParts;\n            }\n            \n            // Process Gemini response for speech\n            const processedResponse = processGeminiResponse(data);\n            if (cameraFeedRef.current?.setSpeechText) {\n              cameraFeedRef.current.setSpeechText('');\n              setTimeout(() => {\n                cameraFeedRef.current.setSpeechText(\n                  `${processedResponse} I'll generate a visualization of that for you.`\n                );\n              }, 100);\n            }\n          }\n        }\n        \n        // Clean transcript to form a better prompt for image generation\n        let imagePrompt = transcript.replace(/can you /i, '')\n                                    .replace(/please /i, '')\n                                    .replace(/I want /i, '')\n                                    .replace(/I'd like /i, '')\n                                    .replace(/show me /i, '')\n                                    .replace(/create /i, '')\n                                    .replace(/generate /i, '')\n                                    .replace(/make /i, '');\n        \n        // Add components to prompt if available\n        if (components.length > 0) {\n          const componentNames = components\n            .map(c => typeof c === 'string' ? c : c.name)\n            .filter(Boolean)\n            .join(', ');\n          \n          imagePrompt = `${imagePrompt}. Include these drone components: ${componentNames}`;\n        }\n        \n        // Always add \"drone\" to the prompt if it's not already there\n        if (!imagePrompt.toLowerCase().includes('drone')) {\n          imagePrompt = `${imagePrompt} of a drone`;\n        }\n        \n        console.log(\"[DEBUG] Image prompt:\", imagePrompt);\n        // Generate the image\n        generateStableDiffusionImage(imagePrompt);\n        \n        return; // Early return to skip the regular flow\n      }\n      \n      // Continue with regular voice query flow if not an image request\n      const response = await fetch('http://localhost:5003/api/assembly/gemini/voice-query', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          image: imageData,\n          query: transcript,\n          currentStep,\n          userId,\n          projectId,\n          requestId: Date.now().toString()\n        })\n      });\n  \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n  \n      const data = await response.json();\n      \n      setProcessingStatus('Response received ✅');\n      statusCallback('Response received ✅');\n  \n      if (data.success) {\n        setAnalysisResult(data);\n        \n        const processedResponse = processGeminiResponse(data);\n        if (cameraFeedRef.current?.setSpeechText) {\n          cameraFeedRef.current.setSpeechText('');\n          setTimeout(() => {\n            cameraFeedRef.current.setSpeechText(processedResponse);\n          }, 100);\n        }\n      } else {\n        throw new Error(data.error || 'Voice query failed');\n      }\n  \n    } catch (error) {\n      Logger.error('Voice query error:', error);\n      console.error(\"[DEBUG] Voice query error:\", error);\n      setProcessingStatus('Error processing request ❌');\n      statusCallback('Error processing request ❌');\n      setAnalysisResult(null);\n      \n      if (cameraFeedRef.current?.setSpeechText) {\n        cameraFeedRef.current.setSpeechText('I encountered an error processing your request. Please try again.');\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleProjectSelect = (project) => {\n    setActiveProject(project);\n    setShowProjectManager(false);\n  };\n\n  const handleOnboardingComplete = () => {\n    setShowOnboarding(false);\n    loadActiveProject();\n  };\n\n  const toggleProjectManager = () => {\n    setShowProjectManager(!showProjectManager);\n  };\n\n  const renderContent = () => {\n    if (showOnboarding) {\n      return (\n        <div className=\"container mx-auto px-4 py-8\">\n          <NewUserOnboarding \n            onComplete={handleOnboardingComplete}\n            onGenerateImage={generateStableDiffusionImage} \n          />\n        </div>\n      );\n    }\n    \n    if (projectLoading) {\n      return (\n        <div className=\"container mx-auto px-4 py-8 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"></div>\n        </div>\n      );\n    }\n    \n    return (\n      <main className=\"container mx-auto px-4 py-6\">\n        {showProjectManager ? (\n          <ProjectManager \n            onProjectSelect={handleProjectSelect}\n            onNewProject={handleProjectSelect}\n          />\n        ) : (\n          <div className=\"grid grid-cols-12 gap-6\">\n            <div className=\"col-span-12 lg:col-span-8\">\n              <CameraFeed \n                ref={cameraFeedRef}\n                currentStep={currentStep}\n                onAnalysisComplete={handleAnalysisComplete}\n              />\n              \n              {processingStatus && (\n                <div className=\"mt-4 bg-black/50 text-white p-4 rounded-xl\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                    <span>{processingStatus}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"col-span-12 lg:col-span-4 space-y-6\">\n              <InstructionPanel \n                currentStep={currentStep}\n                analysis={analysisResult?.analysis}\n                project={currentProject}\n              />\n              <VisualizationPanel \n                components={components || []} // Now 'components' is properly defined\n              />\n              <GeneratedImagePanel\n                image={generatedImage}\n                isLoading={isGeneratingImage}\n                error={imageGenerationError}\n                title=\"Drone Visualization\"\n              />\n            </div>\n          </div>\n        )}\n      </main>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-indigo-800\">\n      <header className=\"border-b border-white/10 backdrop-blur-md bg-black/20\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-2xl font-bold text-white\">\n              {currentProject?.project_name || 'Drone Assembly'}\n            </h1>\n            <div className=\"flex items-center gap-4\">\n              <button \n                onClick={toggleProjectManager}\n                className=\"text-indigo-200 hover:text-white transition-colors\"\n                title=\"Projects\"\n              >\n                <Folder className=\"w-6 h-6\" />\n              </button>\n              <button className=\"text-indigo-200 hover:text-white transition-colors\" title=\"History\">\n                <Clock className=\"w-6 h-6\" />\n              </button>\n              <button className=\"text-indigo-200 hover:text-white transition-colors\" title=\"Chat\">\n                <MessageSquare className=\"w-6 h-6\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      {renderContent()}\n\n      <div className=\"fixed bottom-6 right-6 flex flex-col gap-4\">\n        <VoiceInput \n          onVoiceInput={handleVoiceInput}\n          disabled={isProcessing || showProjectManager || showOnboarding}\n        />\n        <button \n          className=\"w-14 h-14 bg-indigo-600 hover:bg-indigo-700 rounded-full flex items-center justify-center text-white shadow-lg transition-colors\"\n          onClick={toggleProjectManager}\n          title={showProjectManager ? \"Back to Assembly\" : \"Switch Project\"}\n        >\n          <ArrowLeftRight className=\"w-6 h-6\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default MainInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}