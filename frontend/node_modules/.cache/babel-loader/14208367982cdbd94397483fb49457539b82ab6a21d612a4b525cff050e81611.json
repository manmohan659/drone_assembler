{"ast":null,"code":"// frontend/src/utils/userIdentification.js\nimport Logger from './logger';\n\n// Constants for localStorage keys\nconst USER_ID_KEY = 'drone_assembly_user_id';\nconst PROJECT_ID_KEY = 'drone_assembly_project_id';\nconst PROJECT_CACHE_PREFIX = 'drone_project_';\n\n// Generate a unique user ID if none exists\nexport const getUserId = () => {\n  let userId = localStorage.getItem(USER_ID_KEY);\n  if (!userId) {\n    userId = `user_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    localStorage.setItem(USER_ID_KEY, userId);\n  }\n  return userId;\n};\n\n// Get current project ID\nexport const getProjectId = () => {\n  return localStorage.getItem(PROJECT_ID_KEY);\n};\n\n// Set active project with proper cache clearing\nexport const setActiveProject = projectId => {\n  const previousProjectId = getProjectId();\n\n  // If switching projects, clear previous project's cache\n  if (previousProjectId && previousProjectId !== projectId) {\n    clearProjectCache(previousProjectId);\n  }\n\n  // Set new project ID\n  localStorage.setItem(PROJECT_ID_KEY, projectId);\n\n  // Log project switch for debugging\n  console.log(`Switched projects: ${previousProjectId || 'none'} -> ${projectId}`);\n  return projectId;\n};\n\n// Generate a new project ID\nexport const generateProjectId = () => {\n  return `proj_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n};\n\n// Clear project-specific cache (components, steps, etc.)\nexport const clearProjectCache = projectId => {\n  if (!projectId) return;\n\n  // Clear any in-memory cache for this project\n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  localStorage.removeItem(cacheKey);\n\n  // Could add more specific cache clearing as needed\n  console.log(`Cleared cache for project: ${projectId}`);\n};\n\n// Cache project data (for offline or quick access)\nexport const cacheProjectData = (projectId, data) => {\n  if (!projectId || !data) return;\n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  localStorage.setItem(cacheKey, JSON.stringify(data));\n};\n\n// Get cached project data\nexport const getCachedProjectData = projectId => {\n  if (!projectId) return null;\n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  const cached = localStorage.getItem(cacheKey);\n  return cached ? JSON.parse(cached) : null;\n};\n\n// Export the PROJECT_ID_KEY constant so it can be used in other files\nexport { PROJECT_ID_KEY };","map":{"version":3,"names":["Logger","USER_ID_KEY","PROJECT_ID_KEY","PROJECT_CACHE_PREFIX","getUserId","userId","localStorage","getItem","Date","now","Math","random","toString","substring","setItem","getProjectId","setActiveProject","projectId","previousProjectId","clearProjectCache","console","log","generateProjectId","cacheKey","removeItem","cacheProjectData","data","JSON","stringify","getCachedProjectData","cached","parse"],"sources":["/Users/single/Workspaces/drone_assembler/frontend/src/utils/userIdentification.js"],"sourcesContent":["// frontend/src/utils/userIdentification.js\nimport Logger from './logger';\n\n// Constants for localStorage keys\nconst USER_ID_KEY = 'drone_assembly_user_id';\nconst PROJECT_ID_KEY = 'drone_assembly_project_id';\nconst PROJECT_CACHE_PREFIX = 'drone_project_';\n\n// Generate a unique user ID if none exists\nexport const getUserId = () => {\n  let userId = localStorage.getItem(USER_ID_KEY);\n  \n  if (!userId) {\n    userId = `user_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    localStorage.setItem(USER_ID_KEY, userId);\n  }\n  \n  return userId;\n};\n\n// Get current project ID\nexport const getProjectId = () => {\n  return localStorage.getItem(PROJECT_ID_KEY);\n};\n\n// Set active project with proper cache clearing\nexport const setActiveProject = (projectId) => {\n  const previousProjectId = getProjectId();\n  \n  // If switching projects, clear previous project's cache\n  if (previousProjectId && previousProjectId !== projectId) {\n    clearProjectCache(previousProjectId);\n  }\n  \n  // Set new project ID\n  localStorage.setItem(PROJECT_ID_KEY, projectId);\n  \n  // Log project switch for debugging\n  console.log(`Switched projects: ${previousProjectId || 'none'} -> ${projectId}`);\n  \n  return projectId;\n};\n\n// Generate a new project ID\nexport const generateProjectId = () => {\n  return `proj_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n};\n\n// Clear project-specific cache (components, steps, etc.)\nexport const clearProjectCache = (projectId) => {\n  if (!projectId) return;\n  \n  // Clear any in-memory cache for this project\n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  localStorage.removeItem(cacheKey);\n  \n  // Could add more specific cache clearing as needed\n  console.log(`Cleared cache for project: ${projectId}`);\n};\n\n// Cache project data (for offline or quick access)\nexport const cacheProjectData = (projectId, data) => {\n  if (!projectId || !data) return;\n  \n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  localStorage.setItem(cacheKey, JSON.stringify(data));\n};\n\n// Get cached project data\nexport const getCachedProjectData = (projectId) => {\n  if (!projectId) return null;\n  \n  const cacheKey = `${PROJECT_CACHE_PREFIX}${projectId}`;\n  const cached = localStorage.getItem(cacheKey);\n  \n  return cached ? JSON.parse(cached) : null;\n};\n\n// Export the PROJECT_ID_KEY constant so it can be used in other files\nexport { PROJECT_ID_KEY };"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,WAAW,GAAG,wBAAwB;AAC5C,MAAMC,cAAc,GAAG,2BAA2B;AAClD,MAAMC,oBAAoB,GAAG,gBAAgB;;AAE7C;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAC7B,IAAIC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAACN,WAAW,CAAC;EAE9C,IAAI,CAACI,MAAM,EAAE;IACXA,MAAM,GAAG,QAAQG,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAC3EP,YAAY,CAACQ,OAAO,CAACb,WAAW,EAAEI,MAAM,CAAC;EAC3C;EAEA,OAAOA,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMU,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAOT,YAAY,CAACC,OAAO,CAACL,cAAc,CAAC;AAC7C,CAAC;;AAED;AACA,OAAO,MAAMc,gBAAgB,GAAIC,SAAS,IAAK;EAC7C,MAAMC,iBAAiB,GAAGH,YAAY,CAAC,CAAC;;EAExC;EACA,IAAIG,iBAAiB,IAAIA,iBAAiB,KAAKD,SAAS,EAAE;IACxDE,iBAAiB,CAACD,iBAAiB,CAAC;EACtC;;EAEA;EACAZ,YAAY,CAACQ,OAAO,CAACZ,cAAc,EAAEe,SAAS,CAAC;;EAE/C;EACAG,OAAO,CAACC,GAAG,CAAC,sBAAsBH,iBAAiB,IAAI,MAAM,OAAOD,SAAS,EAAE,CAAC;EAEhF,OAAOA,SAAS;AAClB,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAGA,CAAA,KAAM;EACrC,OAAO,QAAQd,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;AAC3E,CAAC;;AAED;AACA,OAAO,MAAMM,iBAAiB,GAAIF,SAAS,IAAK;EAC9C,IAAI,CAACA,SAAS,EAAE;;EAEhB;EACA,MAAMM,QAAQ,GAAG,GAAGpB,oBAAoB,GAAGc,SAAS,EAAE;EACtDX,YAAY,CAACkB,UAAU,CAACD,QAAQ,CAAC;;EAEjC;EACAH,OAAO,CAACC,GAAG,CAAC,8BAA8BJ,SAAS,EAAE,CAAC;AACxD,CAAC;;AAED;AACA,OAAO,MAAMQ,gBAAgB,GAAGA,CAACR,SAAS,EAAES,IAAI,KAAK;EACnD,IAAI,CAACT,SAAS,IAAI,CAACS,IAAI,EAAE;EAEzB,MAAMH,QAAQ,GAAG,GAAGpB,oBAAoB,GAAGc,SAAS,EAAE;EACtDX,YAAY,CAACQ,OAAO,CAACS,QAAQ,EAAEI,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;AACtD,CAAC;;AAED;AACA,OAAO,MAAMG,oBAAoB,GAAIZ,SAAS,IAAK;EACjD,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;EAE3B,MAAMM,QAAQ,GAAG,GAAGpB,oBAAoB,GAAGc,SAAS,EAAE;EACtD,MAAMa,MAAM,GAAGxB,YAAY,CAACC,OAAO,CAACgB,QAAQ,CAAC;EAE7C,OAAOO,MAAM,GAAGH,IAAI,CAACI,KAAK,CAACD,MAAM,CAAC,GAAG,IAAI;AAC3C,CAAC;;AAED;AACA,SAAS5B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}