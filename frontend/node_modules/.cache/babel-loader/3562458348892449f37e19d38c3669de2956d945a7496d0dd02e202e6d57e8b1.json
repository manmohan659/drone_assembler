{"ast":null,"code":"// frontend/src/utils/speechUtils.js\n\nexport const processGeminiResponse = response => {\n  // Extract the main feedback from the analysis\n  if (!response || !response.analysis) {\n    console.warn('Invalid Gemini response format:', response);\n    return 'I could not analyze the image properly. Please try again.';\n  }\n\n  // Try to handle raw text that might contain JSON\n  if (typeof response.analysis === 'string' && (response.analysis.includes('{') || response.analysis.includes('```'))) {\n    try {\n      // Clean any markdown formatting\n      const cleanedText = response.analysis.replace(/```json/g, '').replace(/```/g, '').trim();\n\n      // Try to parse as JSON\n      const jsonData = JSON.parse(cleanedText);\n      response.analysis = jsonData;\n    } catch (error) {\n      console.error('Failed to parse JSON in analysis:', error);\n      // Continue with the original text\n    }\n  }\n\n  // Safe extraction of properties with fallbacks\n  const analysis = response.analysis || {};\n  const feedback = analysis.feedback || '';\n  const warnings = Array.isArray(analysis.warnings) ? analysis.warnings : [];\n  const nextSteps = Array.isArray(analysis.nextSteps) ? analysis.nextSteps : [];\n  const misalignments = Array.isArray(analysis.misalignments) ? analysis.misalignments : [];\n  const answer = analysis.answer || '';\n  const details = analysis.details || '';\n  const recommendations = Array.isArray(analysis.recommendations) ? analysis.recommendations : [];\n\n  // Construct a natural speech response\n  let speechText = '';\n\n  // Add primary content from either analysis or voice query\n  if (answer) {\n    speechText += answer + ' ';\n  }\n  if (details) {\n    speechText += details + ' ';\n  }\n  if (feedback) {\n    speechText += feedback + ' ';\n  }\n\n  // Add warnings if present\n  if (warnings.length > 0) {\n    speechText += 'Please note the following warnings: ' + warnings.join('. ') + ' ';\n  }\n\n  // Add recommendations if present\n  if (recommendations.length > 0) {\n    speechText += 'Recommendations: ' + recommendations.join('. ') + ' ';\n  }\n\n  // Add misalignments if present\n  if (misalignments.length > 0) {\n    speechText += 'The following components need adjustment: ' + misalignments.join(', ') + ' ';\n  }\n\n  // Add next steps if present\n  if (nextSteps.length > 0) {\n    speechText += 'Here are your next steps: ' + nextSteps.join('. ') + ' ';\n  }\n\n  // Fallback if we somehow got no text\n  if (!speechText.trim()) {\n    // Try to use any string in the analysis as a fallback\n    if (typeof response.analysis === 'string') {\n      return response.analysis;\n    }\n\n    // Last resort fallback\n    return 'Analysis completed. Check the screen for details.';\n  }\n  return speechText.trim();\n};","map":{"version":3,"names":["processGeminiResponse","response","analysis","console","warn","includes","cleanedText","replace","trim","jsonData","JSON","parse","error","feedback","warnings","Array","isArray","nextSteps","misalignments","answer","details","recommendations","speechText","length","join"],"sources":["/Users/manmohan/Documents/drone_assembler/frontend/src/utils/speechUtils.js"],"sourcesContent":["// frontend/src/utils/speechUtils.js\n\nexport const processGeminiResponse = (response) => {\n  // Extract the main feedback from the analysis\n  if (!response || !response.analysis) {\n    console.warn('Invalid Gemini response format:', response);\n    return 'I could not analyze the image properly. Please try again.';\n  }\n\n  // Try to handle raw text that might contain JSON\n  if (typeof response.analysis === 'string' && \n      (response.analysis.includes('{') || response.analysis.includes('```'))) {\n    try {\n      // Clean any markdown formatting\n      const cleanedText = response.analysis\n        .replace(/```json/g, '')\n        .replace(/```/g, '')\n        .trim();\n        \n      // Try to parse as JSON\n      const jsonData = JSON.parse(cleanedText);\n      response.analysis = jsonData;\n    } catch (error) {\n      console.error('Failed to parse JSON in analysis:', error);\n      // Continue with the original text\n    }\n  }\n  \n  // Safe extraction of properties with fallbacks\n  const analysis = response.analysis || {};\n  const feedback = analysis.feedback || '';\n  const warnings = Array.isArray(analysis.warnings) ? analysis.warnings : [];\n  const nextSteps = Array.isArray(analysis.nextSteps) ? analysis.nextSteps : [];\n  const misalignments = Array.isArray(analysis.misalignments) ? analysis.misalignments : [];\n  const answer = analysis.answer || '';\n  const details = analysis.details || '';\n  const recommendations = Array.isArray(analysis.recommendations) ? analysis.recommendations : [];\n  \n  // Construct a natural speech response\n  let speechText = '';\n  \n  // Add primary content from either analysis or voice query\n  if (answer) {\n    speechText += answer + ' ';\n  }\n  \n  if (details) {\n    speechText += details + ' ';\n  }\n  \n  if (feedback) {\n    speechText += feedback + ' ';\n  }\n  \n  // Add warnings if present\n  if (warnings.length > 0) {\n    speechText += 'Please note the following warnings: ' + warnings.join('. ') + ' ';\n  }\n  \n  // Add recommendations if present\n  if (recommendations.length > 0) {\n    speechText += 'Recommendations: ' + recommendations.join('. ') + ' ';\n  }\n  \n  // Add misalignments if present\n  if (misalignments.length > 0) {\n    speechText += 'The following components need adjustment: ' + misalignments.join(', ') + ' ';\n  }\n  \n  // Add next steps if present\n  if (nextSteps.length > 0) {\n    speechText += 'Here are your next steps: ' + nextSteps.join('. ') + ' ';\n  }\n  \n  // Fallback if we somehow got no text\n  if (!speechText.trim()) {\n    // Try to use any string in the analysis as a fallback\n    if (typeof response.analysis === 'string') {\n      return response.analysis;\n    }\n    \n    // Last resort fallback\n    return 'Analysis completed. Check the screen for details.';\n  }\n  \n  return speechText.trim();\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,qBAAqB,GAAIC,QAAQ,IAAK;EACjD;EACA,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACC,QAAQ,EAAE;IACnCC,OAAO,CAACC,IAAI,CAAC,iCAAiC,EAAEH,QAAQ,CAAC;IACzD,OAAO,2DAA2D;EACpE;;EAEA;EACA,IAAI,OAAOA,QAAQ,CAACC,QAAQ,KAAK,QAAQ,KACpCD,QAAQ,CAACC,QAAQ,CAACG,QAAQ,CAAC,GAAG,CAAC,IAAIJ,QAAQ,CAACC,QAAQ,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;IAC1E,IAAI;MACF;MACA,MAAMC,WAAW,GAAGL,QAAQ,CAACC,QAAQ,CAClCK,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvBA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CACnBC,IAAI,CAAC,CAAC;;MAET;MACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;MACxCL,QAAQ,CAACC,QAAQ,GAAGO,QAAQ;IAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD;IACF;EACF;;EAEA;EACA,MAAMV,QAAQ,GAAGD,QAAQ,CAACC,QAAQ,IAAI,CAAC,CAAC;EACxC,MAAMW,QAAQ,GAAGX,QAAQ,CAACW,QAAQ,IAAI,EAAE;EACxC,MAAMC,QAAQ,GAAGC,KAAK,CAACC,OAAO,CAACd,QAAQ,CAACY,QAAQ,CAAC,GAAGZ,QAAQ,CAACY,QAAQ,GAAG,EAAE;EAC1E,MAAMG,SAAS,GAAGF,KAAK,CAACC,OAAO,CAACd,QAAQ,CAACe,SAAS,CAAC,GAAGf,QAAQ,CAACe,SAAS,GAAG,EAAE;EAC7E,MAAMC,aAAa,GAAGH,KAAK,CAACC,OAAO,CAACd,QAAQ,CAACgB,aAAa,CAAC,GAAGhB,QAAQ,CAACgB,aAAa,GAAG,EAAE;EACzF,MAAMC,MAAM,GAAGjB,QAAQ,CAACiB,MAAM,IAAI,EAAE;EACpC,MAAMC,OAAO,GAAGlB,QAAQ,CAACkB,OAAO,IAAI,EAAE;EACtC,MAAMC,eAAe,GAAGN,KAAK,CAACC,OAAO,CAACd,QAAQ,CAACmB,eAAe,CAAC,GAAGnB,QAAQ,CAACmB,eAAe,GAAG,EAAE;;EAE/F;EACA,IAAIC,UAAU,GAAG,EAAE;;EAEnB;EACA,IAAIH,MAAM,EAAE;IACVG,UAAU,IAAIH,MAAM,GAAG,GAAG;EAC5B;EAEA,IAAIC,OAAO,EAAE;IACXE,UAAU,IAAIF,OAAO,GAAG,GAAG;EAC7B;EAEA,IAAIP,QAAQ,EAAE;IACZS,UAAU,IAAIT,QAAQ,GAAG,GAAG;EAC9B;;EAEA;EACA,IAAIC,QAAQ,CAACS,MAAM,GAAG,CAAC,EAAE;IACvBD,UAAU,IAAI,sCAAsC,GAAGR,QAAQ,CAACU,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EAClF;;EAEA;EACA,IAAIH,eAAe,CAACE,MAAM,GAAG,CAAC,EAAE;IAC9BD,UAAU,IAAI,mBAAmB,GAAGD,eAAe,CAACG,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EACtE;;EAEA;EACA,IAAIN,aAAa,CAACK,MAAM,GAAG,CAAC,EAAE;IAC5BD,UAAU,IAAI,4CAA4C,GAAGJ,aAAa,CAACM,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EAC7F;;EAEA;EACA,IAAIP,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;IACxBD,UAAU,IAAI,4BAA4B,GAAGL,SAAS,CAACO,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EACzE;;EAEA;EACA,IAAI,CAACF,UAAU,CAACd,IAAI,CAAC,CAAC,EAAE;IACtB;IACA,IAAI,OAAOP,QAAQ,CAACC,QAAQ,KAAK,QAAQ,EAAE;MACzC,OAAOD,QAAQ,CAACC,QAAQ;IAC1B;;IAEA;IACA,OAAO,mDAAmD;EAC5D;EAEA,OAAOoB,UAAU,CAACd,IAAI,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}