{"ast":null,"code":"var _jsxFileName = \"/Users/manmohan/Documents/drone_assembler/frontend/src/contexts/ProjectContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/contexts/ProjectContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport Logger from '../utils/logger';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectContext = /*#__PURE__*/createContext();\n\n// Create a custom hook to use the project context\nexport const useProject = () => {\n  _s();\n  return useContext(ProjectContext);\n};\n\n// Provider component\n_s(useProject, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ProjectProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentProject, setCurrentProject] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [components, setComponents] = useState([]);\n  const [completedSteps, setCompletedSteps] = useState([]);\n\n  // Load project on component mount\n  useEffect(() => {\n    loadActiveProject();\n  }, []);\n\n  // Load the active project\n  const loadActiveProject = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const userId = getUserId();\n      const projectId = getProjectId();\n      if (!projectId) {\n        // No active project, so we're done loading\n        setIsLoading(false);\n        return;\n      }\n      Logger.info('Loading active project', {\n        userId,\n        projectId\n      });\n      const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n      if (!response.ok) {\n        throw new Error(`Failed to load project: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        // Set current project\n        const {\n          context\n        } = data;\n\n        // Get or fetch the complete project details\n        const projectDetail = await getFullProjectDetails(userId, projectId, context);\n        setCurrentProject(projectDetail);\n        setComponents(context.components || []);\n        setCompletedSteps(context.completedSteps || []);\n        Logger.info('Project loaded successfully', {\n          projectId,\n          name: context.projectName\n        });\n      } else {\n        throw new Error(data.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('Error loading project', error);\n      setError('Failed to load your project. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get full project details\n  const getFullProjectDetails = async (userId, projectId, context = null) => {\n    if (context && context.projectId === projectId) {\n      // We already have the context, construct project object\n      return {\n        id: context.projectId,\n        name: context.projectName,\n        drone_type: context.droneType,\n        current_step: context.currentStep,\n        components: context.components,\n        completed_steps: context.completedSteps,\n        last_interaction: context.lastInteraction\n      };\n    }\n\n    // Need to fetch the full project details\n    try {\n      const response = await fetch(`http://localhost:5003/api/assembly/project`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to load project details: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        return data.project;\n      } else {\n        throw new Error(data.error || 'Failed to load project details');\n      }\n    } catch (error) {\n      Logger.error('Error loading project details', error);\n      throw error;\n    }\n  };\n\n  // Set the active project\n  const setActiveProject = async projectId => {\n    try {\n      setIsLoading(true);\n\n      // Clear current project data first\n      setCurrentProject(null);\n      setComponents([]);\n      setCompletedSteps([]);\n      const userId = getUserId();\n      Logger.info('Setting active project', {\n        userId,\n        projectId\n      });\n\n      // Load fresh project data\n      const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n      if (!response.ok) {\n        throw new Error(`Failed to load project: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        // Set current project with fresh data\n        const {\n          context\n        } = data;\n        setCurrentProject({\n          project_id: context.projectId,\n          project_name: context.projectName,\n          drone_type: context.droneType,\n          current_step: context.currentStep,\n          components: context.components || [],\n          completed_steps: context.completedSteps || [],\n          last_interaction: context.lastInteraction\n        });\n        setComponents(context.components || []);\n        setCompletedSteps(context.completedSteps || []);\n        Logger.info('Project switched successfully', {\n          projectId,\n          name: context.projectName,\n          componentCount: (context.components || []).length\n        });\n      } else {\n        throw new Error(data.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('Error setting active project', error);\n      setError('Failed to set active project. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Add identified components to the project\n  const addComponents = async newComponents => {\n    try {\n      if (!currentProject || !newComponents || !newComponents.length) {\n        return;\n      }\n      const userId = getUserId();\n      const projectId = currentProject.project_id;\n\n      // Merge with existing components (avoiding duplicates)\n      const existingComponents = [...components];\n      const allComponents = [...existingComponents];\n      let addedNewComponents = false;\n      newComponents.forEach(newComp => {\n        const exists = existingComponents.some(existing => typeof existing === 'string' && typeof newComp === 'string' && existing.toLowerCase() === newComp.toLowerCase() || existing.name && newComp.name && existing.name.toLowerCase() === newComp.name.toLowerCase());\n        if (!exists) {\n          allComponents.push(newComp);\n          addedNewComponents = true;\n        }\n      });\n      if (!addedNewComponents) {\n        // No new components to add, skip update\n        return allComponents;\n      }\n\n      // Update local state first for UI responsiveness\n      setComponents(allComponents);\n\n      // IMPORTANT: Update currentProject immediately for UI refresh\n      setCurrentProject(prevProject => ({\n        ...prevProject,\n        components: allComponents\n      }));\n      Logger.info('Updating project components locally and in UI', {\n        projectId,\n        componentCount: allComponents.length\n      });\n\n      // Send to server\n      const response = await fetch(`http://localhost:5003/api/assembly/project/components`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId,\n          components: allComponents\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to update components: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to update components');\n      }\n      Logger.info('Components updated successfully', {\n        projectId,\n        componentCount: allComponents.length\n      });\n      return allComponents;\n    } catch (error) {\n      Logger.error('Error updating components', error);\n      setError('Failed to update components. Please try again.');\n      // Revert to the original state\n      setComponents(components);\n      // Also revert the currentProject\n      setCurrentProject(prevProject => ({\n        ...prevProject,\n        components: components\n      }));\n      return null;\n    }\n  };\n\n  // Add a completed step\n  const addCompletedStep = async step => {\n    try {\n      if (!currentProject || !step) {\n        return;\n      }\n      const userId = getUserId();\n      const projectId = currentProject.project_id;\n\n      // Update local state first for UI responsiveness\n      const updatedSteps = [...completedSteps, step];\n      setCompletedSteps(updatedSteps);\n\n      // Send to server\n      Logger.info('Adding completed step', {\n        projectId,\n        stepNumber: step.stepNumber\n      });\n      const response = await fetch(`http://localhost:5003/api/assembly/project/step`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId,\n          step\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to add completed step: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to add completed step');\n      }\n\n      // Update the current project with the response data\n      setCurrentProject({\n        ...currentProject,\n        current_step: step.stepNumber + 1,\n        completed_steps: updatedSteps\n      });\n      Logger.info('Completed step added successfully', {\n        projectId,\n        stepNumber: step.stepNumber\n      });\n      return updatedSteps;\n    } catch (error) {\n      Logger.error('Error adding completed step', error);\n      setError('Failed to add completed step. Please try again.');\n      // Revert to the original state\n      setCompletedSteps(completedSteps);\n      return null;\n    }\n  };\n\n  // Value to be provided by the context\n  const value = {\n    currentProject,\n    isLoading,\n    error,\n    components,\n    completedSteps,\n    loadActiveProject,\n    setActiveProject,\n    addComponents,\n    addCompletedStep\n  };\n  return /*#__PURE__*/_jsxDEV(ProjectContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 5\n  }, this);\n};\n_s2(ProjectProvider, \"Jrfl5IRKFknNymEHeXjLz7L6xN8=\");\n_c = ProjectProvider;\nvar _c;\n$RefreshReg$(_c, \"ProjectProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","getUserId","getProjectId","Logger","jsxDEV","_jsxDEV","ProjectContext","useProject","_s","ProjectProvider","children","_s2","currentProject","setCurrentProject","isLoading","setIsLoading","error","setError","components","setComponents","completedSteps","setCompletedSteps","loadActiveProject","userId","projectId","info","response","fetch","ok","Error","statusText","data","json","success","context","projectDetail","getFullProjectDetails","name","projectName","id","drone_type","droneType","current_step","currentStep","completed_steps","last_interaction","lastInteraction","method","headers","body","JSON","stringify","project","setActiveProject","project_id","project_name","componentCount","length","addComponents","newComponents","existingComponents","allComponents","addedNewComponents","forEach","newComp","exists","some","existing","toLowerCase","push","prevProject","addCompletedStep","step","updatedSteps","stepNumber","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/manmohan/Documents/drone_assembler/frontend/src/contexts/ProjectContext.js"],"sourcesContent":["// frontend/src/contexts/ProjectContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getUserId, getProjectId } from '../utils/userIdentification';\nimport Logger from '../utils/logger';\n\n// Create the context\nconst ProjectContext = createContext();\n\n// Create a custom hook to use the project context\nexport const useProject = () => useContext(ProjectContext);\n\n// Provider component\nexport const ProjectProvider = ({ children }) => {\n  const [currentProject, setCurrentProject] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [components, setComponents] = useState([]);\n  const [completedSteps, setCompletedSteps] = useState([]);\n\n  // Load project on component mount\n  useEffect(() => {\n    loadActiveProject();\n  }, []);\n\n  // Load the active project\n  const loadActiveProject = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const userId = getUserId();\n      const projectId = getProjectId();\n      \n      if (!projectId) {\n        // No active project, so we're done loading\n        setIsLoading(false);\n        return;\n      }\n      \n      Logger.info('Loading active project', { userId, projectId });\n      \n      const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load project: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        // Set current project\n        const { context } = data;\n        \n        // Get or fetch the complete project details\n        const projectDetail = await getFullProjectDetails(userId, projectId, context);\n        \n        setCurrentProject(projectDetail);\n        setComponents(context.components || []);\n        setCompletedSteps(context.completedSteps || []);\n        \n        Logger.info('Project loaded successfully', { \n          projectId, \n          name: context.projectName\n        });\n      } else {\n        throw new Error(data.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('Error loading project', error);\n      setError('Failed to load your project. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get full project details\n  const getFullProjectDetails = async (userId, projectId, context = null) => {\n    if (context && context.projectId === projectId) {\n      // We already have the context, construct project object\n      return {\n        id: context.projectId,\n        name: context.projectName,\n        drone_type: context.droneType,\n        current_step: context.currentStep,\n        components: context.components,\n        completed_steps: context.completedSteps,\n        last_interaction: context.lastInteraction\n      };\n    }\n    \n    // Need to fetch the full project details\n    try {\n      const response = await fetch(`http://localhost:5003/api/assembly/project`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load project details: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.project;\n      } else {\n        throw new Error(data.error || 'Failed to load project details');\n      }\n    } catch (error) {\n      Logger.error('Error loading project details', error);\n      throw error;\n    }\n  };\n\n  // Set the active project\n  const setActiveProject = async (projectId) => {\n    try {\n      setIsLoading(true);\n      \n      // Clear current project data first\n      setCurrentProject(null);\n      setComponents([]);\n      setCompletedSteps([]);\n      \n      const userId = getUserId();\n      \n      Logger.info('Setting active project', { userId, projectId });\n      \n      // Load fresh project data\n      const response = await fetch(`http://localhost:5003/api/assembly/project/${userId}/${projectId}/context`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load project: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        // Set current project with fresh data\n        const { context } = data;\n        \n        setCurrentProject({\n          project_id: context.projectId,\n          project_name: context.projectName,\n          drone_type: context.droneType,\n          current_step: context.currentStep,\n          components: context.components || [],\n          completed_steps: context.completedSteps || [],\n          last_interaction: context.lastInteraction\n        });\n        \n        setComponents(context.components || []);\n        setCompletedSteps(context.completedSteps || []);\n        \n        Logger.info('Project switched successfully', { \n          projectId, \n          name: context.projectName,\n          componentCount: (context.components || []).length\n        });\n      } else {\n        throw new Error(data.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('Error setting active project', error);\n      setError('Failed to set active project. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Add identified components to the project\n  const addComponents = async (newComponents) => {\n    try {\n      if (!currentProject || !newComponents || !newComponents.length) {\n        return;\n      }\n      \n      const userId = getUserId();\n      const projectId = currentProject.project_id;\n      \n      // Merge with existing components (avoiding duplicates)\n      const existingComponents = [...components];\n      \n      const allComponents = [...existingComponents];\n      let addedNewComponents = false;\n      \n      newComponents.forEach(newComp => {\n        const exists = existingComponents.some(existing => \n          (typeof existing === 'string' && typeof newComp === 'string' && existing.toLowerCase() === newComp.toLowerCase()) ||\n          (existing.name && newComp.name && existing.name.toLowerCase() === newComp.name.toLowerCase())\n        );\n        \n        if (!exists) {\n          allComponents.push(newComp);\n          addedNewComponents = true;\n        }\n      });\n      \n      if (!addedNewComponents) {\n        // No new components to add, skip update\n        return allComponents;\n      }\n      \n      // Update local state first for UI responsiveness\n      setComponents(allComponents);\n      \n      // IMPORTANT: Update currentProject immediately for UI refresh\n      setCurrentProject(prevProject => ({\n        ...prevProject,\n        components: allComponents\n      }));\n      \n      Logger.info('Updating project components locally and in UI', { \n        projectId,\n        componentCount: allComponents.length\n      });\n      \n      // Send to server\n      const response = await fetch(`http://localhost:5003/api/assembly/project/components`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId,\n          components: allComponents\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to update components: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.error || 'Failed to update components');\n      }\n      \n      Logger.info('Components updated successfully', {\n        projectId,\n        componentCount: allComponents.length\n      });\n      \n      return allComponents;\n    } catch (error) {\n      Logger.error('Error updating components', error);\n      setError('Failed to update components. Please try again.');\n      // Revert to the original state\n      setComponents(components);\n      // Also revert the currentProject\n      setCurrentProject(prevProject => ({\n        ...prevProject,\n        components: components\n      }));\n      return null;\n    }\n  };\n\n  // Add a completed step\n  const addCompletedStep = async (step) => {\n    try {\n      if (!currentProject || !step) {\n        return;\n      }\n      \n      const userId = getUserId();\n      const projectId = currentProject.project_id;\n      \n      // Update local state first for UI responsiveness\n      const updatedSteps = [...completedSteps, step];\n      setCompletedSteps(updatedSteps);\n      \n      // Send to server\n      Logger.info('Adding completed step', { \n        projectId,\n        stepNumber: step.stepNumber\n      });\n      \n      const response = await fetch(`http://localhost:5003/api/assembly/project/step`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          projectId,\n          step\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to add completed step: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.error || 'Failed to add completed step');\n      }\n      \n      // Update the current project with the response data\n      setCurrentProject({\n        ...currentProject,\n        current_step: step.stepNumber + 1,\n        completed_steps: updatedSteps\n      });\n      \n      Logger.info('Completed step added successfully', {\n        projectId,\n        stepNumber: step.stepNumber\n      });\n      \n      return updatedSteps;\n    } catch (error) {\n      Logger.error('Error adding completed step', error);\n      setError('Failed to add completed step. Please try again.');\n      // Revert to the original state\n      setCompletedSteps(completedSteps);\n      return null;\n    }\n  };\n\n  // Value to be provided by the context\n  const value = {\n    currentProject,\n    isLoading,\n    error,\n    components,\n    completedSteps,\n    loadActiveProject,\n    setActiveProject,\n    addComponents,\n    addCompletedStep\n  };\n\n  return (\n    <ProjectContext.Provider value={value}>\n      {children}\n    </ProjectContext.Provider>\n  );\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,SAAS,EAAEC,YAAY,QAAQ,6BAA6B;AACrE,OAAOC,MAAM,MAAM,iBAAiB;;AAEpC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGT,aAAa,CAAC,CAAC;;AAEtC;AACA,OAAO,MAAMU,UAAU,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,cAAc,CAAC;AAAA;;AAE1D;AAAAE,EAAA,CAFaD,UAAU;AAGvB,OAAO,MAAME,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC/C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACAC,SAAS,CAAC,MAAM;IACduB,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACFP,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMM,MAAM,GAAGtB,SAAS,CAAC,CAAC;MAC1B,MAAMuB,SAAS,GAAGtB,YAAY,CAAC,CAAC;MAEhC,IAAI,CAACsB,SAAS,EAAE;QACd;QACAT,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;MAEAZ,MAAM,CAACsB,IAAI,CAAC,wBAAwB,EAAE;QAAEF,MAAM;QAAEC;MAAU,CAAC,CAAC;MAE5D,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8CJ,MAAM,IAAIC,SAAS,UAAU,CAAC;MAEzG,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BH,QAAQ,CAACI,UAAU,EAAE,CAAC;MACnE;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB;QACA,MAAM;UAAEC;QAAQ,CAAC,GAAGH,IAAI;;QAExB;QACA,MAAMI,aAAa,GAAG,MAAMC,qBAAqB,CAACb,MAAM,EAAEC,SAAS,EAAEU,OAAO,CAAC;QAE7ErB,iBAAiB,CAACsB,aAAa,CAAC;QAChChB,aAAa,CAACe,OAAO,CAAChB,UAAU,IAAI,EAAE,CAAC;QACvCG,iBAAiB,CAACa,OAAO,CAACd,cAAc,IAAI,EAAE,CAAC;QAE/CjB,MAAM,CAACsB,IAAI,CAAC,6BAA6B,EAAE;UACzCD,SAAS;UACTa,IAAI,EAAEH,OAAO,CAACI;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM,IAAIT,KAAK,CAACE,IAAI,CAACf,KAAK,IAAI,wBAAwB,CAAC;MACzD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdb,MAAM,CAACa,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC5CC,QAAQ,CAAC,gDAAgD,CAAC;IAC5D,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMqB,qBAAqB,GAAG,MAAAA,CAAOb,MAAM,EAAEC,SAAS,EAAEU,OAAO,GAAG,IAAI,KAAK;IACzE,IAAIA,OAAO,IAAIA,OAAO,CAACV,SAAS,KAAKA,SAAS,EAAE;MAC9C;MACA,OAAO;QACLe,EAAE,EAAEL,OAAO,CAACV,SAAS;QACrBa,IAAI,EAAEH,OAAO,CAACI,WAAW;QACzBE,UAAU,EAAEN,OAAO,CAACO,SAAS;QAC7BC,YAAY,EAAER,OAAO,CAACS,WAAW;QACjCzB,UAAU,EAAEgB,OAAO,CAAChB,UAAU;QAC9B0B,eAAe,EAAEV,OAAO,CAACd,cAAc;QACvCyB,gBAAgB,EAAEX,OAAO,CAACY;MAC5B,CAAC;IACH;;IAEA;IACA,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACzEoB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB5B,MAAM;UACNC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmCH,QAAQ,CAACI,UAAU,EAAE,CAAC;MAC3E;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB,OAAOF,IAAI,CAACqB,OAAO;MACrB,CAAC,MAAM;QACL,MAAM,IAAIvB,KAAK,CAACE,IAAI,CAACf,KAAK,IAAI,gCAAgC,CAAC;MACjE;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdb,MAAM,CAACa,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMqC,gBAAgB,GAAG,MAAO7B,SAAS,IAAK;IAC5C,IAAI;MACFT,YAAY,CAAC,IAAI,CAAC;;MAElB;MACAF,iBAAiB,CAAC,IAAI,CAAC;MACvBM,aAAa,CAAC,EAAE,CAAC;MACjBE,iBAAiB,CAAC,EAAE,CAAC;MAErB,MAAME,MAAM,GAAGtB,SAAS,CAAC,CAAC;MAE1BE,MAAM,CAACsB,IAAI,CAAC,wBAAwB,EAAE;QAAEF,MAAM;QAAEC;MAAU,CAAC,CAAC;;MAE5D;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8CJ,MAAM,IAAIC,SAAS,UAAU,CAAC;MAEzG,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BH,QAAQ,CAACI,UAAU,EAAE,CAAC;MACnE;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB;QACA,MAAM;UAAEC;QAAQ,CAAC,GAAGH,IAAI;QAExBlB,iBAAiB,CAAC;UAChByC,UAAU,EAAEpB,OAAO,CAACV,SAAS;UAC7B+B,YAAY,EAAErB,OAAO,CAACI,WAAW;UACjCE,UAAU,EAAEN,OAAO,CAACO,SAAS;UAC7BC,YAAY,EAAER,OAAO,CAACS,WAAW;UACjCzB,UAAU,EAAEgB,OAAO,CAAChB,UAAU,IAAI,EAAE;UACpC0B,eAAe,EAAEV,OAAO,CAACd,cAAc,IAAI,EAAE;UAC7CyB,gBAAgB,EAAEX,OAAO,CAACY;QAC5B,CAAC,CAAC;QAEF3B,aAAa,CAACe,OAAO,CAAChB,UAAU,IAAI,EAAE,CAAC;QACvCG,iBAAiB,CAACa,OAAO,CAACd,cAAc,IAAI,EAAE,CAAC;QAE/CjB,MAAM,CAACsB,IAAI,CAAC,+BAA+B,EAAE;UAC3CD,SAAS;UACTa,IAAI,EAAEH,OAAO,CAACI,WAAW;UACzBkB,cAAc,EAAE,CAACtB,OAAO,CAAChB,UAAU,IAAI,EAAE,EAAEuC;QAC7C,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM,IAAI5B,KAAK,CAACE,IAAI,CAACf,KAAK,IAAI,wBAAwB,CAAC;MACzD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdb,MAAM,CAACa,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACnDC,QAAQ,CAAC,iDAAiD,CAAC;IAC7D,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAM2C,aAAa,GAAG,MAAOC,aAAa,IAAK;IAC7C,IAAI;MACF,IAAI,CAAC/C,cAAc,IAAI,CAAC+C,aAAa,IAAI,CAACA,aAAa,CAACF,MAAM,EAAE;QAC9D;MACF;MAEA,MAAMlC,MAAM,GAAGtB,SAAS,CAAC,CAAC;MAC1B,MAAMuB,SAAS,GAAGZ,cAAc,CAAC0C,UAAU;;MAE3C;MACA,MAAMM,kBAAkB,GAAG,CAAC,GAAG1C,UAAU,CAAC;MAE1C,MAAM2C,aAAa,GAAG,CAAC,GAAGD,kBAAkB,CAAC;MAC7C,IAAIE,kBAAkB,GAAG,KAAK;MAE9BH,aAAa,CAACI,OAAO,CAACC,OAAO,IAAI;QAC/B,MAAMC,MAAM,GAAGL,kBAAkB,CAACM,IAAI,CAACC,QAAQ,IAC5C,OAAOA,QAAQ,KAAK,QAAQ,IAAI,OAAOH,OAAO,KAAK,QAAQ,IAAIG,QAAQ,CAACC,WAAW,CAAC,CAAC,KAAKJ,OAAO,CAACI,WAAW,CAAC,CAAC,IAC/GD,QAAQ,CAAC9B,IAAI,IAAI2B,OAAO,CAAC3B,IAAI,IAAI8B,QAAQ,CAAC9B,IAAI,CAAC+B,WAAW,CAAC,CAAC,KAAKJ,OAAO,CAAC3B,IAAI,CAAC+B,WAAW,CAAC,CAC7F,CAAC;QAED,IAAI,CAACH,MAAM,EAAE;UACXJ,aAAa,CAACQ,IAAI,CAACL,OAAO,CAAC;UAC3BF,kBAAkB,GAAG,IAAI;QAC3B;MACF,CAAC,CAAC;MAEF,IAAI,CAACA,kBAAkB,EAAE;QACvB;QACA,OAAOD,aAAa;MACtB;;MAEA;MACA1C,aAAa,CAAC0C,aAAa,CAAC;;MAE5B;MACAhD,iBAAiB,CAACyD,WAAW,KAAK;QAChC,GAAGA,WAAW;QACdpD,UAAU,EAAE2C;MACd,CAAC,CAAC,CAAC;MAEH1D,MAAM,CAACsB,IAAI,CAAC,+CAA+C,EAAE;QAC3DD,SAAS;QACTgC,cAAc,EAAEK,aAAa,CAACJ;MAChC,CAAC,CAAC;;MAEF;MACA,MAAM/B,QAAQ,GAAG,MAAMC,KAAK,CAAC,uDAAuD,EAAE;QACpFoB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB5B,MAAM;UACNC,SAAS;UACTN,UAAU,EAAE2C;QACd,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACnC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgCH,QAAQ,CAACI,UAAU,EAAE,CAAC;MACxE;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,IAAI,CAACD,IAAI,CAACE,OAAO,EAAE;QACjB,MAAM,IAAIJ,KAAK,CAACE,IAAI,CAACf,KAAK,IAAI,6BAA6B,CAAC;MAC9D;MAEAb,MAAM,CAACsB,IAAI,CAAC,iCAAiC,EAAE;QAC7CD,SAAS;QACTgC,cAAc,EAAEK,aAAa,CAACJ;MAChC,CAAC,CAAC;MAEF,OAAOI,aAAa;IACtB,CAAC,CAAC,OAAO7C,KAAK,EAAE;MACdb,MAAM,CAACa,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAChDC,QAAQ,CAAC,gDAAgD,CAAC;MAC1D;MACAE,aAAa,CAACD,UAAU,CAAC;MACzB;MACAL,iBAAiB,CAACyD,WAAW,KAAK;QAChC,GAAGA,WAAW;QACdpD,UAAU,EAAEA;MACd,CAAC,CAAC,CAAC;MACH,OAAO,IAAI;IACb;EACF,CAAC;;EAED;EACA,MAAMqD,gBAAgB,GAAG,MAAOC,IAAI,IAAK;IACvC,IAAI;MACF,IAAI,CAAC5D,cAAc,IAAI,CAAC4D,IAAI,EAAE;QAC5B;MACF;MAEA,MAAMjD,MAAM,GAAGtB,SAAS,CAAC,CAAC;MAC1B,MAAMuB,SAAS,GAAGZ,cAAc,CAAC0C,UAAU;;MAE3C;MACA,MAAMmB,YAAY,GAAG,CAAC,GAAGrD,cAAc,EAAEoD,IAAI,CAAC;MAC9CnD,iBAAiB,CAACoD,YAAY,CAAC;;MAE/B;MACAtE,MAAM,CAACsB,IAAI,CAAC,uBAAuB,EAAE;QACnCD,SAAS;QACTkD,UAAU,EAAEF,IAAI,CAACE;MACnB,CAAC,CAAC;MAEF,MAAMhD,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,EAAE;QAC9EoB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB5B,MAAM;UACNC,SAAS;UACTgD;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAAC9C,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiCH,QAAQ,CAACI,UAAU,EAAE,CAAC;MACzE;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,IAAI,CAACD,IAAI,CAACE,OAAO,EAAE;QACjB,MAAM,IAAIJ,KAAK,CAACE,IAAI,CAACf,KAAK,IAAI,8BAA8B,CAAC;MAC/D;;MAEA;MACAH,iBAAiB,CAAC;QAChB,GAAGD,cAAc;QACjB8B,YAAY,EAAE8B,IAAI,CAACE,UAAU,GAAG,CAAC;QACjC9B,eAAe,EAAE6B;MACnB,CAAC,CAAC;MAEFtE,MAAM,CAACsB,IAAI,CAAC,mCAAmC,EAAE;QAC/CD,SAAS;QACTkD,UAAU,EAAEF,IAAI,CAACE;MACnB,CAAC,CAAC;MAEF,OAAOD,YAAY;IACrB,CAAC,CAAC,OAAOzD,KAAK,EAAE;MACdb,MAAM,CAACa,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MAClDC,QAAQ,CAAC,iDAAiD,CAAC;MAC3D;MACAI,iBAAiB,CAACD,cAAc,CAAC;MACjC,OAAO,IAAI;IACb;EACF,CAAC;;EAED;EACA,MAAMuD,KAAK,GAAG;IACZ/D,cAAc;IACdE,SAAS;IACTE,KAAK;IACLE,UAAU;IACVE,cAAc;IACdE,iBAAiB;IACjB+B,gBAAgB;IAChBK,aAAa;IACba;EACF,CAAC;EAED,oBACElE,OAAA,CAACC,cAAc,CAACsE,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAjE,QAAA,EACnCA;EAAQ;IAAAmE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACrE,GAAA,CAhVWF,eAAe;AAAAwE,EAAA,GAAfxE,eAAe;AAAA,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}