{"ast":null,"code":"// frontend/src/utils/speechUtils.js\n\nexport const processGeminiResponse = response => {\n  // Extract the main feedback from the analysis\n  if (!response || !response.analysis) {\n    console.warn('Invalid Gemini response format:', response);\n    return 'I could not analyze the image properly. Please try again.';\n  }\n\n  // Try to handle raw text that might contain JSON\n  if (typeof response.analysis === 'string' && (response.analysis.includes('{') || response.analysis.includes('```'))) {\n    try {\n      // Clean any markdown formatting\n      const cleanedText = response.analysis.replace(/```json/g, '').replace(/```/g, '').trim();\n\n      // Try to parse as JSON\n      const jsonData = JSON.parse(cleanedText);\n      response.analysis = jsonData;\n    } catch (error) {\n      console.error('Failed to parse JSON in analysis:', error);\n      // Continue with the original text\n    }\n  }\n  const {\n    feedback,\n    warnings = [],\n    nextSteps = [],\n    misalignments = [],\n    answer,\n    details,\n    recommendations = []\n  } = response.analysis;\n\n  // Construct a natural speech response\n  let speechText = '';\n\n  // Add primary content from either analysis or voice query\n  if (answer) {\n    speechText += answer + ' ';\n  }\n  if (details) {\n    speechText += details + ' ';\n  }\n  if (feedback) {\n    speechText += feedback + ' ';\n  }\n\n  // Add warnings if present\n  if (warnings.length > 0) {\n    speechText += 'Please note the following warnings: ' + warnings.join('. ') + ' ';\n  }\n\n  // Add recommendations if present\n  if (recommendations.length > 0) {\n    speechText += 'Recommendations: ' + recommendations.join('. ') + ' ';\n  }\n\n  // Add misalignments if present\n  if (misalignments.length > 0) {\n    speechText += 'The following components need adjustment: ' + misalignments.join(', ') + ' ';\n  }\n\n  // Add next steps if present\n  if (nextSteps.length > 0) {\n    speechText += 'Here are your next steps: ' + nextSteps.join('. ') + ' ';\n  }\n  return speechText.trim() || 'Analysis completed.';\n};","map":{"version":3,"names":["processGeminiResponse","response","analysis","console","warn","includes","cleanedText","replace","trim","jsonData","JSON","parse","error","feedback","warnings","nextSteps","misalignments","answer","details","recommendations","speechText","length","join"],"sources":["/Users/manmohan/drone-assembly-ai/frontend/src/utils/speechUtils.js"],"sourcesContent":["// frontend/src/utils/speechUtils.js\n\nexport const processGeminiResponse = (response) => {\n  // Extract the main feedback from the analysis\n  if (!response || !response.analysis) {\n    console.warn('Invalid Gemini response format:', response);\n    return 'I could not analyze the image properly. Please try again.';\n  }\n\n  // Try to handle raw text that might contain JSON\n  if (typeof response.analysis === 'string' && \n      (response.analysis.includes('{') || response.analysis.includes('```'))) {\n    try {\n      // Clean any markdown formatting\n      const cleanedText = response.analysis\n        .replace(/```json/g, '')\n        .replace(/```/g, '')\n        .trim();\n        \n      // Try to parse as JSON\n      const jsonData = JSON.parse(cleanedText);\n      response.analysis = jsonData;\n    } catch (error) {\n      console.error('Failed to parse JSON in analysis:', error);\n      // Continue with the original text\n    }\n  }\n  \n  const { \n    feedback, \n    warnings = [], \n    nextSteps = [], \n    misalignments = [],\n    answer,\n    details,\n    recommendations = []\n  } = response.analysis;\n  \n  // Construct a natural speech response\n  let speechText = '';\n  \n  // Add primary content from either analysis or voice query\n  if (answer) {\n    speechText += answer + ' ';\n  }\n  \n  if (details) {\n    speechText += details + ' ';\n  }\n  \n  if (feedback) {\n    speechText += feedback + ' ';\n  }\n  \n  // Add warnings if present\n  if (warnings.length > 0) {\n    speechText += 'Please note the following warnings: ' + warnings.join('. ') + ' ';\n  }\n  \n  // Add recommendations if present\n  if (recommendations.length > 0) {\n    speechText += 'Recommendations: ' + recommendations.join('. ') + ' ';\n  }\n  \n  // Add misalignments if present\n  if (misalignments.length > 0) {\n    speechText += 'The following components need adjustment: ' + misalignments.join(', ') + ' ';\n  }\n  \n  // Add next steps if present\n  if (nextSteps.length > 0) {\n    speechText += 'Here are your next steps: ' + nextSteps.join('. ') + ' ';\n  }\n  \n  return speechText.trim() || 'Analysis completed.';\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,qBAAqB,GAAIC,QAAQ,IAAK;EACjD;EACA,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACC,QAAQ,EAAE;IACnCC,OAAO,CAACC,IAAI,CAAC,iCAAiC,EAAEH,QAAQ,CAAC;IACzD,OAAO,2DAA2D;EACpE;;EAEA;EACA,IAAI,OAAOA,QAAQ,CAACC,QAAQ,KAAK,QAAQ,KACpCD,QAAQ,CAACC,QAAQ,CAACG,QAAQ,CAAC,GAAG,CAAC,IAAIJ,QAAQ,CAACC,QAAQ,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;IAC1E,IAAI;MACF;MACA,MAAMC,WAAW,GAAGL,QAAQ,CAACC,QAAQ,CAClCK,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvBA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CACnBC,IAAI,CAAC,CAAC;;MAET;MACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;MACxCL,QAAQ,CAACC,QAAQ,GAAGO,QAAQ;IAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD;IACF;EACF;EAEA,MAAM;IACJC,QAAQ;IACRC,QAAQ,GAAG,EAAE;IACbC,SAAS,GAAG,EAAE;IACdC,aAAa,GAAG,EAAE;IAClBC,MAAM;IACNC,OAAO;IACPC,eAAe,GAAG;EACpB,CAAC,GAAGlB,QAAQ,CAACC,QAAQ;;EAErB;EACA,IAAIkB,UAAU,GAAG,EAAE;;EAEnB;EACA,IAAIH,MAAM,EAAE;IACVG,UAAU,IAAIH,MAAM,GAAG,GAAG;EAC5B;EAEA,IAAIC,OAAO,EAAE;IACXE,UAAU,IAAIF,OAAO,GAAG,GAAG;EAC7B;EAEA,IAAIL,QAAQ,EAAE;IACZO,UAAU,IAAIP,QAAQ,GAAG,GAAG;EAC9B;;EAEA;EACA,IAAIC,QAAQ,CAACO,MAAM,GAAG,CAAC,EAAE;IACvBD,UAAU,IAAI,sCAAsC,GAAGN,QAAQ,CAACQ,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EAClF;;EAEA;EACA,IAAIH,eAAe,CAACE,MAAM,GAAG,CAAC,EAAE;IAC9BD,UAAU,IAAI,mBAAmB,GAAGD,eAAe,CAACG,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EACtE;;EAEA;EACA,IAAIN,aAAa,CAACK,MAAM,GAAG,CAAC,EAAE;IAC5BD,UAAU,IAAI,4CAA4C,GAAGJ,aAAa,CAACM,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EAC7F;;EAEA;EACA,IAAIP,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;IACxBD,UAAU,IAAI,4BAA4B,GAAGL,SAAS,CAACO,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EACzE;EAEA,OAAOF,UAAU,CAACZ,IAAI,CAAC,CAAC,IAAI,qBAAqB;AACnD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}