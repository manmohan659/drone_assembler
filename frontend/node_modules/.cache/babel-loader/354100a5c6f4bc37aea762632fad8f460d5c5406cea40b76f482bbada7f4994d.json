{"ast":null,"code":"var _jsxFileName = \"/Users/manmohan/Documents/drone_assembler/frontend/src/components/VoiceInput.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/VoiceInput.js\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Mic, MicOff } from 'lucide-react';\nimport Logger from '../utils/logger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceInput = ({\n  onVoiceInput,\n  disabled = false\n}) => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [recognition, setRecognition] = useState(null);\n  const [error, setError] = useState(null);\n  const [processingStatus, setProcessingStatus] = useState(null);\n  const [silenceTimer, setSilenceTimer] = useState(null);\n  const [lastResultTime, setLastResultTime] = useState(null);\n  const [finalTranscript, setFinalTranscript] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Function to restart listening if it stops unexpectedly\n  const restartRecognition = useCallback(() => {\n    if (recognition && isListening && !isSubmitting) {\n      try {\n        console.log(\"[DEBUG] Attempting to restart voice recognition\");\n        recognition.start();\n      } catch (error) {\n        console.error(\"[DEBUG] Error restarting recognition:\", error);\n        // If we can't restart, create a new instance\n        startListening();\n      }\n    }\n  }, [recognition, isListening, isSubmitting]);\n\n  // Check for long silence and submit if needed\n  const checkSilence = useCallback(() => {\n    if (isListening && lastResultTime) {\n      const silenceTime = Date.now() - lastResultTime;\n      if (silenceTime > 2000 && transcript && transcript !== 'Listening...' && !isSubmitting) {\n        console.log(\"[DEBUG] Detected silence, submitting transcript:\", transcript);\n        submitTranscript(transcript);\n      }\n    }\n  }, [isListening, lastResultTime, transcript, isSubmitting]);\n\n  // Function to submit the final transcript\n  const submitTranscript = useCallback(text => {\n    if (isSubmitting || !text || text === 'Listening...') return;\n    setIsSubmitting(true);\n    setProcessingStatus('Processing voice input...');\n    Logger.voiceCapture(text);\n\n    // Store the final transcript\n    setFinalTranscript(text);\n\n    // Pass the transcript to parent component\n    onVoiceInput(text, status => {\n      setProcessingStatus(status);\n      // Clear transcript and status after processing completes\n      setTimeout(() => {\n        setTranscript('');\n        setProcessingStatus(null);\n        setIsSubmitting(false);\n      }, 5000);\n    });\n  }, [onVoiceInput, isSubmitting]);\n  const startListening = useCallback(() => {\n    try {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        throw new Error('Speech recognition is not supported in this browser');\n      }\n\n      // Clear any previous state\n      if (recognition) {\n        try {\n          recognition.stop();\n        } catch (e) {\n          console.log(\"Recognition already stopped\");\n        }\n      }\n      if (silenceTimer) {\n        clearInterval(silenceTimer);\n      }\n      const recognitionInstance = new SpeechRecognition();\n\n      // Enable continuous mode for smoother experience\n      recognitionInstance.continuous = true;\n      recognitionInstance.interimResults = true;\n      recognitionInstance.lang = 'en-US';\n      recognitionInstance.maxAlternatives = 1;\n      recognitionInstance.onstart = () => {\n        Logger.info('Voice recognition started');\n        setIsListening(true);\n        setError(null);\n        setTranscript('Listening...');\n        setProcessingStatus(null);\n        setLastResultTime(Date.now());\n\n        // Start silence detection interval\n        const timer = setInterval(checkSilence, 500);\n        setSilenceTimer(timer);\n      };\n      recognitionInstance.onresult = event => {\n        setLastResultTime(Date.now());\n\n        // Build transcript from all results\n        let currentTranscript = '';\n        let isFinal = false;\n        for (let i = 0; i < event.results.length; i++) {\n          const result = event.results[i];\n          currentTranscript += result[0].transcript;\n          if (result.isFinal) {\n            isFinal = true;\n          }\n        }\n\n        // If we have a transcript, update it\n        if (currentTranscript) {\n          setTranscript(currentTranscript);\n        }\n\n        // If this is explicitly marked as final or we have a long enough transcript\n        if (isFinal || currentTranscript.length > 10 && !event.results[event.results.length - 1].isFinal) {\n          submitTranscript(currentTranscript);\n        }\n      };\n      recognitionInstance.onerror = event => {\n        // Don't treat \"no-speech\" as an error, just keep listening\n        if (event.error === 'no-speech') {\n          console.log(\"[DEBUG] No speech detected yet, continuing to listen\");\n          return;\n        }\n\n        // For \"aborted\" errors, try to restart\n        if (event.error === 'aborted' && isListening) {\n          console.log(\"[DEBUG] Recognition aborted, attempting to restart\");\n          setTimeout(restartRecognition, 300);\n          return;\n        }\n        Logger.error('Voice recognition error:', event.error);\n        setError(`Error: ${event.error}`);\n        setIsListening(false);\n\n        // Try to restart for recoverable errors\n        if (event.error === 'network' || event.error === 'service-not-allowed') {\n          console.log(\"[DEBUG] Recoverable error, attempting to restart\");\n          setTimeout(startListening, 1000);\n        }\n      };\n      recognitionInstance.onend = () => {\n        console.log(\"[DEBUG] Recognition ended, isListening:\", isListening);\n\n        // If we're still supposed to be listening, try to restart\n        if (isListening && !isSubmitting) {\n          console.log(\"[DEBUG] Recognition ended while still listening, restarting\");\n          setTimeout(restartRecognition, 300);\n        } else {\n          // Normal end of recognition\n          Logger.info('Voice recognition ended');\n          setIsListening(false);\n\n          // If we have a transcript but haven't submitted it yet, submit it now\n          if (transcript && transcript !== 'Listening...' && !isSubmitting && !finalTranscript) {\n            submitTranscript(transcript);\n          } else if (!error && !processingStatus && !isSubmitting) {\n            setProcessingStatus('Processing...');\n          }\n\n          // Clean up silence timer\n          if (silenceTimer) {\n            clearInterval(silenceTimer);\n            setSilenceTimer(null);\n          }\n        }\n      };\n      setRecognition(recognitionInstance);\n      recognitionInstance.start();\n    } catch (error) {\n      Logger.error('Failed to initialize voice recognition:', error);\n      setError(error.message);\n    }\n  }, [onVoiceInput, recognition, isListening, transcript, silenceTimer, checkSilence, submitTranscript, finalTranscript, isSubmitting, restartRecognition]);\n  const stopListening = useCallback(() => {\n    if (recognition) {\n      recognition.stop();\n      Logger.info('Voice recognition manually stopped');\n      setIsListening(false);\n    }\n  }, [recognition]);\n  useEffect(() => {\n    return () => {\n      if (recognition) {\n        recognition.stop();\n        Logger.info('Voice recognition cleanup on unmount');\n      }\n    };\n  }, [recognition]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-end gap-2\",\n    children: [(transcript || processingStatus) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-black/70 backdrop-blur-sm rounded-lg px-4 py-2 text-white text-sm max-w-xs\",\n      children: transcript || processingStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-900/70 backdrop-blur-sm rounded-lg px-4 py-2 text-white text-sm max-w-xs\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isListening ? stopListening : startListening,\n      disabled: disabled,\n      className: `w-14 h-14 rounded-full flex items-center justify-center text-white shadow-lg transition-colors relative ${isListening ? 'bg-red-600 hover:bg-red-700' : 'bg-purple-600 hover:bg-purple-700'} ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`,\n      title: isListening ? 'Stop listening' : 'Start voice input',\n      \"aria-label\": isListening ? 'Stop voice input' : 'Start voice input',\n      children: [isListening ? /*#__PURE__*/_jsxDEV(MicOff, {\n        className: \"w-6 h-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(Mic, {\n        className: \"w-6 h-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 57\n      }, this), isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 rounded-full border-4 border-red-400 animate-ping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceInput, \"7iurMc7rx+ng9nolryDpku9rCqY=\");\n_c = VoiceInput;\nexport default VoiceInput;\nvar _c;\n$RefreshReg$(_c, \"VoiceInput\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","Mic","MicOff","Logger","jsxDEV","_jsxDEV","VoiceInput","onVoiceInput","disabled","_s","isListening","setIsListening","transcript","setTranscript","recognition","setRecognition","error","setError","processingStatus","setProcessingStatus","silenceTimer","setSilenceTimer","lastResultTime","setLastResultTime","finalTranscript","setFinalTranscript","isSubmitting","setIsSubmitting","restartRecognition","console","log","start","startListening","checkSilence","silenceTime","Date","now","submitTranscript","text","voiceCapture","status","setTimeout","SpeechRecognition","window","webkitSpeechRecognition","Error","stop","e","clearInterval","recognitionInstance","continuous","interimResults","lang","maxAlternatives","onstart","info","timer","setInterval","onresult","event","currentTranscript","isFinal","i","results","length","result","onerror","onend","message","stopListening","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","_c","$RefreshReg$"],"sources":["/Users/manmohan/Documents/drone_assembler/frontend/src/components/VoiceInput.js"],"sourcesContent":["// frontend/src/components/VoiceInput.js\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Mic, MicOff } from 'lucide-react';\nimport Logger from '../utils/logger';\n\nconst VoiceInput = ({ onVoiceInput, disabled = false }) => {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [recognition, setRecognition] = useState(null);\n  const [error, setError] = useState(null);\n  const [processingStatus, setProcessingStatus] = useState(null);\n  const [silenceTimer, setSilenceTimer] = useState(null);\n  const [lastResultTime, setLastResultTime] = useState(null);\n  const [finalTranscript, setFinalTranscript] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  // Function to restart listening if it stops unexpectedly\n  const restartRecognition = useCallback(() => {\n    if (recognition && isListening && !isSubmitting) {\n      try {\n        console.log(\"[DEBUG] Attempting to restart voice recognition\");\n        recognition.start();\n      } catch (error) {\n        console.error(\"[DEBUG] Error restarting recognition:\", error);\n        // If we can't restart, create a new instance\n        startListening();\n      }\n    }\n  }, [recognition, isListening, isSubmitting]);\n\n  // Check for long silence and submit if needed\n  const checkSilence = useCallback(() => {\n    if (isListening && lastResultTime) {\n      const silenceTime = Date.now() - lastResultTime;\n      if (silenceTime > 2000 && transcript && transcript !== 'Listening...' && !isSubmitting) {\n        console.log(\"[DEBUG] Detected silence, submitting transcript:\", transcript);\n        submitTranscript(transcript);\n      }\n    }\n  }, [isListening, lastResultTime, transcript, isSubmitting]);\n\n  // Function to submit the final transcript\n  const submitTranscript = useCallback((text) => {\n    if (isSubmitting || !text || text === 'Listening...') return;\n    \n    setIsSubmitting(true);\n    setProcessingStatus('Processing voice input...');\n    Logger.voiceCapture(text);\n    \n    // Store the final transcript\n    setFinalTranscript(text);\n    \n    // Pass the transcript to parent component\n    onVoiceInput(text, (status) => {\n      setProcessingStatus(status);\n      // Clear transcript and status after processing completes\n      setTimeout(() => {\n        setTranscript('');\n        setProcessingStatus(null);\n        setIsSubmitting(false);\n      }, 5000);\n    });\n  }, [onVoiceInput, isSubmitting]);\n\n  const startListening = useCallback(() => {\n    try {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        throw new Error('Speech recognition is not supported in this browser');\n      }\n\n      // Clear any previous state\n      if (recognition) {\n        try {\n          recognition.stop();\n        } catch (e) {\n          console.log(\"Recognition already stopped\");\n        }\n      }\n      \n      if (silenceTimer) {\n        clearInterval(silenceTimer);\n      }\n\n      const recognitionInstance = new SpeechRecognition();\n      \n      // Enable continuous mode for smoother experience\n      recognitionInstance.continuous = true;\n      recognitionInstance.interimResults = true;\n      recognitionInstance.lang = 'en-US';\n      recognitionInstance.maxAlternatives = 1;\n\n      recognitionInstance.onstart = () => {\n        Logger.info('Voice recognition started');\n        setIsListening(true);\n        setError(null);\n        setTranscript('Listening...');\n        setProcessingStatus(null);\n        setLastResultTime(Date.now());\n        \n        // Start silence detection interval\n        const timer = setInterval(checkSilence, 500);\n        setSilenceTimer(timer);\n      };\n\n      recognitionInstance.onresult = (event) => {\n        setLastResultTime(Date.now());\n        \n        // Build transcript from all results\n        let currentTranscript = '';\n        let isFinal = false;\n        \n        for (let i = 0; i < event.results.length; i++) {\n          const result = event.results[i];\n          currentTranscript += result[0].transcript;\n          \n          if (result.isFinal) {\n            isFinal = true;\n          }\n        }\n        \n        // If we have a transcript, update it\n        if (currentTranscript) {\n          setTranscript(currentTranscript);\n        }\n        \n        // If this is explicitly marked as final or we have a long enough transcript\n        if (isFinal || (currentTranscript.length > 10 && !event.results[event.results.length-1].isFinal)) {\n          submitTranscript(currentTranscript);\n        }\n      };\n\n      recognitionInstance.onerror = (event) => {\n        // Don't treat \"no-speech\" as an error, just keep listening\n        if (event.error === 'no-speech') {\n          console.log(\"[DEBUG] No speech detected yet, continuing to listen\");\n          return;\n        }\n        \n        // For \"aborted\" errors, try to restart\n        if (event.error === 'aborted' && isListening) {\n          console.log(\"[DEBUG] Recognition aborted, attempting to restart\");\n          setTimeout(restartRecognition, 300);\n          return;\n        }\n        \n        Logger.error('Voice recognition error:', event.error);\n        setError(`Error: ${event.error}`);\n        setIsListening(false);\n        \n        // Try to restart for recoverable errors\n        if (event.error === 'network' || event.error === 'service-not-allowed') {\n          console.log(\"[DEBUG] Recoverable error, attempting to restart\");\n          setTimeout(startListening, 1000);\n        }\n      };\n\n      recognitionInstance.onend = () => {\n        console.log(\"[DEBUG] Recognition ended, isListening:\", isListening);\n        \n        // If we're still supposed to be listening, try to restart\n        if (isListening && !isSubmitting) {\n          console.log(\"[DEBUG] Recognition ended while still listening, restarting\");\n          setTimeout(restartRecognition, 300);\n        } else {\n          // Normal end of recognition\n          Logger.info('Voice recognition ended');\n          setIsListening(false);\n          \n          // If we have a transcript but haven't submitted it yet, submit it now\n          if (transcript && transcript !== 'Listening...' && !isSubmitting && !finalTranscript) {\n            submitTranscript(transcript);\n          } else if (!error && !processingStatus && !isSubmitting) {\n            setProcessingStatus('Processing...');\n          }\n          \n          // Clean up silence timer\n          if (silenceTimer) {\n            clearInterval(silenceTimer);\n            setSilenceTimer(null);\n          }\n        }\n      };\n\n      setRecognition(recognitionInstance);\n      recognitionInstance.start();\n    } catch (error) {\n      Logger.error('Failed to initialize voice recognition:', error);\n      setError(error.message);\n    }\n  }, [onVoiceInput, recognition, isListening, transcript, silenceTimer, checkSilence, submitTranscript, finalTranscript, isSubmitting, restartRecognition]);\n\n  const stopListening = useCallback(() => {\n    if (recognition) {\n      recognition.stop();\n      Logger.info('Voice recognition manually stopped');\n      setIsListening(false);\n    }\n  }, [recognition]);\n\n  useEffect(() => {\n    return () => {\n      if (recognition) {\n        recognition.stop();\n        Logger.info('Voice recognition cleanup on unmount');\n      }\n    };\n  }, [recognition]);\n\n  return (\n    <div className=\"flex flex-col items-end gap-2\">\n      {/* Status display */}\n      {(transcript || processingStatus) && (\n        <div className=\"bg-black/70 backdrop-blur-sm rounded-lg px-4 py-2 text-white text-sm max-w-xs\">\n          {transcript || processingStatus}\n        </div>\n      )}\n      \n      {/* Error display */}\n      {error && (\n        <div className=\"bg-red-900/70 backdrop-blur-sm rounded-lg px-4 py-2 text-white text-sm max-w-xs\">\n          {error}\n        </div>\n      )}\n      \n      {/* Voice input button */}\n      <button\n        onClick={isListening ? stopListening : startListening}\n        disabled={disabled}\n        className={`w-14 h-14 rounded-full flex items-center justify-center text-white shadow-lg transition-colors relative ${\n          isListening \n            ? 'bg-red-600 hover:bg-red-700' \n            : 'bg-purple-600 hover:bg-purple-700'\n        } ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}\n        title={isListening ? 'Stop listening' : 'Start voice input'}\n        aria-label={isListening ? 'Stop voice input' : 'Start voice input'}\n      >\n        {isListening ? <MicOff className=\"w-6 h-6\" /> : <Mic className=\"w-6 h-6\" />}\n        \n        {/* Listening animation */}\n        {isListening && (\n          <div className=\"absolute inset-0 rounded-full border-4 border-red-400 animate-ping\" />\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default VoiceInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}